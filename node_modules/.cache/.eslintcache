[{"C:\\Users\\pilat\\OneDrive\\Documents\\GitHub\\react\\src\\App.jsx":"1","C:\\Users\\pilat\\OneDrive\\Documents\\GitHub\\react\\src\\index.js":"2"},{"size":4256,"mtime":1677269801249,"results":"3","hashOfConfig":"4"},{"size":219,"mtime":1676996518848,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"8jb1bh",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"C:\\Users\\pilat\\OneDrive\\Documents\\GitHub\\react\\src\\App.jsx",["14","15"],[],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport \"./App.scss\";\n\nfunction App(props) {\n  const [token, setToken] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\nconst [processorToken, setProcessorToken] = useState(null); // add state variable for processorToken\n\n  const onSuccess = useCallback(async (publicToken, metadata) => {\n    setLoading(true);\n    await fetch(\"/api/exchange_public_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ public_token: publicToken }),\n    });\nawait fetch(\"/api/create_processor_token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ public_token: publicToken, account_id: metadata.accounts[0].id }),\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      const processorToken = data.processor_token;\nconsole.log(\"Token:\", processorToken);\nsetProcessorToken(processorToken); // set the processorToken state variable\n\n    })\n    .catch((error) => {\n      // handle error\n    });\n\n    await getBalance();\n  }, []);\n\n  // Creates a Link token\n  const createLinkToken = React.useCallback(async () => {\n    // For OAuth, use previously generated Link token\n    if (window.location.href.includes(\"?oauth_state_id=\")) {\n      const linkToken = localStorage.getItem('link_token');\n      setToken(linkToken);\n    } else {\n      const response = await fetch(\"/api/create_link_token\", {});\n      const data = await response.json();\n      setToken(data.link_token);\n      localStorage.setItem(\"link_token\", data.link_token);\n    }\n  }, [setToken]);\n\n  // Fetch balance data\n  const getBalance = React.useCallback(async () => {\n    setLoading(true);\n    const response = await fetch(\"/api/balance\", {});\n    const data = await response.json();\n    setData(data);\n    setLoading(false);\n  }, [setData, setLoading]);\n\n  let isOauth = false;\n\n  const config = {\n    token,\n    onSuccess,\n  };\n\n  // For OAuth, configure the received redirect URI\n  if (window.location.href.includes(\"?oauth_state_id=\")) {\n    config.receivedRedirectUri = window.location.href;\n    isOauth = true;\n  }\n  const { open, ready } = usePlaidLink(config);\n\n  useEffect(() => {\n    if (token == null) {\n      createLinkToken();\n    }\n    if (isOauth && ready) {\n      open();\n    }\n  }, [token, isOauth, ready, open]);\n\n\n const handleSubmit = async (e) => {\n    e.preventDefault();\n\n  const searchParams = new URLSearchParams(window.location.search);\n  const userid = searchParams.get(\"userid\");\n\n\n    const formData = new FormData(e.target);\n    const data = {};\n\n    for (let [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n  data[\"userid\"] = userid;\n\n    await fetch(\"https://pzcoopmembersportal.kinsta.cloud/?wpwhreceivable_group=received_http_request&wpwhreceivable_name=wpwh-flow-30&wpwhreceivable=9nKDYUSw2xIxsMFlrUXk9VQ40zaeQ795G3ggYB73rAQ-\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n\tmode: 'no-cors',\n  });\n\n    window.location.href = `https://pzcoopmembersportal.kinsta.cloud/`;\n  };\n\n\nreturn (\n  <div id=\"main\">\n\n    {!loading && processorToken != null ? (\n      <div id=\"congrats\">\n        <h4>Great! Your bank account is set.</h4>\n{!loading && data != null && (\n          <div>\n            <p><strong>Available Balance:</strong> ${data.Balance.accounts[0].balances.available}</p>\n            <p><strong>Bank:</strong> {data.Balance.accounts[0].name}</p>\n          </div>\n        )}\n        <form onSubmit={handleSubmit}>\n          <input type=\"hidden\" name=\"token\" value={processorToken} />\n          <input type=\"hidden\" name=\"bankname\" value={data.Balance.accounts[0].name} />\n          <input type=\"hidden\" name=\"balance\" value={data.Balance.accounts[0].balances.available} />\n          <button type=\"submit\">Continue</button>\n        </form>\n\n      </div>\n    ) : (\n<div>\n<h4>Let's connect your bank account, click the button below to get started:</h4>\n      <button onClick={() => open()} disabled={!ready}>\n        <strong>Link account</strong>\n      </button>\n</div>\n    )}\n  </div>\n);\n}\n\nexport default App;","C:\\Users\\pilat\\OneDrive\\Documents\\GitHub\\react\\src\\index.js",[],[],[],{"ruleId":"16","severity":1,"message":"17","line":39,"column":6,"nodeType":"18","endLine":39,"endColumn":8,"suggestions":"19"},{"ruleId":"16","severity":1,"message":"20","line":85,"column":6,"nodeType":"18","endLine":85,"endColumn":35,"suggestions":"21"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'getBalance'. Either include it or remove the dependency array.","ArrayExpression",["22"],"React Hook useEffect has a missing dependency: 'createLinkToken'. Either include it or remove the dependency array.",["23"],{"desc":"24","fix":"25"},{"desc":"26","fix":"27"},"Update the dependencies array to be: [getBalance]",{"range":"28","text":"29"},"Update the dependencies array to be: [token, isOauth, ready, open, createLinkToken]",{"range":"30","text":"31"},[1239,1241],"[getBalance]",[2477,2506],"[token, isOauth, ready, open, createLinkToken]"]