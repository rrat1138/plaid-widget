{"ast":null,"code":"const {\n  Configuration,\n  PlaidApi,\n  PlaidEnvironments,\n  ProcessorTokenCreateRequest\n} = require('plaid');\nconst configuration = new Configuration({\n  basePath: PlaidEnvironments[process.env.PLAID_ENV],\n  baseOptions: {\n    headers: {\n      'PLAID-CLIENT-ID': process.env.PLAID_CLIENT_ID,\n      'PLAID-SECRET': process.env.PLAID_SECRET,\n      'Plaid-Version': '2020-09-14'\n    }\n  }\n});\nconst plaidClient = new PlaidApi(configuration);\nmodule.exports = async function createProcessorToken(publicToken, accountID) {\n  try {\n    const tokenResponse = await plaidClient.itemPublicTokenExchange({\n      public_token: publicToken\n    });\n    const accessToken = tokenResponse.data.access_token;\n    const request = {\n      access_token: accessToken,\n      account_id: accountID,\n      processor: 'circle'\n    };\n    const processorTokenResponse = await plaidClient.processorTokenCreate(request);\n    const processorToken = processorTokenResponse.data.processor_token;\n    return processorToken;\n  } catch (error) {\n    // handle error\n  }\n};","map":{"version":3,"names":["Configuration","PlaidApi","PlaidEnvironments","ProcessorTokenCreateRequest","require","configuration","basePath","process","env","PLAID_ENV","baseOptions","headers","PLAID_CLIENT_ID","PLAID_SECRET","plaidClient","module","exports","createProcessorToken","publicToken","accountID","tokenResponse","itemPublicTokenExchange","public_token","accessToken","data","access_token","request","account_id","processor","processorTokenResponse","processorTokenCreate","processorToken","processor_token","error"],"sources":["C:/Users/pilat/OneDrive/Documents/GitHub/react/src/create_processor_token.js"],"sourcesContent":["const { Configuration, PlaidApi, PlaidEnvironments, ProcessorTokenCreateRequest } = require('plaid');\r\n\r\nconst configuration = new Configuration({\r\n  basePath: PlaidEnvironments[process.env.PLAID_ENV],\r\n  baseOptions: {\r\n    headers: {\r\n      'PLAID-CLIENT-ID': process.env.PLAID_CLIENT_ID,\r\n      'PLAID-SECRET': process.env.PLAID_SECRET,\r\n      'Plaid-Version': '2020-09-14',\r\n    },\r\n  },\r\n});\r\n\r\nconst plaidClient = new PlaidApi(configuration);\r\n\r\nmodule.exports = async function createProcessorToken(publicToken, accountID) {\r\n  try {\r\n    const tokenResponse = await plaidClient.itemPublicTokenExchange({\r\n      public_token: publicToken,\r\n    });\r\n    const accessToken = tokenResponse.data.access_token;\r\n\r\n    const request = {\r\n      access_token: accessToken,\r\n      account_id: accountID,\r\n      processor: 'circle',\r\n    };\r\n\r\n    const processorTokenResponse = await plaidClient.processorTokenCreate(request);\r\n    const processorToken = processorTokenResponse.data.processor_token;\r\n\r\n    return processorToken;\r\n  } catch (error) {\r\n    // handle error\r\n  }\r\n}"],"mappings":"AAAA,MAAM;EAAEA,aAAa;EAAEC,QAAQ;EAAEC,iBAAiB;EAAEC;AAA4B,CAAC,GAAGC,OAAO,CAAC,OAAO,CAAC;AAEpG,MAAMC,aAAa,GAAG,IAAIL,aAAa,CAAC;EACtCM,QAAQ,EAAEJ,iBAAiB,CAACK,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;EAClDC,WAAW,EAAE;IACXC,OAAO,EAAE;MACP,iBAAiB,EAAEJ,OAAO,CAACC,GAAG,CAACI,eAAe;MAC9C,cAAc,EAAEL,OAAO,CAACC,GAAG,CAACK,YAAY;MACxC,eAAe,EAAE;IACnB;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAG,IAAIb,QAAQ,CAACI,aAAa,CAAC;AAE/CU,MAAM,CAACC,OAAO,GAAG,eAAeC,oBAAoBA,CAACC,WAAW,EAAEC,SAAS,EAAE;EAC3E,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMN,WAAW,CAACO,uBAAuB,CAAC;MAC9DC,YAAY,EAAEJ;IAChB,CAAC,CAAC;IACF,MAAMK,WAAW,GAAGH,aAAa,CAACI,IAAI,CAACC,YAAY;IAEnD,MAAMC,OAAO,GAAG;MACdD,YAAY,EAAEF,WAAW;MACzBI,UAAU,EAAER,SAAS;MACrBS,SAAS,EAAE;IACb,CAAC;IAED,MAAMC,sBAAsB,GAAG,MAAMf,WAAW,CAACgB,oBAAoB,CAACJ,OAAO,CAAC;IAC9E,MAAMK,cAAc,GAAGF,sBAAsB,CAACL,IAAI,CAACQ,eAAe;IAElE,OAAOD,cAAc;EACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;EAAA;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}