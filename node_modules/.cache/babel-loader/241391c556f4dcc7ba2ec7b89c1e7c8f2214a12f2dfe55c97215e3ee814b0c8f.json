{"ast":null,"code":"\"use strict\";\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * The Plaid API\n * The Plaid REST API. Please see https://plaid.com/docs/api for more details.\n *\n * The version of the OpenAPI document: 2020-09-14_1.78.2\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PaymentScheme = exports.PaymentScheduleInterval = exports.PaymentInitiationRefundStatusEnum = exports.PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentReverseResponseStatusEnum = exports.PaymentInitiationPaymentCreateResponseStatusEnum = exports.PaymentAmountCurrencyEnum = exports.PayPeriodDetailsPayFrequencyEnum = exports.PayFrequencyValue = exports.OverrideAccountType = exports.ModelErrorErrorTypeEnum = exports.LoanAccountSubtype = exports.LinkTokenCreateRequestAuthFlowTypeEnum = exports.ItemUpdateTypeEnum = exports.InvestmentTransactionSubtypeEnum = exports.InvestmentTransactionTypeEnum = exports.InvestmentAccountSubtype = exports.IncomeVerificationPrecheckMilitaryInfoBranchEnum = exports.IncomeVerificationPrecheckConfidence = exports.IncomeBreakdownType = exports.IncidentUpdateStatusEnum = exports.EmploymentVerificationStatus = exports.EmailTypeEnum = exports.EarningsBreakdownCanonicalDescription = exports.DocType = exports.DepositoryAccountSubtype = exports.DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseStateEnum = exports.DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum = exports.CreditAccountSubtype = exports.CountryCode = exports.ConnectedApplicationProductDataTypesEnum = exports.BankTransferType = exports.BankTransferStatus = exports.BankTransferNetwork = exports.BankTransferEventType = exports.BankTransferEventListRequestDirectionEnum = exports.BankTransferEventListRequestBankTransferTypeEnum = exports.BankTransferDirection = exports.AssetReportTransactionTransactionTypeEnum = exports.AccountType = exports.AccountSubtype = exports.AccountSelectionCardinality = exports.AccountIdentityVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum = exports.APRAprTypeEnum = exports.ACHClass = void 0;\nexports.PlaidApi = exports.PlaidApiFactory = exports.PlaidApiFp = exports.PlaidApiAxiosParamCreator = exports.WarningWarningCodeEnum = exports.WalletTransactionStatus = exports.WalletTransactionAmountIsoCurrencyCodeEnum = exports.WalletTransactionTypeEnum = exports.VerificationStatus = exports.VerificationRefreshStatus = exports.VerificationAttributeTypeEnum = exports.TransferType = exports.TransferSweepStatus = exports.TransferStatus = exports.TransferNetwork = exports.TransferIntentGetAuthorizationDecisionEnum = exports.TransferIntentGetStatusEnum = exports.TransferIntentCreateMode = exports.TransferIntentCreateStatusEnum = exports.TransferEventType = exports.TransferEventListRequestTransferTypeEnum = exports.TransferAuthorizationGuaranteeDecisionRationaleCodeEnum = exports.TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationDecisionRationaleCodeEnum = exports.TransferAuthorizationDecisionEnum = exports.TransactionCode = exports.TransactionBaseTransactionTypeEnum = exports.TransactionAllOfPaymentChannelEnum = exports.TransactionPaymentChannelEnum = exports.TransactionTransactionTypeEnum = exports.TotalCanonicalDescription = exports.StudentRepaymentPlanTypeEnum = exports.StudentLoanStatusTypeEnum = exports.ScopesContext = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.RecurringTransactionFrequency = exports.Products = exports.ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusStatusEnum = exports.ProcessorTokenCreateRequestProcessorEnum = exports.PlaidErrorErrorTypeEnum = exports.PhoneNumberTypeEnum = exports.PaystubVerificationStatus = exports.PaystubPayFrequency = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = require(\"./common\");\n// @ts-ignore\nconst base_1 = require(\"./base\");\n/**\n * Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\\\"arc\\\"` - Accounts Receivable Entry  `\\\"cbr`\\\" - Cross Border Entry  `\\\"ccd\\\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\\\"cie\\\"` - Customer Initiated Entry  `\\\"cor\\\"` - Automated Notification of Change  `\\\"ctx\\\"` - Corporate Trade Exchange  `\\\"iat\\\"` - International  `\\\"mte\\\"` - Machine Transfer Entry  `\\\"pbr\\\"` - Cross Border Entry  `\\\"pop\\\"` - Point-of-Purchase Entry  `\\\"pos\\\"` - Point-of-Sale Entry  `\\\"ppd\\\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\\\"rck\\\"` - Re-presented Check Entry  `\\\"tel\\\"` - Telephone-Initiated Entry  `\\\"web\\\"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet\n * @export\n * @enum {string}\n */\nvar ACHClass;\n(function (ACHClass) {\n  ACHClass[\"Arc\"] = \"arc\";\n  ACHClass[\"Cbr\"] = \"cbr\";\n  ACHClass[\"Ccd\"] = \"ccd\";\n  ACHClass[\"Cie\"] = \"cie\";\n  ACHClass[\"Cor\"] = \"cor\";\n  ACHClass[\"Ctx\"] = \"ctx\";\n  ACHClass[\"Iat\"] = \"iat\";\n  ACHClass[\"Mte\"] = \"mte\";\n  ACHClass[\"Pbr\"] = \"pbr\";\n  ACHClass[\"Pop\"] = \"pop\";\n  ACHClass[\"Pos\"] = \"pos\";\n  ACHClass[\"Ppd\"] = \"ppd\";\n  ACHClass[\"Rck\"] = \"rck\";\n  ACHClass[\"Tel\"] = \"tel\";\n  ACHClass[\"Web\"] = \"web\";\n})(ACHClass = exports.ACHClass || (exports.ACHClass = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar APRAprTypeEnum;\n(function (APRAprTypeEnum) {\n  APRAprTypeEnum[\"BalanceTransferApr\"] = \"balance_transfer_apr\";\n  APRAprTypeEnum[\"CashApr\"] = \"cash_apr\";\n  APRAprTypeEnum[\"PurchaseApr\"] = \"purchase_apr\";\n  APRAprTypeEnum[\"Special\"] = \"special\";\n})(APRAprTypeEnum = exports.APRAprTypeEnum || (exports.APRAprTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar AccountAssetsVerificationStatusEnum;\n(function (AccountAssetsVerificationStatusEnum) {\n  AccountAssetsVerificationStatusEnum[\"AutomaticallyVerified\"] = \"automatically_verified\";\n  AccountAssetsVerificationStatusEnum[\"PendingAutomaticVerification\"] = \"pending_automatic_verification\";\n  AccountAssetsVerificationStatusEnum[\"PendingManualVerification\"] = \"pending_manual_verification\";\n  AccountAssetsVerificationStatusEnum[\"ManuallyVerified\"] = \"manually_verified\";\n  AccountAssetsVerificationStatusEnum[\"VerificationExpired\"] = \"verification_expired\";\n  AccountAssetsVerificationStatusEnum[\"VerificationFailed\"] = \"verification_failed\";\n})(AccountAssetsVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum || (exports.AccountAssetsVerificationStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar AccountBaseVerificationStatusEnum;\n(function (AccountBaseVerificationStatusEnum) {\n  AccountBaseVerificationStatusEnum[\"AutomaticallyVerified\"] = \"automatically_verified\";\n  AccountBaseVerificationStatusEnum[\"PendingAutomaticVerification\"] = \"pending_automatic_verification\";\n  AccountBaseVerificationStatusEnum[\"PendingManualVerification\"] = \"pending_manual_verification\";\n  AccountBaseVerificationStatusEnum[\"ManuallyVerified\"] = \"manually_verified\";\n  AccountBaseVerificationStatusEnum[\"VerificationExpired\"] = \"verification_expired\";\n  AccountBaseVerificationStatusEnum[\"VerificationFailed\"] = \"verification_failed\";\n})(AccountBaseVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum || (exports.AccountBaseVerificationStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar AccountIdentityVerificationStatusEnum;\n(function (AccountIdentityVerificationStatusEnum) {\n  AccountIdentityVerificationStatusEnum[\"AutomaticallyVerified\"] = \"automatically_verified\";\n  AccountIdentityVerificationStatusEnum[\"PendingAutomaticVerification\"] = \"pending_automatic_verification\";\n  AccountIdentityVerificationStatusEnum[\"PendingManualVerification\"] = \"pending_manual_verification\";\n  AccountIdentityVerificationStatusEnum[\"ManuallyVerified\"] = \"manually_verified\";\n  AccountIdentityVerificationStatusEnum[\"VerificationExpired\"] = \"verification_expired\";\n  AccountIdentityVerificationStatusEnum[\"VerificationFailed\"] = \"verification_failed\";\n})(AccountIdentityVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum || (exports.AccountIdentityVerificationStatusEnum = {}));\n/**\n * The application requires that accounts be limited to a specific cardinality. `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts. `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account. `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select\n * @export\n * @enum {string}\n */\nvar AccountSelectionCardinality;\n(function (AccountSelectionCardinality) {\n  AccountSelectionCardinality[\"SingleSelect\"] = \"SINGLE_SELECT\";\n  AccountSelectionCardinality[\"MultiSelect\"] = \"MULTI_SELECT\";\n  AccountSelectionCardinality[\"All\"] = \"ALL\";\n})(AccountSelectionCardinality = exports.AccountSelectionCardinality || (exports.AccountSelectionCardinality = {}));\n/**\n * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nvar AccountSubtype;\n(function (AccountSubtype) {\n  AccountSubtype[\"_401a\"] = \"401a\";\n  AccountSubtype[\"_401k\"] = \"401k\";\n  AccountSubtype[\"_403B\"] = \"403B\";\n  AccountSubtype[\"_457b\"] = \"457b\";\n  AccountSubtype[\"_529\"] = \"529\";\n  AccountSubtype[\"Brokerage\"] = \"brokerage\";\n  AccountSubtype[\"CashIsa\"] = \"cash isa\";\n  AccountSubtype[\"EducationSavingsAccount\"] = \"education savings account\";\n  AccountSubtype[\"Ebt\"] = \"ebt\";\n  AccountSubtype[\"FixedAnnuity\"] = \"fixed annuity\";\n  AccountSubtype[\"Gic\"] = \"gic\";\n  AccountSubtype[\"HealthReimbursementArrangement\"] = \"health reimbursement arrangement\";\n  AccountSubtype[\"Hsa\"] = \"hsa\";\n  AccountSubtype[\"Isa\"] = \"isa\";\n  AccountSubtype[\"Ira\"] = \"ira\";\n  AccountSubtype[\"Lif\"] = \"lif\";\n  AccountSubtype[\"LifeInsurance\"] = \"life insurance\";\n  AccountSubtype[\"Lira\"] = \"lira\";\n  AccountSubtype[\"Lrif\"] = \"lrif\";\n  AccountSubtype[\"Lrsp\"] = \"lrsp\";\n  AccountSubtype[\"NonTaxableBrokerageAccount\"] = \"non-taxable brokerage account\";\n  AccountSubtype[\"Other\"] = \"other\";\n  AccountSubtype[\"OtherInsurance\"] = \"other insurance\";\n  AccountSubtype[\"OtherAnnuity\"] = \"other annuity\";\n  AccountSubtype[\"Prif\"] = \"prif\";\n  AccountSubtype[\"Rdsp\"] = \"rdsp\";\n  AccountSubtype[\"Resp\"] = \"resp\";\n  AccountSubtype[\"Rlif\"] = \"rlif\";\n  AccountSubtype[\"Rrif\"] = \"rrif\";\n  AccountSubtype[\"Pension\"] = \"pension\";\n  AccountSubtype[\"ProfitSharingPlan\"] = \"profit sharing plan\";\n  AccountSubtype[\"Retirement\"] = \"retirement\";\n  AccountSubtype[\"Roth\"] = \"roth\";\n  AccountSubtype[\"Roth401k\"] = \"roth 401k\";\n  AccountSubtype[\"Rrsp\"] = \"rrsp\";\n  AccountSubtype[\"SepIra\"] = \"sep ira\";\n  AccountSubtype[\"SimpleIra\"] = \"simple ira\";\n  AccountSubtype[\"Sipp\"] = \"sipp\";\n  AccountSubtype[\"StockPlan\"] = \"stock plan\";\n  AccountSubtype[\"ThriftSavingsPlan\"] = \"thrift savings plan\";\n  AccountSubtype[\"Tfsa\"] = \"tfsa\";\n  AccountSubtype[\"Trust\"] = \"trust\";\n  AccountSubtype[\"Ugma\"] = \"ugma\";\n  AccountSubtype[\"Utma\"] = \"utma\";\n  AccountSubtype[\"VariableAnnuity\"] = \"variable annuity\";\n  AccountSubtype[\"CreditCard\"] = \"credit card\";\n  AccountSubtype[\"Paypal\"] = \"paypal\";\n  AccountSubtype[\"Cd\"] = \"cd\";\n  AccountSubtype[\"Checking\"] = \"checking\";\n  AccountSubtype[\"Savings\"] = \"savings\";\n  AccountSubtype[\"MoneyMarket\"] = \"money market\";\n  AccountSubtype[\"Prepaid\"] = \"prepaid\";\n  AccountSubtype[\"Auto\"] = \"auto\";\n  AccountSubtype[\"Business\"] = \"business\";\n  AccountSubtype[\"Commercial\"] = \"commercial\";\n  AccountSubtype[\"Construction\"] = \"construction\";\n  AccountSubtype[\"Consumer\"] = \"consumer\";\n  AccountSubtype[\"HomeEquity\"] = \"home equity\";\n  AccountSubtype[\"Loan\"] = \"loan\";\n  AccountSubtype[\"Mortgage\"] = \"mortgage\";\n  AccountSubtype[\"Overdraft\"] = \"overdraft\";\n  AccountSubtype[\"LineOfCredit\"] = \"line of credit\";\n  AccountSubtype[\"Student\"] = \"student\";\n  AccountSubtype[\"CashManagement\"] = \"cash management\";\n  AccountSubtype[\"Keogh\"] = \"keogh\";\n  AccountSubtype[\"MutualFund\"] = \"mutual fund\";\n  AccountSubtype[\"Recurring\"] = \"recurring\";\n  AccountSubtype[\"Rewards\"] = \"rewards\";\n  AccountSubtype[\"SafeDeposit\"] = \"safe deposit\";\n  AccountSubtype[\"Sarsep\"] = \"sarsep\";\n  AccountSubtype[\"Payroll\"] = \"payroll\";\n  AccountSubtype[\"Null\"] = \"null\";\n})(AccountSubtype = exports.AccountSubtype || (exports.AccountSubtype = {}));\n/**\n * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `brokerage`: An investment account. Used for `/assets/` endpoints only; other endpoints use `investment`.  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nvar AccountType;\n(function (AccountType) {\n  AccountType[\"Investment\"] = \"investment\";\n  AccountType[\"Credit\"] = \"credit\";\n  AccountType[\"Depository\"] = \"depository\";\n  AccountType[\"Loan\"] = \"loan\";\n  AccountType[\"Brokerage\"] = \"brokerage\";\n  AccountType[\"Other\"] = \"other\";\n})(AccountType = exports.AccountType || (exports.AccountType = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar AssetReportTransactionTransactionTypeEnum;\n(function (AssetReportTransactionTransactionTypeEnum) {\n  AssetReportTransactionTransactionTypeEnum[\"Digital\"] = \"digital\";\n  AssetReportTransactionTransactionTypeEnum[\"Place\"] = \"place\";\n  AssetReportTransactionTransactionTypeEnum[\"Special\"] = \"special\";\n  AssetReportTransactionTransactionTypeEnum[\"Unresolved\"] = \"unresolved\";\n})(AssetReportTransactionTransactionTypeEnum = exports.AssetReportTransactionTransactionTypeEnum || (exports.AssetReportTransactionTransactionTypeEnum = {}));\n/**\n * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.\n * @export\n * @enum {string}\n */\nvar BankTransferDirection;\n(function (BankTransferDirection) {\n  BankTransferDirection[\"Outbound\"] = \"outbound\";\n  BankTransferDirection[\"Inbound\"] = \"inbound\";\n  BankTransferDirection[\"Null\"] = \"null\";\n})(BankTransferDirection = exports.BankTransferDirection || (exports.BankTransferDirection = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar BankTransferEventListRequestBankTransferTypeEnum;\n(function (BankTransferEventListRequestBankTransferTypeEnum) {\n  BankTransferEventListRequestBankTransferTypeEnum[\"Debit\"] = \"debit\";\n  BankTransferEventListRequestBankTransferTypeEnum[\"Credit\"] = \"credit\";\n  BankTransferEventListRequestBankTransferTypeEnum[\"Null\"] = \"null\";\n})(BankTransferEventListRequestBankTransferTypeEnum = exports.BankTransferEventListRequestBankTransferTypeEnum || (exports.BankTransferEventListRequestBankTransferTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar BankTransferEventListRequestDirectionEnum;\n(function (BankTransferEventListRequestDirectionEnum) {\n  BankTransferEventListRequestDirectionEnum[\"Inbound\"] = \"inbound\";\n  BankTransferEventListRequestDirectionEnum[\"Outbound\"] = \"outbound\";\n  BankTransferEventListRequestDirectionEnum[\"Null\"] = \"null\";\n})(BankTransferEventListRequestDirectionEnum = exports.BankTransferEventListRequestDirectionEnum || (exports.BankTransferEventListRequestDirectionEnum = {}));\n/**\n * The type of event that this bank transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.\n * @export\n * @enum {string}\n */\nvar BankTransferEventType;\n(function (BankTransferEventType) {\n  BankTransferEventType[\"Pending\"] = \"pending\";\n  BankTransferEventType[\"Cancelled\"] = \"cancelled\";\n  BankTransferEventType[\"Failed\"] = \"failed\";\n  BankTransferEventType[\"Posted\"] = \"posted\";\n  BankTransferEventType[\"Reversed\"] = \"reversed\";\n})(BankTransferEventType = exports.BankTransferEventType || (exports.BankTransferEventType = {}));\n/**\n * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.\n * @export\n * @enum {string}\n */\nvar BankTransferNetwork;\n(function (BankTransferNetwork) {\n  BankTransferNetwork[\"Ach\"] = \"ach\";\n  BankTransferNetwork[\"SameDayAch\"] = \"same-day-ach\";\n  BankTransferNetwork[\"Wire\"] = \"wire\";\n})(BankTransferNetwork = exports.BankTransferNetwork || (exports.BankTransferNetwork = {}));\n/**\n * The status of the transfer.\n * @export\n * @enum {string}\n */\nvar BankTransferStatus;\n(function (BankTransferStatus) {\n  BankTransferStatus[\"Pending\"] = \"pending\";\n  BankTransferStatus[\"Posted\"] = \"posted\";\n  BankTransferStatus[\"Cancelled\"] = \"cancelled\";\n  BankTransferStatus[\"Failed\"] = \"failed\";\n  BankTransferStatus[\"Reversed\"] = \"reversed\";\n})(BankTransferStatus = exports.BankTransferStatus || (exports.BankTransferStatus = {}));\n/**\n * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.\n * @export\n * @enum {string}\n */\nvar BankTransferType;\n(function (BankTransferType) {\n  BankTransferType[\"Debit\"] = \"debit\";\n  BankTransferType[\"Credit\"] = \"credit\";\n})(BankTransferType = exports.BankTransferType || (exports.BankTransferType = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ConnectedApplicationProductDataTypesEnum;\n(function (ConnectedApplicationProductDataTypesEnum) {\n  ConnectedApplicationProductDataTypesEnum[\"Balance\"] = \"ACCOUNT_BALANCE\";\n  ConnectedApplicationProductDataTypesEnum[\"UserInfo\"] = \"ACCOUNT_USER_INFO\";\n  ConnectedApplicationProductDataTypesEnum[\"Transactions\"] = \"ACCOUNT_TRANSACTIONS\";\n})(ConnectedApplicationProductDataTypesEnum = exports.ConnectedApplicationProductDataTypesEnum || (exports.ConnectedApplicationProductDataTypesEnum = {}));\n/**\n * ISO-3166-1 alpha-2 country code standard.\n * @export\n * @enum {string}\n */\nvar CountryCode;\n(function (CountryCode) {\n  CountryCode[\"Us\"] = \"US\";\n  CountryCode[\"Gb\"] = \"GB\";\n  CountryCode[\"Es\"] = \"ES\";\n  CountryCode[\"Nl\"] = \"NL\";\n  CountryCode[\"Fr\"] = \"FR\";\n  CountryCode[\"Ie\"] = \"IE\";\n  CountryCode[\"Ca\"] = \"CA\";\n  CountryCode[\"De\"] = \"DE\";\n})(CountryCode = exports.CountryCode || (exports.CountryCode = {}));\n/**\n * Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).\n * @export\n * @enum {string}\n */\nvar CreditAccountSubtype;\n(function (CreditAccountSubtype) {\n  CreditAccountSubtype[\"CreditCard\"] = \"credit card\";\n  CreditAccountSubtype[\"Paypal\"] = \"paypal\";\n  CreditAccountSubtype[\"All\"] = \"all\";\n})(CreditAccountSubtype = exports.CreditAccountSubtype || (exports.CreditAccountSubtype = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar DepositSwitchAltCreateRequestCountryCodeEnum;\n(function (DepositSwitchAltCreateRequestCountryCodeEnum) {\n  DepositSwitchAltCreateRequestCountryCodeEnum[\"Us\"] = \"US\";\n  DepositSwitchAltCreateRequestCountryCodeEnum[\"Ca\"] = \"CA\";\n})(DepositSwitchAltCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum || (exports.DepositSwitchAltCreateRequestCountryCodeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar DepositSwitchCreateRequestCountryCodeEnum;\n(function (DepositSwitchCreateRequestCountryCodeEnum) {\n  DepositSwitchCreateRequestCountryCodeEnum[\"Us\"] = \"US\";\n  DepositSwitchCreateRequestCountryCodeEnum[\"Ca\"] = \"CA\";\n})(DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchCreateRequestCountryCodeEnum || (exports.DepositSwitchCreateRequestCountryCodeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar DepositSwitchGetResponseStateEnum;\n(function (DepositSwitchGetResponseStateEnum) {\n  DepositSwitchGetResponseStateEnum[\"Initialized\"] = \"initialized\";\n  DepositSwitchGetResponseStateEnum[\"Processing\"] = \"processing\";\n  DepositSwitchGetResponseStateEnum[\"Completed\"] = \"completed\";\n  DepositSwitchGetResponseStateEnum[\"Error\"] = \"error\";\n})(DepositSwitchGetResponseStateEnum = exports.DepositSwitchGetResponseStateEnum || (exports.DepositSwitchGetResponseStateEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar DepositSwitchGetResponseSwitchMethodEnum;\n(function (DepositSwitchGetResponseSwitchMethodEnum) {\n  DepositSwitchGetResponseSwitchMethodEnum[\"Instant\"] = \"instant\";\n  DepositSwitchGetResponseSwitchMethodEnum[\"Mail\"] = \"mail\";\n  DepositSwitchGetResponseSwitchMethodEnum[\"Pdf\"] = \"pdf\";\n  DepositSwitchGetResponseSwitchMethodEnum[\"Null\"] = \"null\";\n})(DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseSwitchMethodEnum || (exports.DepositSwitchGetResponseSwitchMethodEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar DepositSwitchTargetAccountAccountSubtypeEnum;\n(function (DepositSwitchTargetAccountAccountSubtypeEnum) {\n  DepositSwitchTargetAccountAccountSubtypeEnum[\"Checking\"] = \"checking\";\n  DepositSwitchTargetAccountAccountSubtypeEnum[\"Savings\"] = \"savings\";\n})(DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchTargetAccountAccountSubtypeEnum || (exports.DepositSwitchTargetAccountAccountSubtypeEnum = {}));\n/**\n * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).\n * @export\n * @enum {string}\n */\nvar DepositoryAccountSubtype;\n(function (DepositoryAccountSubtype) {\n  DepositoryAccountSubtype[\"Checking\"] = \"checking\";\n  DepositoryAccountSubtype[\"Savings\"] = \"savings\";\n  DepositoryAccountSubtype[\"Hsa\"] = \"hsa\";\n  DepositoryAccountSubtype[\"Cd\"] = \"cd\";\n  DepositoryAccountSubtype[\"MoneyMarket\"] = \"money market\";\n  DepositoryAccountSubtype[\"Paypal\"] = \"paypal\";\n  DepositoryAccountSubtype[\"Prepaid\"] = \"prepaid\";\n  DepositoryAccountSubtype[\"CashManagement\"] = \"cash management\";\n  DepositoryAccountSubtype[\"Ebt\"] = \"ebt\";\n  DepositoryAccountSubtype[\"All\"] = \"all\";\n})(DepositoryAccountSubtype = exports.DepositoryAccountSubtype || (exports.DepositoryAccountSubtype = {}));\n/**\n * The type of document.  `DOCUMENT_TYPE_PAYSTUB`: A paystub.  `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.  `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.  `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.  `UNKNOWN`: Document type could not be determined.\n * @export\n * @enum {string}\n */\nvar DocType;\n(function (DocType) {\n  DocType[\"Unknown\"] = \"UNKNOWN\";\n  DocType[\"DocumentTypePaystub\"] = \"DOCUMENT_TYPE_PAYSTUB\";\n  DocType[\"DocumentTypeBankStatement\"] = \"DOCUMENT_TYPE_BANK_STATEMENT\";\n  DocType[\"DocumentTypeUsTaxW2\"] = \"DOCUMENT_TYPE_US_TAX_W2\";\n  DocType[\"DocumentTypeUsMilitaryEras\"] = \"DOCUMENT_TYPE_US_MILITARY_ERAS\";\n  DocType[\"DocumentTypeUsMilitaryLes\"] = \"DOCUMENT_TYPE_US_MILITARY_LES\";\n  DocType[\"DocumentTypeUsMilitaryCles\"] = \"DOCUMENT_TYPE_US_MILITARY_CLES\";\n  DocType[\"DocumentTypeGig\"] = \"DOCUMENT_TYPE_GIG\";\n  DocType[\"DocumentTypeNone\"] = \"DOCUMENT_TYPE_NONE\";\n})(DocType = exports.DocType || (exports.DocType = {}));\n/**\n * Commonly used term to describe the earning line item.\n * @export\n * @enum {string}\n */\nvar EarningsBreakdownCanonicalDescription;\n(function (EarningsBreakdownCanonicalDescription) {\n  EarningsBreakdownCanonicalDescription[\"Bonus\"] = \"BONUS\";\n  EarningsBreakdownCanonicalDescription[\"Commission\"] = \"COMMISSION\";\n  EarningsBreakdownCanonicalDescription[\"Overtime\"] = \"OVERTIME\";\n  EarningsBreakdownCanonicalDescription[\"PaidTimeOff\"] = \"PAID TIME OFF\";\n  EarningsBreakdownCanonicalDescription[\"RegularPay\"] = \"REGULAR PAY\";\n  EarningsBreakdownCanonicalDescription[\"Vacation\"] = \"VACATION\";\n  EarningsBreakdownCanonicalDescription[\"BasicAllowanceHousing\"] = \"BASIC ALLOWANCE HOUSING\";\n  EarningsBreakdownCanonicalDescription[\"BasicAllowanceSubsistence\"] = \"BASIC ALLOWANCE SUBSISTENCE\";\n  EarningsBreakdownCanonicalDescription[\"Other\"] = \"OTHER\";\n  EarningsBreakdownCanonicalDescription[\"Null\"] = \"null\";\n})(EarningsBreakdownCanonicalDescription = exports.EarningsBreakdownCanonicalDescription || (exports.EarningsBreakdownCanonicalDescription = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar EmailTypeEnum;\n(function (EmailTypeEnum) {\n  EmailTypeEnum[\"Primary\"] = \"primary\";\n  EmailTypeEnum[\"Secondary\"] = \"secondary\";\n  EmailTypeEnum[\"Other\"] = \"other\";\n})(EmailTypeEnum = exports.EmailTypeEnum || (exports.EmailTypeEnum = {}));\n/**\n * Current employment status.\n * @export\n * @enum {string}\n */\nvar EmploymentVerificationStatus;\n(function (EmploymentVerificationStatus) {\n  EmploymentVerificationStatus[\"EmploymentStatusActive\"] = \"EMPLOYMENT_STATUS_ACTIVE\";\n  EmploymentVerificationStatus[\"EmploymentStatusInactive\"] = \"EMPLOYMENT_STATUS_INACTIVE\";\n  EmploymentVerificationStatus[\"Null\"] = \"null\";\n})(EmploymentVerificationStatus = exports.EmploymentVerificationStatus || (exports.EmploymentVerificationStatus = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar IncidentUpdateStatusEnum;\n(function (IncidentUpdateStatusEnum) {\n  IncidentUpdateStatusEnum[\"Investigating\"] = \"INVESTIGATING\";\n  IncidentUpdateStatusEnum[\"Identified\"] = \"IDENTIFIED\";\n  IncidentUpdateStatusEnum[\"Scheduled\"] = \"SCHEDULED\";\n  IncidentUpdateStatusEnum[\"Resolved\"] = \"RESOLVED\";\n  IncidentUpdateStatusEnum[\"Unknown\"] = \"UNKNOWN\";\n})(IncidentUpdateStatusEnum = exports.IncidentUpdateStatusEnum || (exports.IncidentUpdateStatusEnum = {}));\n/**\n * The type of income. Possible values include:   `\\\"regular\\\"`: regular income   `\\\"overtime\\\"`: overtime income   `\\\"bonus\\\"`: bonus income\n * @export\n * @enum {string}\n */\nvar IncomeBreakdownType;\n(function (IncomeBreakdownType) {\n  IncomeBreakdownType[\"Bonus\"] = \"bonus\";\n  IncomeBreakdownType[\"Overtime\"] = \"overtime\";\n  IncomeBreakdownType[\"Regular\"] = \"regular\";\n  IncomeBreakdownType[\"Null\"] = \"null\";\n})(IncomeBreakdownType = exports.IncomeBreakdownType || (exports.IncomeBreakdownType = {}));\n/**\n * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:  `\\\"HIGH\\\"`: It is very likely that this user can use the digital income verification flow.  \\\"`LOW`\\\": It is unlikely that this user can use the digital income verification flow.  `\\\"UNKNOWN\\\"`: It was not possible to determine if the user is supportable with the information passed.\n * @export\n * @enum {string}\n */\nvar IncomeVerificationPrecheckConfidence;\n(function (IncomeVerificationPrecheckConfidence) {\n  IncomeVerificationPrecheckConfidence[\"High\"] = \"HIGH\";\n  IncomeVerificationPrecheckConfidence[\"Low\"] = \"LOW\";\n  IncomeVerificationPrecheckConfidence[\"Unknown\"] = \"UNKNOWN\";\n})(IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPrecheckConfidence || (exports.IncomeVerificationPrecheckConfidence = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar IncomeVerificationPrecheckMilitaryInfoBranchEnum;\n(function (IncomeVerificationPrecheckMilitaryInfoBranchEnum) {\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"AirForce\"] = \"AIR FORCE\";\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"Army\"] = \"ARMY\";\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"CoastGuard\"] = \"COAST GUARD\";\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"Marines\"] = \"MARINES\";\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"Navy\"] = \"NAVY\";\n  IncomeVerificationPrecheckMilitaryInfoBranchEnum[\"Unknown\"] = \"UNKNOWN\";\n})(IncomeVerificationPrecheckMilitaryInfoBranchEnum = exports.IncomeVerificationPrecheckMilitaryInfoBranchEnum || (exports.IncomeVerificationPrecheckMilitaryInfoBranchEnum = {}));\n/**\n * Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).\n * @export\n * @enum {string}\n */\nvar InvestmentAccountSubtype;\n(function (InvestmentAccountSubtype) {\n  InvestmentAccountSubtype[\"_529\"] = \"529\";\n  InvestmentAccountSubtype[\"_401a\"] = \"401a\";\n  InvestmentAccountSubtype[\"_401k\"] = \"401k\";\n  InvestmentAccountSubtype[\"_403B\"] = \"403B\";\n  InvestmentAccountSubtype[\"_457b\"] = \"457b\";\n  InvestmentAccountSubtype[\"Brokerage\"] = \"brokerage\";\n  InvestmentAccountSubtype[\"CashIsa\"] = \"cash isa\";\n  InvestmentAccountSubtype[\"EducationSavingsAccount\"] = \"education savings account\";\n  InvestmentAccountSubtype[\"FixedAnnuity\"] = \"fixed annuity\";\n  InvestmentAccountSubtype[\"Gic\"] = \"gic\";\n  InvestmentAccountSubtype[\"HealthReimbursementArrangement\"] = \"health reimbursement arrangement\";\n  InvestmentAccountSubtype[\"Hsa\"] = \"hsa\";\n  InvestmentAccountSubtype[\"Ira\"] = \"ira\";\n  InvestmentAccountSubtype[\"Isa\"] = \"isa\";\n  InvestmentAccountSubtype[\"Keogh\"] = \"keogh\";\n  InvestmentAccountSubtype[\"Lif\"] = \"lif\";\n  InvestmentAccountSubtype[\"LifeInsurance\"] = \"life insurance\";\n  InvestmentAccountSubtype[\"Lira\"] = \"lira\";\n  InvestmentAccountSubtype[\"Lrif\"] = \"lrif\";\n  InvestmentAccountSubtype[\"Lrsp\"] = \"lrsp\";\n  InvestmentAccountSubtype[\"MutualFund\"] = \"mutual fund\";\n  InvestmentAccountSubtype[\"NonTaxableBrokerageAccount\"] = \"non-taxable brokerage account\";\n  InvestmentAccountSubtype[\"Other\"] = \"other\";\n  InvestmentAccountSubtype[\"OtherAnnuity\"] = \"other annuity\";\n  InvestmentAccountSubtype[\"OtherInsurance\"] = \"other insurance\";\n  InvestmentAccountSubtype[\"Person\"] = \"person\";\n  InvestmentAccountSubtype[\"Prif\"] = \"prif\";\n  InvestmentAccountSubtype[\"ProfitSharingPlan\"] = \"profit sharing plan\";\n  InvestmentAccountSubtype[\"Qshr\"] = \"qshr\";\n  InvestmentAccountSubtype[\"Rdsp\"] = \"rdsp\";\n  InvestmentAccountSubtype[\"Resp\"] = \"resp\";\n  InvestmentAccountSubtype[\"Retirement\"] = \"retirement\";\n  InvestmentAccountSubtype[\"Rlif\"] = \"rlif\";\n  InvestmentAccountSubtype[\"Roth\"] = \"roth\";\n  InvestmentAccountSubtype[\"Roth401k\"] = \"roth 401k\";\n  InvestmentAccountSubtype[\"Rrif\"] = \"rrif\";\n  InvestmentAccountSubtype[\"Rrsp\"] = \"rrsp\";\n  InvestmentAccountSubtype[\"Sarsep\"] = \"sarsep\";\n  InvestmentAccountSubtype[\"SepIra\"] = \"sep ira\";\n  InvestmentAccountSubtype[\"SimpleIra\"] = \"simple ira\";\n  InvestmentAccountSubtype[\"Sipp\"] = \"sipp\";\n  InvestmentAccountSubtype[\"StockPlan\"] = \"stock plan\";\n  InvestmentAccountSubtype[\"Tfsa\"] = \"tfsa\";\n  InvestmentAccountSubtype[\"Trust\"] = \"trust\";\n  InvestmentAccountSubtype[\"Ugma\"] = \"ugma\";\n  InvestmentAccountSubtype[\"Utma\"] = \"utma\";\n  InvestmentAccountSubtype[\"VariableAnnuity\"] = \"variable annuity\";\n  InvestmentAccountSubtype[\"All\"] = \"all\";\n})(InvestmentAccountSubtype = exports.InvestmentAccountSubtype || (exports.InvestmentAccountSubtype = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar InvestmentTransactionTypeEnum;\n(function (InvestmentTransactionTypeEnum) {\n  InvestmentTransactionTypeEnum[\"Buy\"] = \"buy\";\n  InvestmentTransactionTypeEnum[\"Sell\"] = \"sell\";\n  InvestmentTransactionTypeEnum[\"Cancel\"] = \"cancel\";\n  InvestmentTransactionTypeEnum[\"Cash\"] = \"cash\";\n  InvestmentTransactionTypeEnum[\"Fee\"] = \"fee\";\n  InvestmentTransactionTypeEnum[\"Transfer\"] = \"transfer\";\n})(InvestmentTransactionTypeEnum = exports.InvestmentTransactionTypeEnum || (exports.InvestmentTransactionTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar InvestmentTransactionSubtypeEnum;\n(function (InvestmentTransactionSubtypeEnum) {\n  InvestmentTransactionSubtypeEnum[\"AccountFee\"] = \"account fee\";\n  InvestmentTransactionSubtypeEnum[\"Adjustment\"] = \"adjustment\";\n  InvestmentTransactionSubtypeEnum[\"Assignment\"] = \"assignment\";\n  InvestmentTransactionSubtypeEnum[\"Buy\"] = \"buy\";\n  InvestmentTransactionSubtypeEnum[\"BuyToCover\"] = \"buy to cover\";\n  InvestmentTransactionSubtypeEnum[\"Contribution\"] = \"contribution\";\n  InvestmentTransactionSubtypeEnum[\"Deposit\"] = \"deposit\";\n  InvestmentTransactionSubtypeEnum[\"Distribution\"] = \"distribution\";\n  InvestmentTransactionSubtypeEnum[\"Dividend\"] = \"dividend\";\n  InvestmentTransactionSubtypeEnum[\"DividendReinvestment\"] = \"dividend reinvestment\";\n  InvestmentTransactionSubtypeEnum[\"Exercise\"] = \"exercise\";\n  InvestmentTransactionSubtypeEnum[\"Expire\"] = \"expire\";\n  InvestmentTransactionSubtypeEnum[\"FundFee\"] = \"fund fee\";\n  InvestmentTransactionSubtypeEnum[\"Interest\"] = \"interest\";\n  InvestmentTransactionSubtypeEnum[\"InterestReceivable\"] = \"interest receivable\";\n  InvestmentTransactionSubtypeEnum[\"InterestReinvestment\"] = \"interest reinvestment\";\n  InvestmentTransactionSubtypeEnum[\"LegalFee\"] = \"legal fee\";\n  InvestmentTransactionSubtypeEnum[\"LoanPayment\"] = \"loan payment\";\n  InvestmentTransactionSubtypeEnum[\"LongTermCapitalGain\"] = \"long-term capital gain\";\n  InvestmentTransactionSubtypeEnum[\"LongTermCapitalGainReinvestment\"] = \"long-term capital gain reinvestment\";\n  InvestmentTransactionSubtypeEnum[\"ManagementFee\"] = \"management fee\";\n  InvestmentTransactionSubtypeEnum[\"MarginExpense\"] = \"margin expense\";\n  InvestmentTransactionSubtypeEnum[\"Merger\"] = \"merger\";\n  InvestmentTransactionSubtypeEnum[\"MiscellaneousFee\"] = \"miscellaneous fee\";\n  InvestmentTransactionSubtypeEnum[\"NonQualifiedDividend\"] = \"non-qualified dividend\";\n  InvestmentTransactionSubtypeEnum[\"NonResidentTax\"] = \"non-resident tax\";\n  InvestmentTransactionSubtypeEnum[\"PendingCredit\"] = \"pending credit\";\n  InvestmentTransactionSubtypeEnum[\"PendingDebit\"] = \"pending debit\";\n  InvestmentTransactionSubtypeEnum[\"QualifiedDividend\"] = \"qualified dividend\";\n  InvestmentTransactionSubtypeEnum[\"Rebalance\"] = \"rebalance\";\n  InvestmentTransactionSubtypeEnum[\"ReturnOfPrincipal\"] = \"return of principal\";\n  InvestmentTransactionSubtypeEnum[\"Sell\"] = \"sell\";\n  InvestmentTransactionSubtypeEnum[\"SellShort\"] = \"sell short\";\n  InvestmentTransactionSubtypeEnum[\"ShortTermCapitalGain\"] = \"short-term capital gain\";\n  InvestmentTransactionSubtypeEnum[\"ShortTermCapitalGainReinvestment\"] = \"short-term capital gain reinvestment\";\n  InvestmentTransactionSubtypeEnum[\"SpinOff\"] = \"spin off\";\n  InvestmentTransactionSubtypeEnum[\"Split\"] = \"split\";\n  InvestmentTransactionSubtypeEnum[\"StockDistribution\"] = \"stock distribution\";\n  InvestmentTransactionSubtypeEnum[\"Tax\"] = \"tax\";\n  InvestmentTransactionSubtypeEnum[\"TaxWithheld\"] = \"tax withheld\";\n  InvestmentTransactionSubtypeEnum[\"Transfer\"] = \"transfer\";\n  InvestmentTransactionSubtypeEnum[\"TransferFee\"] = \"transfer fee\";\n  InvestmentTransactionSubtypeEnum[\"TrustFee\"] = \"trust fee\";\n  InvestmentTransactionSubtypeEnum[\"UnqualifiedGain\"] = \"unqualified gain\";\n  InvestmentTransactionSubtypeEnum[\"Withdrawal\"] = \"withdrawal\";\n})(InvestmentTransactionSubtypeEnum = exports.InvestmentTransactionSubtypeEnum || (exports.InvestmentTransactionSubtypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ItemUpdateTypeEnum;\n(function (ItemUpdateTypeEnum) {\n  ItemUpdateTypeEnum[\"Background\"] = \"background\";\n  ItemUpdateTypeEnum[\"UserPresentRequired\"] = \"user_present_required\";\n})(ItemUpdateTypeEnum = exports.ItemUpdateTypeEnum || (exports.ItemUpdateTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar LinkTokenCreateRequestAuthFlowTypeEnum;\n(function (LinkTokenCreateRequestAuthFlowTypeEnum) {\n  LinkTokenCreateRequestAuthFlowTypeEnum[\"FlexibleAuth\"] = \"FLEXIBLE_AUTH\";\n})(LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthFlowTypeEnum || (exports.LinkTokenCreateRequestAuthFlowTypeEnum = {}));\n/**\n * Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).\n * @export\n * @enum {string}\n */\nvar LoanAccountSubtype;\n(function (LoanAccountSubtype) {\n  LoanAccountSubtype[\"Auto\"] = \"auto\";\n  LoanAccountSubtype[\"Business\"] = \"business\";\n  LoanAccountSubtype[\"Commercial\"] = \"commercial\";\n  LoanAccountSubtype[\"Construction\"] = \"construction\";\n  LoanAccountSubtype[\"Consumer\"] = \"consumer\";\n  LoanAccountSubtype[\"HomeEquity\"] = \"home equity\";\n  LoanAccountSubtype[\"Loan\"] = \"loan\";\n  LoanAccountSubtype[\"Mortgage\"] = \"mortgage\";\n  LoanAccountSubtype[\"LineOfCredit\"] = \"line of credit\";\n  LoanAccountSubtype[\"Student\"] = \"student\";\n  LoanAccountSubtype[\"Other\"] = \"other\";\n  LoanAccountSubtype[\"All\"] = \"all\";\n})(LoanAccountSubtype = exports.LoanAccountSubtype || (exports.LoanAccountSubtype = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ModelErrorErrorTypeEnum;\n(function (ModelErrorErrorTypeEnum) {\n  ModelErrorErrorTypeEnum[\"InvalidRequest\"] = \"INVALID_REQUEST\";\n  ModelErrorErrorTypeEnum[\"InvalidResult\"] = \"INVALID_RESULT\";\n  ModelErrorErrorTypeEnum[\"InvalidInput\"] = \"INVALID_INPUT\";\n  ModelErrorErrorTypeEnum[\"InstitutionError\"] = \"INSTITUTION_ERROR\";\n  ModelErrorErrorTypeEnum[\"RateLimitExceeded\"] = \"RATE_LIMIT_EXCEEDED\";\n  ModelErrorErrorTypeEnum[\"ApiError\"] = \"API_ERROR\";\n  ModelErrorErrorTypeEnum[\"ItemError\"] = \"ITEM_ERROR\";\n  ModelErrorErrorTypeEnum[\"AssetReportError\"] = \"ASSET_REPORT_ERROR\";\n  ModelErrorErrorTypeEnum[\"RecaptchaError\"] = \"RECAPTCHA_ERROR\";\n  ModelErrorErrorTypeEnum[\"OauthError\"] = \"OAUTH_ERROR\";\n  ModelErrorErrorTypeEnum[\"PaymentError\"] = \"PAYMENT_ERROR\";\n  ModelErrorErrorTypeEnum[\"BankTransferError\"] = \"BANK_TRANSFER_ERROR\";\n  ModelErrorErrorTypeEnum[\"IncomeVerificationError\"] = \"INCOME_VERIFICATION_ERROR\";\n})(ModelErrorErrorTypeEnum = exports.ModelErrorErrorTypeEnum || (exports.ModelErrorErrorTypeEnum = {}));\n/**\n * `investment:` Investment account.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `payroll:` Payroll account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nvar OverrideAccountType;\n(function (OverrideAccountType) {\n  OverrideAccountType[\"Investment\"] = \"investment\";\n  OverrideAccountType[\"Credit\"] = \"credit\";\n  OverrideAccountType[\"Depository\"] = \"depository\";\n  OverrideAccountType[\"Loan\"] = \"loan\";\n  OverrideAccountType[\"Payroll\"] = \"payroll\";\n  OverrideAccountType[\"Other\"] = \"other\";\n})(OverrideAccountType = exports.OverrideAccountType || (exports.OverrideAccountType = {}));\n/**\n * The frequency of the pay period.\n * @export\n * @enum {string}\n */\nvar PayFrequencyValue;\n(function (PayFrequencyValue) {\n  PayFrequencyValue[\"Monthly\"] = \"monthly\";\n  PayFrequencyValue[\"Semimonthly\"] = \"semimonthly\";\n  PayFrequencyValue[\"Weekly\"] = \"weekly\";\n  PayFrequencyValue[\"Biweekly\"] = \"biweekly\";\n  PayFrequencyValue[\"Unknown\"] = \"unknown\";\n  PayFrequencyValue[\"Null\"] = \"null\";\n})(PayFrequencyValue = exports.PayFrequencyValue || (exports.PayFrequencyValue = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PayPeriodDetailsPayFrequencyEnum;\n(function (PayPeriodDetailsPayFrequencyEnum) {\n  PayPeriodDetailsPayFrequencyEnum[\"PayFrequencyUnknown\"] = \"PAY_FREQUENCY_UNKNOWN\";\n  PayPeriodDetailsPayFrequencyEnum[\"PayFrequencyWeekly\"] = \"PAY_FREQUENCY_WEEKLY\";\n  PayPeriodDetailsPayFrequencyEnum[\"PayFrequencyBiweekly\"] = \"PAY_FREQUENCY_BIWEEKLY\";\n  PayPeriodDetailsPayFrequencyEnum[\"PayFrequencySemimonthly\"] = \"PAY_FREQUENCY_SEMIMONTHLY\";\n  PayPeriodDetailsPayFrequencyEnum[\"PayFrequencyMonthly\"] = \"PAY_FREQUENCY_MONTHLY\";\n  PayPeriodDetailsPayFrequencyEnum[\"Null\"] = \"null\";\n})(PayPeriodDetailsPayFrequencyEnum = exports.PayPeriodDetailsPayFrequencyEnum || (exports.PayPeriodDetailsPayFrequencyEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PaymentAmountCurrencyEnum;\n(function (PaymentAmountCurrencyEnum) {\n  PaymentAmountCurrencyEnum[\"Gbp\"] = \"GBP\";\n  PaymentAmountCurrencyEnum[\"Eur\"] = \"EUR\";\n})(PaymentAmountCurrencyEnum = exports.PaymentAmountCurrencyEnum || (exports.PaymentAmountCurrencyEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PaymentInitiationPaymentCreateResponseStatusEnum;\n(function (PaymentInitiationPaymentCreateResponseStatusEnum) {\n  PaymentInitiationPaymentCreateResponseStatusEnum[\"PaymentStatusInputNeeded\"] = \"PAYMENT_STATUS_INPUT_NEEDED\";\n})(PaymentInitiationPaymentCreateResponseStatusEnum = exports.PaymentInitiationPaymentCreateResponseStatusEnum || (exports.PaymentInitiationPaymentCreateResponseStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PaymentInitiationPaymentReverseResponseStatusEnum;\n(function (PaymentInitiationPaymentReverseResponseStatusEnum) {\n  PaymentInitiationPaymentReverseResponseStatusEnum[\"Processing\"] = \"PROCESSING\";\n  PaymentInitiationPaymentReverseResponseStatusEnum[\"Executed\"] = \"EXECUTED\";\n  PaymentInitiationPaymentReverseResponseStatusEnum[\"Initiated\"] = \"INITIATED\";\n  PaymentInitiationPaymentReverseResponseStatusEnum[\"Failed\"] = \"FAILED\";\n})(PaymentInitiationPaymentReverseResponseStatusEnum = exports.PaymentInitiationPaymentReverseResponseStatusEnum || (exports.PaymentInitiationPaymentReverseResponseStatusEnum = {}));\n/**\n * The status of the payment.  `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.  `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.  `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.  `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.  `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.  `PAYMENT_STATUS_EXECUTED`: The payment has been successfully initiated and is considered complete.  `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.  `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.  Deprecated: These statuses will be removed in a future release.  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.  `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.  `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.\n * @export\n * @enum {string}\n */\nvar PaymentInitiationPaymentStatus;\n(function (PaymentInitiationPaymentStatus) {\n  PaymentInitiationPaymentStatus[\"InputNeeded\"] = \"PAYMENT_STATUS_INPUT_NEEDED\";\n  PaymentInitiationPaymentStatus[\"Processing\"] = \"PAYMENT_STATUS_PROCESSING\";\n  PaymentInitiationPaymentStatus[\"Initiated\"] = \"PAYMENT_STATUS_INITIATED\";\n  PaymentInitiationPaymentStatus[\"Completed\"] = \"PAYMENT_STATUS_COMPLETED\";\n  PaymentInitiationPaymentStatus[\"InsufficientFunds\"] = \"PAYMENT_STATUS_INSUFFICIENT_FUNDS\";\n  PaymentInitiationPaymentStatus[\"Failed\"] = \"PAYMENT_STATUS_FAILED\";\n  PaymentInitiationPaymentStatus[\"Blocked\"] = \"PAYMENT_STATUS_BLOCKED\";\n  PaymentInitiationPaymentStatus[\"Unknown\"] = \"PAYMENT_STATUS_UNKNOWN\";\n  PaymentInitiationPaymentStatus[\"Executed\"] = \"PAYMENT_STATUS_EXECUTED\";\n  PaymentInitiationPaymentStatus[\"Authorising\"] = \"PAYMENT_STATUS_AUTHORISING\";\n  PaymentInitiationPaymentStatus[\"Cancelled\"] = \"PAYMENT_STATUS_CANCELLED\";\n  PaymentInitiationPaymentStatus[\"Established\"] = \"PAYMENT_STATUS_ESTABLISHED\";\n  PaymentInitiationPaymentStatus[\"Rejected\"] = \"PAYMENT_STATUS_REJECTED\";\n})(PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentStatus || (exports.PaymentInitiationPaymentStatus = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PaymentInitiationRefundStatusEnum;\n(function (PaymentInitiationRefundStatusEnum) {\n  PaymentInitiationRefundStatusEnum[\"Processing\"] = \"PROCESSING\";\n  PaymentInitiationRefundStatusEnum[\"Initiated\"] = \"INITIATED\";\n  PaymentInitiationRefundStatusEnum[\"Executed\"] = \"EXECUTED\";\n  PaymentInitiationRefundStatusEnum[\"Failed\"] = \"FAILED\";\n})(PaymentInitiationRefundStatusEnum = exports.PaymentInitiationRefundStatusEnum || (exports.PaymentInitiationRefundStatusEnum = {}));\n/**\n * The frequency interval of the payment.\n * @export\n * @enum {string}\n */\nvar PaymentScheduleInterval;\n(function (PaymentScheduleInterval) {\n  PaymentScheduleInterval[\"Weekly\"] = \"WEEKLY\";\n  PaymentScheduleInterval[\"Monthly\"] = \"MONTHLY\";\n})(PaymentScheduleInterval = exports.PaymentScheduleInterval || (exports.PaymentScheduleInterval = {}));\n/**\n * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.  `FASTER_PAYMENTS`: Enables payments to move quickly between UK bank accounts. Default value in the UK.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.\n * @export\n * @enum {string}\n */\nvar PaymentScheme;\n(function (PaymentScheme) {\n  PaymentScheme[\"Null\"] = \"null\";\n  PaymentScheme[\"FasterPayments\"] = \"FASTER_PAYMENTS\";\n  PaymentScheme[\"SepaCreditTransfer\"] = \"SEPA_CREDIT_TRANSFER\";\n  PaymentScheme[\"SepaCreditTransferInstant\"] = \"SEPA_CREDIT_TRANSFER_INSTANT\";\n})(PaymentScheme = exports.PaymentScheme || (exports.PaymentScheme = {}));\n/**\n * The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.\n * @export\n * @enum {string}\n */\nvar PaystubPayFrequency;\n(function (PaystubPayFrequency) {\n  PaystubPayFrequency[\"Monthly\"] = \"MONTHLY\";\n  PaystubPayFrequency[\"BiWeekly\"] = \"BI-WEEKLY\";\n  PaystubPayFrequency[\"Weekly\"] = \"WEEKLY\";\n  PaystubPayFrequency[\"SemiMonthly\"] = \"SEMI-MONTHLY\";\n  PaystubPayFrequency[\"Null\"] = \"null\";\n})(PaystubPayFrequency = exports.PaystubPayFrequency || (exports.PaystubPayFrequency = {}));\n/**\n * Derived verification status.\n * @export\n * @enum {string}\n */\nvar PaystubVerificationStatus;\n(function (PaystubVerificationStatus) {\n  PaystubVerificationStatus[\"PaystubVerificationStatusUnknown\"] = \"PAYSTUB_VERIFICATION_STATUS_UNKNOWN\";\n  PaystubVerificationStatus[\"PaystubVerificationStatusVerified\"] = \"PAYSTUB_VERIFICATION_STATUS_VERIFIED\";\n  PaystubVerificationStatus[\"PaystubVerificationStatusFraudulent\"] = \"PAYSTUB_VERIFICATION_STATUS_FRAUDULENT\";\n  PaystubVerificationStatus[\"Null\"] = \"null\";\n})(PaystubVerificationStatus = exports.PaystubVerificationStatus || (exports.PaystubVerificationStatus = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PhoneNumberTypeEnum;\n(function (PhoneNumberTypeEnum) {\n  PhoneNumberTypeEnum[\"Home\"] = \"home\";\n  PhoneNumberTypeEnum[\"Work\"] = \"work\";\n  PhoneNumberTypeEnum[\"Office\"] = \"office\";\n  PhoneNumberTypeEnum[\"Mobile\"] = \"mobile\";\n  PhoneNumberTypeEnum[\"Mobile1\"] = \"mobile1\";\n  PhoneNumberTypeEnum[\"Other\"] = \"other\";\n})(PhoneNumberTypeEnum = exports.PhoneNumberTypeEnum || (exports.PhoneNumberTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar PlaidErrorErrorTypeEnum;\n(function (PlaidErrorErrorTypeEnum) {\n  PlaidErrorErrorTypeEnum[\"InvalidRequest\"] = \"INVALID_REQUEST\";\n  PlaidErrorErrorTypeEnum[\"InvalidResult\"] = \"INVALID_RESULT\";\n  PlaidErrorErrorTypeEnum[\"InvalidInput\"] = \"INVALID_INPUT\";\n  PlaidErrorErrorTypeEnum[\"InstitutionError\"] = \"INSTITUTION_ERROR\";\n  PlaidErrorErrorTypeEnum[\"RateLimitExceeded\"] = \"RATE_LIMIT_EXCEEDED\";\n  PlaidErrorErrorTypeEnum[\"ApiError\"] = \"API_ERROR\";\n  PlaidErrorErrorTypeEnum[\"ItemError\"] = \"ITEM_ERROR\";\n  PlaidErrorErrorTypeEnum[\"AssetReportError\"] = \"ASSET_REPORT_ERROR\";\n  PlaidErrorErrorTypeEnum[\"RecaptchaError\"] = \"RECAPTCHA_ERROR\";\n  PlaidErrorErrorTypeEnum[\"OauthError\"] = \"OAUTH_ERROR\";\n  PlaidErrorErrorTypeEnum[\"PaymentError\"] = \"PAYMENT_ERROR\";\n  PlaidErrorErrorTypeEnum[\"BankTransferError\"] = \"BANK_TRANSFER_ERROR\";\n  PlaidErrorErrorTypeEnum[\"IncomeVerificationError\"] = \"INCOME_VERIFICATION_ERROR\";\n})(PlaidErrorErrorTypeEnum = exports.PlaidErrorErrorTypeEnum || (exports.PlaidErrorErrorTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProcessorTokenCreateRequestProcessorEnum;\n(function (ProcessorTokenCreateRequestProcessorEnum) {\n  ProcessorTokenCreateRequestProcessorEnum[\"Achq\"] = \"achq\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Alpaca\"] = \"alpaca\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Astra\"] = \"astra\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Check\"] = \"check\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Checkbook\"] = \"checkbook\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Circle\"] = \"circle\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Drivewealth\"] = \"drivewealth\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Dwolla\"] = \"dwolla\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Galileo\"] = \"galileo\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Lithic\"] = \"lithic\";\n  ProcessorTokenCreateRequestProcessorEnum[\"ModernTreasury\"] = \"modern_treasury\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Moov\"] = \"moov\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Ocrolus\"] = \"ocrolus\";\n  ProcessorTokenCreateRequestProcessorEnum[\"PrimeTrust\"] = \"prime_trust\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Rize\"] = \"rize\";\n  ProcessorTokenCreateRequestProcessorEnum[\"SilaMoney\"] = \"sila_money\";\n  ProcessorTokenCreateRequestProcessorEnum[\"SvbApi\"] = \"svb_api\";\n  ProcessorTokenCreateRequestProcessorEnum[\"TreasuryPrime\"] = \"treasury_prime\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Unit\"] = \"unit\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Vesta\"] = \"vesta\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Vopay\"] = \"vopay\";\n  ProcessorTokenCreateRequestProcessorEnum[\"Wyre\"] = \"wyre\";\n})(ProcessorTokenCreateRequestProcessorEnum = exports.ProcessorTokenCreateRequestProcessorEnum || (exports.ProcessorTokenCreateRequestProcessorEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProductStatusStatusEnum;\n(function (ProductStatusStatusEnum) {\n  ProductStatusStatusEnum[\"Healthy\"] = \"HEALTHY\";\n  ProductStatusStatusEnum[\"Degraded\"] = \"DEGRADED\";\n  ProductStatusStatusEnum[\"Down\"] = \"DOWN\";\n})(ProductStatusStatusEnum = exports.ProductStatusStatusEnum || (exports.ProductStatusStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ProductStatusBreakdownRefreshIntervalEnum;\n(function (ProductStatusBreakdownRefreshIntervalEnum) {\n  ProductStatusBreakdownRefreshIntervalEnum[\"Normal\"] = \"NORMAL\";\n  ProductStatusBreakdownRefreshIntervalEnum[\"Delayed\"] = \"DELAYED\";\n  ProductStatusBreakdownRefreshIntervalEnum[\"Stopped\"] = \"STOPPED\";\n})(ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusBreakdownRefreshIntervalEnum || (exports.ProductStatusBreakdownRefreshIntervalEnum = {}));\n/**\n * A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.\n * @export\n * @enum {string}\n */\nvar Products;\n(function (Products) {\n  Products[\"Assets\"] = \"assets\";\n  Products[\"Auth\"] = \"auth\";\n  Products[\"Balance\"] = \"balance\";\n  Products[\"Identity\"] = \"identity\";\n  Products[\"Investments\"] = \"investments\";\n  Products[\"Liabilities\"] = \"liabilities\";\n  Products[\"PaymentInitiation\"] = \"payment_initiation\";\n  Products[\"Transactions\"] = \"transactions\";\n  Products[\"CreditDetails\"] = \"credit_details\";\n  Products[\"Income\"] = \"income\";\n  Products[\"IncomeVerification\"] = \"income_verification\";\n  Products[\"DepositSwitch\"] = \"deposit_switch\";\n  Products[\"StandingOrders\"] = \"standing_orders\";\n  Products[\"Transfer\"] = \"transfer\";\n  Products[\"Employment\"] = \"employment\";\n})(Products = exports.Products || (exports.Products = {}));\n/**\n * describes the frequency of the transaction stream.\n * @export\n * @enum {string}\n */\nvar RecurringTransactionFrequency;\n(function (RecurringTransactionFrequency) {\n  RecurringTransactionFrequency[\"Unknown\"] = \"UNKNOWN\";\n  RecurringTransactionFrequency[\"Weekly\"] = \"WEEKLY\";\n  RecurringTransactionFrequency[\"Biweekly\"] = \"BIWEEKLY\";\n  RecurringTransactionFrequency[\"SemiMonthly\"] = \"SEMI_MONTHLY\";\n  RecurringTransactionFrequency[\"Monthly\"] = \"MONTHLY\";\n})(RecurringTransactionFrequency = exports.RecurringTransactionFrequency || (exports.RecurringTransactionFrequency = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SandboxIncomeFireWebhookRequestVerificationStatusEnum;\n(function (SandboxIncomeFireWebhookRequestVerificationStatusEnum) {\n  SandboxIncomeFireWebhookRequestVerificationStatusEnum[\"ProcessingComplete\"] = \"VERIFICATION_STATUS_PROCESSING_COMPLETE\";\n  SandboxIncomeFireWebhookRequestVerificationStatusEnum[\"ProcessingFailed\"] = \"VERIFICATION_STATUS_PROCESSING_FAILED\";\n  SandboxIncomeFireWebhookRequestVerificationStatusEnum[\"PendingApproval\"] = \"VERIFICATION_STATUS_PENDING_APPROVAL\";\n})(SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum || (exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SandboxItemFireWebhookRequestWebhookCodeEnum;\n(function (SandboxItemFireWebhookRequestWebhookCodeEnum) {\n  SandboxItemFireWebhookRequestWebhookCodeEnum[\"DefaultUpdate\"] = \"DEFAULT_UPDATE\";\n  SandboxItemFireWebhookRequestWebhookCodeEnum[\"NewAccountsAvailable\"] = \"NEW_ACCOUNTS_AVAILABLE\";\n})(SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum || (exports.SandboxItemFireWebhookRequestWebhookCodeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar SandboxItemSetVerificationStatusRequestVerificationStatusEnum;\n(function (SandboxItemSetVerificationStatusRequestVerificationStatusEnum) {\n  SandboxItemSetVerificationStatusRequestVerificationStatusEnum[\"AutomaticallyVerified\"] = \"automatically_verified\";\n  SandboxItemSetVerificationStatusRequestVerificationStatusEnum[\"VerificationExpired\"] = \"verification_expired\";\n})(SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum || (exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = {}));\n/**\n * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.\n * @export\n * @enum {string}\n */\nvar ScopesContext;\n(function (ScopesContext) {\n  ScopesContext[\"Enrollment\"] = \"ENROLLMENT\";\n  ScopesContext[\"Portal\"] = \"PORTAL\";\n})(ScopesContext = exports.ScopesContext || (exports.ScopesContext = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar StudentLoanStatusTypeEnum;\n(function (StudentLoanStatusTypeEnum) {\n  StudentLoanStatusTypeEnum[\"Cancelled\"] = \"cancelled\";\n  StudentLoanStatusTypeEnum[\"ChargedOff\"] = \"charged off\";\n  StudentLoanStatusTypeEnum[\"Claim\"] = \"claim\";\n  StudentLoanStatusTypeEnum[\"Consolidated\"] = \"consolidated\";\n  StudentLoanStatusTypeEnum[\"Deferment\"] = \"deferment\";\n  StudentLoanStatusTypeEnum[\"Delinquent\"] = \"delinquent\";\n  StudentLoanStatusTypeEnum[\"Discharged\"] = \"discharged\";\n  StudentLoanStatusTypeEnum[\"Extension\"] = \"extension\";\n  StudentLoanStatusTypeEnum[\"Forbearance\"] = \"forbearance\";\n  StudentLoanStatusTypeEnum[\"InGrace\"] = \"in grace\";\n  StudentLoanStatusTypeEnum[\"InMilitary\"] = \"in military\";\n  StudentLoanStatusTypeEnum[\"InSchool\"] = \"in school\";\n  StudentLoanStatusTypeEnum[\"NotFullyDisbursed\"] = \"not fully disbursed\";\n  StudentLoanStatusTypeEnum[\"Other\"] = \"other\";\n  StudentLoanStatusTypeEnum[\"PaidInFull\"] = \"paid in full\";\n  StudentLoanStatusTypeEnum[\"Refunded\"] = \"refunded\";\n  StudentLoanStatusTypeEnum[\"Repayment\"] = \"repayment\";\n  StudentLoanStatusTypeEnum[\"Transferred\"] = \"transferred\";\n})(StudentLoanStatusTypeEnum = exports.StudentLoanStatusTypeEnum || (exports.StudentLoanStatusTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar StudentRepaymentPlanTypeEnum;\n(function (StudentRepaymentPlanTypeEnum) {\n  StudentRepaymentPlanTypeEnum[\"ExtendedGraduated\"] = \"extended graduated\";\n  StudentRepaymentPlanTypeEnum[\"ExtendedStandard\"] = \"extended standard\";\n  StudentRepaymentPlanTypeEnum[\"Graduated\"] = \"graduated\";\n  StudentRepaymentPlanTypeEnum[\"IncomeContingentRepayment\"] = \"income-contingent repayment\";\n  StudentRepaymentPlanTypeEnum[\"IncomeBasedRepayment\"] = \"income-based repayment\";\n  StudentRepaymentPlanTypeEnum[\"InterestOnly\"] = \"interest-only\";\n  StudentRepaymentPlanTypeEnum[\"Other\"] = \"other\";\n  StudentRepaymentPlanTypeEnum[\"PayAsYouEarn\"] = \"pay as you earn\";\n  StudentRepaymentPlanTypeEnum[\"RevisedPayAsYouEarn\"] = \"revised pay as you earn\";\n  StudentRepaymentPlanTypeEnum[\"Standard\"] = \"standard\";\n  StudentRepaymentPlanTypeEnum[\"Null\"] = \"null\";\n})(StudentRepaymentPlanTypeEnum = exports.StudentRepaymentPlanTypeEnum || (exports.StudentRepaymentPlanTypeEnum = {}));\n/**\n * Commonly used term to describe the line item.\n * @export\n * @enum {string}\n */\nvar TotalCanonicalDescription;\n(function (TotalCanonicalDescription) {\n  TotalCanonicalDescription[\"Bonus\"] = \"BONUS\";\n  TotalCanonicalDescription[\"Commission\"] = \"COMMISSION\";\n  TotalCanonicalDescription[\"Overtime\"] = \"OVERTIME\";\n  TotalCanonicalDescription[\"PaidTimeOff\"] = \"PAID TIME OFF\";\n  TotalCanonicalDescription[\"RegularPay\"] = \"REGULAR PAY\";\n  TotalCanonicalDescription[\"Vacation\"] = \"VACATION\";\n  TotalCanonicalDescription[\"EmployeeMedicare\"] = \"EMPLOYEE MEDICARE\";\n  TotalCanonicalDescription[\"Fica\"] = \"FICA\";\n  TotalCanonicalDescription[\"SocialSecurityEmployeeTax\"] = \"SOCIAL SECURITY EMPLOYEE TAX\";\n  TotalCanonicalDescription[\"Medical\"] = \"MEDICAL\";\n  TotalCanonicalDescription[\"Vision\"] = \"VISION\";\n  TotalCanonicalDescription[\"Dental\"] = \"DENTAL\";\n  TotalCanonicalDescription[\"NetPay\"] = \"NET PAY\";\n  TotalCanonicalDescription[\"Taxes\"] = \"TAXES\";\n  TotalCanonicalDescription[\"NotFound\"] = \"NOT_FOUND\";\n  TotalCanonicalDescription[\"Other\"] = \"OTHER\";\n  TotalCanonicalDescription[\"Null\"] = \"null\";\n})(TotalCanonicalDescription = exports.TotalCanonicalDescription || (exports.TotalCanonicalDescription = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransactionTransactionTypeEnum;\n(function (TransactionTransactionTypeEnum) {\n  TransactionTransactionTypeEnum[\"Digital\"] = \"digital\";\n  TransactionTransactionTypeEnum[\"Place\"] = \"place\";\n  TransactionTransactionTypeEnum[\"Special\"] = \"special\";\n  TransactionTransactionTypeEnum[\"Unresolved\"] = \"unresolved\";\n})(TransactionTransactionTypeEnum = exports.TransactionTransactionTypeEnum || (exports.TransactionTransactionTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransactionPaymentChannelEnum;\n(function (TransactionPaymentChannelEnum) {\n  TransactionPaymentChannelEnum[\"Online\"] = \"online\";\n  TransactionPaymentChannelEnum[\"InStore\"] = \"in store\";\n  TransactionPaymentChannelEnum[\"Other\"] = \"other\";\n})(TransactionPaymentChannelEnum = exports.TransactionPaymentChannelEnum || (exports.TransactionPaymentChannelEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransactionAllOfPaymentChannelEnum;\n(function (TransactionAllOfPaymentChannelEnum) {\n  TransactionAllOfPaymentChannelEnum[\"Online\"] = \"online\";\n  TransactionAllOfPaymentChannelEnum[\"InStore\"] = \"in store\";\n  TransactionAllOfPaymentChannelEnum[\"Other\"] = \"other\";\n})(TransactionAllOfPaymentChannelEnum = exports.TransactionAllOfPaymentChannelEnum || (exports.TransactionAllOfPaymentChannelEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransactionBaseTransactionTypeEnum;\n(function (TransactionBaseTransactionTypeEnum) {\n  TransactionBaseTransactionTypeEnum[\"Digital\"] = \"digital\";\n  TransactionBaseTransactionTypeEnum[\"Place\"] = \"place\";\n  TransactionBaseTransactionTypeEnum[\"Special\"] = \"special\";\n  TransactionBaseTransactionTypeEnum[\"Unresolved\"] = \"unresolved\";\n})(TransactionBaseTransactionTypeEnum = exports.TransactionBaseTransactionTypeEnum || (exports.TransactionBaseTransactionTypeEnum = {}));\n/**\n * An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts\n * @export\n * @enum {string}\n */\nvar TransactionCode;\n(function (TransactionCode) {\n  TransactionCode[\"Adjustment\"] = \"adjustment\";\n  TransactionCode[\"Atm\"] = \"atm\";\n  TransactionCode[\"BankCharge\"] = \"bank charge\";\n  TransactionCode[\"BillPayment\"] = \"bill payment\";\n  TransactionCode[\"Cash\"] = \"cash\";\n  TransactionCode[\"Cashback\"] = \"cashback\";\n  TransactionCode[\"Cheque\"] = \"cheque\";\n  TransactionCode[\"DirectDebit\"] = \"direct debit\";\n  TransactionCode[\"Interest\"] = \"interest\";\n  TransactionCode[\"Purchase\"] = \"purchase\";\n  TransactionCode[\"StandingOrder\"] = \"standing order\";\n  TransactionCode[\"Transfer\"] = \"transfer\";\n  TransactionCode[\"Null\"] = \"null\";\n})(TransactionCode = exports.TransactionCode || (exports.TransactionCode = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferAuthorizationDecisionEnum;\n(function (TransferAuthorizationDecisionEnum) {\n  TransferAuthorizationDecisionEnum[\"Approved\"] = \"approved\";\n  TransferAuthorizationDecisionEnum[\"Permitted\"] = \"permitted\";\n  TransferAuthorizationDecisionEnum[\"Declined\"] = \"declined\";\n})(TransferAuthorizationDecisionEnum = exports.TransferAuthorizationDecisionEnum || (exports.TransferAuthorizationDecisionEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferAuthorizationDecisionRationaleCodeEnum;\n(function (TransferAuthorizationDecisionRationaleCodeEnum) {\n  TransferAuthorizationDecisionRationaleCodeEnum[\"Nsf\"] = \"NSF\";\n  TransferAuthorizationDecisionRationaleCodeEnum[\"Risk\"] = \"RISK\";\n  TransferAuthorizationDecisionRationaleCodeEnum[\"ManuallyVerifiedItem\"] = \"MANUALLY_VERIFIED_ITEM\";\n  TransferAuthorizationDecisionRationaleCodeEnum[\"LoginRequired\"] = \"LOGIN_REQUIRED\";\n  TransferAuthorizationDecisionRationaleCodeEnum[\"Error\"] = \"ERROR\";\n})(TransferAuthorizationDecisionRationaleCodeEnum = exports.TransferAuthorizationDecisionRationaleCodeEnum || (exports.TransferAuthorizationDecisionRationaleCodeEnum = {}));\n/**\n * Indicates whether the transfer is guaranteed by Plaid (Guaranteed ACH customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.\n * @export\n * @enum {string}\n */\nvar TransferAuthorizationGuaranteeDecision;\n(function (TransferAuthorizationGuaranteeDecision) {\n  TransferAuthorizationGuaranteeDecision[\"Guaranteed\"] = \"GUARANTEED\";\n  TransferAuthorizationGuaranteeDecision[\"NotGuaranteed\"] = \"NOT_GUARANTEED\";\n  TransferAuthorizationGuaranteeDecision[\"Null\"] = \"null\";\n})(TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationGuaranteeDecision || (exports.TransferAuthorizationGuaranteeDecision = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferAuthorizationGuaranteeDecisionRationaleCodeEnum;\n(function (TransferAuthorizationGuaranteeDecisionRationaleCodeEnum) {\n  TransferAuthorizationGuaranteeDecisionRationaleCodeEnum[\"ReturnBank\"] = \"RETURN_BANK\";\n  TransferAuthorizationGuaranteeDecisionRationaleCodeEnum[\"ReturnCustomer\"] = \"RETURN_CUSTOMER\";\n  TransferAuthorizationGuaranteeDecisionRationaleCodeEnum[\"GuaranteeLimitReached\"] = \"GUARANTEE_LIMIT_REACHED\";\n  TransferAuthorizationGuaranteeDecisionRationaleCodeEnum[\"RiskEstimateUnavailable\"] = \"RISK_ESTIMATE_UNAVAILABLE\";\n})(TransferAuthorizationGuaranteeDecisionRationaleCodeEnum = exports.TransferAuthorizationGuaranteeDecisionRationaleCodeEnum || (exports.TransferAuthorizationGuaranteeDecisionRationaleCodeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferEventListRequestTransferTypeEnum;\n(function (TransferEventListRequestTransferTypeEnum) {\n  TransferEventListRequestTransferTypeEnum[\"Debit\"] = \"debit\";\n  TransferEventListRequestTransferTypeEnum[\"Credit\"] = \"credit\";\n  TransferEventListRequestTransferTypeEnum[\"Null\"] = \"null\";\n})(TransferEventListRequestTransferTypeEnum = exports.TransferEventListRequestTransferTypeEnum || (exports.TransferEventListRequestTransferTypeEnum = {}));\n/**\n * The type of event that this transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.  `swept`: The transfer was swept to / from the sweep account.  `reverse_swept`: Due to the transfer reversing, funds were pulled from or pushed back to the sweep account.\n * @export\n * @enum {string}\n */\nvar TransferEventType;\n(function (TransferEventType) {\n  TransferEventType[\"Pending\"] = \"pending\";\n  TransferEventType[\"Cancelled\"] = \"cancelled\";\n  TransferEventType[\"Failed\"] = \"failed\";\n  TransferEventType[\"Posted\"] = \"posted\";\n  TransferEventType[\"Reversed\"] = \"reversed\";\n  TransferEventType[\"Swept\"] = \"swept\";\n  TransferEventType[\"ReverseSwept\"] = \"reverse_swept\";\n})(TransferEventType = exports.TransferEventType || (exports.TransferEventType = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferIntentCreateStatusEnum;\n(function (TransferIntentCreateStatusEnum) {\n  TransferIntentCreateStatusEnum[\"Pending\"] = \"PENDING\";\n  TransferIntentCreateStatusEnum[\"Succeeded\"] = \"SUCCEEDED\";\n  TransferIntentCreateStatusEnum[\"Failed\"] = \"FAILED\";\n})(TransferIntentCreateStatusEnum = exports.TransferIntentCreateStatusEnum || (exports.TransferIntentCreateStatusEnum = {}));\n/**\n * The direction of the flow of transfer funds.  - `PAYMENT` â€“Â Transfers funds from an end user\\'s account to your business account.  - `DISBURSEMENT` â€“ Transfers funds from your business account to an end user\\'s account.\n * @export\n * @enum {string}\n */\nvar TransferIntentCreateMode;\n(function (TransferIntentCreateMode) {\n  TransferIntentCreateMode[\"Payment\"] = \"PAYMENT\";\n  TransferIntentCreateMode[\"Disbursement\"] = \"DISBURSEMENT\";\n})(TransferIntentCreateMode = exports.TransferIntentCreateMode || (exports.TransferIntentCreateMode = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferIntentGetStatusEnum;\n(function (TransferIntentGetStatusEnum) {\n  TransferIntentGetStatusEnum[\"Pending\"] = \"PENDING\";\n  TransferIntentGetStatusEnum[\"Succeeded\"] = \"SUCCEEDED\";\n  TransferIntentGetStatusEnum[\"Failed\"] = \"FAILED\";\n})(TransferIntentGetStatusEnum = exports.TransferIntentGetStatusEnum || (exports.TransferIntentGetStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar TransferIntentGetAuthorizationDecisionEnum;\n(function (TransferIntentGetAuthorizationDecisionEnum) {\n  TransferIntentGetAuthorizationDecisionEnum[\"Approved\"] = \"APPROVED\";\n  TransferIntentGetAuthorizationDecisionEnum[\"Permitted\"] = \"PERMITTED\";\n  TransferIntentGetAuthorizationDecisionEnum[\"Declined\"] = \"DECLINED\";\n})(TransferIntentGetAuthorizationDecisionEnum = exports.TransferIntentGetAuthorizationDecisionEnum || (exports.TransferIntentGetAuthorizationDecisionEnum = {}));\n/**\n * The network or rails used for the transfer. Valid options are `ach` or `same-day-ach`.\n * @export\n * @enum {string}\n */\nvar TransferNetwork;\n(function (TransferNetwork) {\n  TransferNetwork[\"Ach\"] = \"ach\";\n  TransferNetwork[\"SameDayAch\"] = \"same-day-ach\";\n})(TransferNetwork = exports.TransferNetwork || (exports.TransferNetwork = {}));\n/**\n * The status of the transfer.\n * @export\n * @enum {string}\n */\nvar TransferStatus;\n(function (TransferStatus) {\n  TransferStatus[\"Pending\"] = \"pending\";\n  TransferStatus[\"Posted\"] = \"posted\";\n  TransferStatus[\"Cancelled\"] = \"cancelled\";\n  TransferStatus[\"Failed\"] = \"failed\";\n  TransferStatus[\"Reversed\"] = \"reversed\";\n})(TransferStatus = exports.TransferStatus || (exports.TransferStatus = {}));\n/**\n * The status of the sweep for the transfer. `unswept`: The transfer hasn\\'t been swept yet. `swept`: The transfer was swept to the sweep account. `reverse_swept`: The transfer was reversed, funds were pulled back or pushed back to the sweep account. `null`: The transfer will never be swept (e.g. if the transfer is cancelled or reversed before being swept)\n * @export\n * @enum {string}\n */\nvar TransferSweepStatus;\n(function (TransferSweepStatus) {\n  TransferSweepStatus[\"Null\"] = \"null\";\n  TransferSweepStatus[\"Unswept\"] = \"unswept\";\n  TransferSweepStatus[\"Swept\"] = \"swept\";\n  TransferSweepStatus[\"ReverseSwept\"] = \"reverse_swept\";\n})(TransferSweepStatus = exports.TransferSweepStatus || (exports.TransferSweepStatus = {}));\n/**\n * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.\n * @export\n * @enum {string}\n */\nvar TransferType;\n(function (TransferType) {\n  TransferType[\"Debit\"] = \"debit\";\n  TransferType[\"Credit\"] = \"credit\";\n})(TransferType = exports.TransferType || (exports.TransferType = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar VerificationAttributeTypeEnum;\n(function (VerificationAttributeTypeEnum) {\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeUnknown\"] = \"VERIFICATION_ATTRIBUTE_TYPE_UNKNOWN\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeAmountMatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_AMOUNT_MATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeDateMatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_DATE_MATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeDateMismatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_DATE_MISMATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeFileTampering\"] = \"VERIFICATION_ATTRIBUTE_TYPE_FILE_TAMPERING\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeDescriptionMatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeDescriptionMismatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MISMATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeFirstNameMatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeFirstNameMismatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MISMATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeLastNameMatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MATCH\";\n  VerificationAttributeTypeEnum[\"VerificationAttributeTypeLastNameMismatch\"] = \"VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MISMATCH\";\n  VerificationAttributeTypeEnum[\"Null\"] = \"null\";\n})(VerificationAttributeTypeEnum = exports.VerificationAttributeTypeEnum || (exports.VerificationAttributeTypeEnum = {}));\n/**\n * The verification refresh status. One of the following:  `\\\"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED\\\"` User presence is required to refresh an income verification. `\\\"VERIFICATION_REFRESH_SUCCESSFUL\\\"` The income verification refresh was successful. `\\\"VERIFICATION_REFRESH_NOT_FOUND\\\"` No new data was found after the income verification refresh.\n * @export\n * @enum {string}\n */\nvar VerificationRefreshStatus;\n(function (VerificationRefreshStatus) {\n  VerificationRefreshStatus[\"StatusUserPresenceRequired\"] = \"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED\";\n  VerificationRefreshStatus[\"Successful\"] = \"VERIFICATION_REFRESH_SUCCESSFUL\";\n  VerificationRefreshStatus[\"NotFound\"] = \"VERIFICATION_REFRESH_NOT_FOUND\";\n})(VerificationRefreshStatus = exports.VerificationRefreshStatus || (exports.VerificationRefreshStatus = {}));\n/**\n * The verification status. One of the following:  `\\\"VERIFIED\\\"`: The information was successfully verified.  `\\\"UNVERIFIED\\\"`: The verification has not yet been performed.  `\\\"NEEDS_INFO\\\"`: The verification was attempted but could not be completed due to missing information.  \\\"`UNABLE_TO_VERIFY`\\\": The verification was performed and the information could not be verified.  `\\\"UNKNOWN\\\"`: The verification status is unknown.\n * @export\n * @enum {string}\n */\nvar VerificationStatus;\n(function (VerificationStatus) {\n  VerificationStatus[\"Verified\"] = \"VERIFIED\";\n  VerificationStatus[\"Unverified\"] = \"UNVERIFIED\";\n  VerificationStatus[\"NeedsInfo\"] = \"NEEDS_INFO\";\n  VerificationStatus[\"UnableToVerify\"] = \"UNABLE_TO_VERIFY\";\n  VerificationStatus[\"Unknown\"] = \"UNKNOWN\";\n})(VerificationStatus = exports.VerificationStatus || (exports.VerificationStatus = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar WalletTransactionTypeEnum;\n(function (WalletTransactionTypeEnum) {\n  WalletTransactionTypeEnum[\"Payout\"] = \"PAYOUT\";\n})(WalletTransactionTypeEnum = exports.WalletTransactionTypeEnum || (exports.WalletTransactionTypeEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar WalletTransactionAmountIsoCurrencyCodeEnum;\n(function (WalletTransactionAmountIsoCurrencyCodeEnum) {\n  WalletTransactionAmountIsoCurrencyCodeEnum[\"Gbp\"] = \"GBP\";\n})(WalletTransactionAmountIsoCurrencyCodeEnum = exports.WalletTransactionAmountIsoCurrencyCodeEnum || (exports.WalletTransactionAmountIsoCurrencyCodeEnum = {}));\n/**\n * The status of the transaction.  `INITIATED`: This is the initial state of all transactions. It indicates that the transaction has been initiated and is currently being processed.  `EXECUTED`: The transaction has been successfully executed.  `FAILED`: The transaction failed to process successfully. This is a terminal status.  `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.\n * @export\n * @enum {string}\n */\nvar WalletTransactionStatus;\n(function (WalletTransactionStatus) {\n  WalletTransactionStatus[\"Initiated\"] = \"INITIATED\";\n  WalletTransactionStatus[\"Executed\"] = \"EXECUTED\";\n  WalletTransactionStatus[\"Blocked\"] = \"BLOCKED\";\n  WalletTransactionStatus[\"Failed\"] = \"FAILED\";\n})(WalletTransactionStatus = exports.WalletTransactionStatus || (exports.WalletTransactionStatus = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar WarningWarningCodeEnum;\n(function (WarningWarningCodeEnum) {\n  WarningWarningCodeEnum[\"OwnersUnavailable\"] = \"OWNERS_UNAVAILABLE\";\n})(WarningWarningCodeEnum = exports.WarningWarningCodeEnum || (exports.WarningWarningCodeEnum = {}));\n/**\n * PlaidApi - axios parameter creator\n * @export\n */\nconst PlaidApiAxiosParamCreator = function (configuration) {\n  var _this = this;\n  return {\n    /**\n     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n     * @summary Retrieve real-time balance data\n     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsBalanceGet: function (accountsBalanceGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'accountsBalanceGetRequest' is not null or undefined\n        common_1.assertParamExists('accountsBalanceGet', 'accountsBalanceGetRequest', accountsBalanceGetRequest);\n        const localVarPath = `/accounts/balance/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n     * @summary Retrieve accounts\n     * @param {AccountsGetRequest} accountsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsGet: function (accountsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'accountsGetRequest' is not null or undefined\n        common_1.assertParamExists('accountsGet', 'accountsGetRequest', accountsGetRequest);\n        const localVarPath = `/accounts/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n     * @summary Retrieve information about a Plaid application\n     * @param {ApplicationGetRequest} applicationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    applicationGet: function (applicationGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'applicationGetRequest' is not null or undefined\n        common_1.assertParamExists('applicationGet', 'applicationGetRequest', applicationGetRequest);\n        const localVarPath = `/application/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n     * @summary Create Asset Report Audit Copy\n     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyCreate: function (assetReportAuditCopyCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportAuditCopyCreateRequest' is not null or undefined\n        common_1.assertParamExists('assetReportAuditCopyCreate', 'assetReportAuditCopyCreateRequest', assetReportAuditCopyCreateRequest);\n        const localVarPath = `/asset_report/audit_copy/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n     * @summary Retrieve an Asset Report Audit Copy\n     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyGet: function (assetReportAuditCopyGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportAuditCopyGetRequest' is not null or undefined\n        common_1.assertParamExists('assetReportAuditCopyGet', 'assetReportAuditCopyGetRequest', assetReportAuditCopyGetRequest);\n        const localVarPath = `/asset_report/audit_copy/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n     * @summary Remove Asset Report Audit Copy\n     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyRemove: function (assetReportAuditCopyRemoveRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportAuditCopyRemoveRequest' is not null or undefined\n        common_1.assertParamExists('assetReportAuditCopyRemove', 'assetReportAuditCopyRemoveRequest', assetReportAuditCopyRemoveRequest);\n        const localVarPath = `/asset_report/audit_copy/remove`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n     * @summary Create an Asset Report\n     * @param {AssetReportCreateRequest} assetReportCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportCreate: function (assetReportCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportCreateRequest' is not null or undefined\n        common_1.assertParamExists('assetReportCreate', 'assetReportCreateRequest', assetReportCreateRequest);\n        const localVarPath = `/asset_report/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n     * @summary Filter Asset Report\n     * @param {AssetReportFilterRequest} assetReportFilterRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportFilter: function (assetReportFilterRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportFilterRequest' is not null or undefined\n        common_1.assertParamExists('assetReportFilter', 'assetReportFilterRequest', assetReportFilterRequest);\n        const localVarPath = `/asset_report/filter`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n     * @summary Retrieve an Asset Report\n     * @param {AssetReportGetRequest} assetReportGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportGet: function (assetReportGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportGetRequest' is not null or undefined\n        common_1.assertParamExists('assetReportGet', 'assetReportGetRequest', assetReportGetRequest);\n        const localVarPath = `/asset_report/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n     * @summary Retrieve a PDF Asset Report\n     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportPdfGet: function (assetReportPDFGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportPDFGetRequest' is not null or undefined\n        common_1.assertParamExists('assetReportPdfGet', 'assetReportPDFGetRequest', assetReportPDFGetRequest);\n        const localVarPath = `/asset_report/pdf/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n     * @summary Refresh an Asset Report\n     * @param {AssetReportRefreshRequest} assetReportRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRefresh: function (assetReportRefreshRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportRefreshRequest' is not null or undefined\n        common_1.assertParamExists('assetReportRefresh', 'assetReportRefreshRequest', assetReportRefreshRequest);\n        const localVarPath = `/asset_report/refresh`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n     * @summary Delete an Asset Report\n     * @param {AssetReportRemoveRequest} assetReportRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRemove: function (assetReportRemoveRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'assetReportRemoveRequest' is not null or undefined\n        common_1.assertParamExists('assetReportRemove', 'assetReportRemoveRequest', assetReportRemoveRequest);\n        const localVarPath = `/asset_report/remove`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n     * @summary Retrieve auth data\n     * @param {AuthGetRequest} authGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authGet: function (authGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'authGetRequest' is not null or undefined\n        common_1.assertParamExists('authGet', 'authGetRequest', authGetRequest);\n        const localVarPath = `/auth/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n     * @summary Get balance of your Bank Transfer account\n     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferBalanceGet: function (bankTransferBalanceGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferBalanceGetRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferBalanceGet', 'bankTransferBalanceGetRequest', bankTransferBalanceGetRequest);\n        const localVarPath = `/bank_transfer/balance/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n     * @summary Cancel a bank transfer\n     * @param {BankTransferCancelRequest} bankTransferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCancel: function (bankTransferCancelRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferCancelRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferCancel', 'bankTransferCancelRequest', bankTransferCancelRequest);\n        const localVarPath = `/bank_transfer/cancel`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n     * @summary Create a bank transfer\n     * @param {BankTransferCreateRequest} bankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCreate: function (bankTransferCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferCreateRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferCreate', 'bankTransferCreateRequest', bankTransferCreateRequest);\n        const localVarPath = `/bank_transfer/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n     * @summary List bank transfer events\n     * @param {BankTransferEventListRequest} bankTransferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventList: function (bankTransferEventListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferEventListRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferEventList', 'bankTransferEventListRequest', bankTransferEventListRequest);\n        const localVarPath = `/bank_transfer/event/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n     * @summary Sync bank transfer events\n     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventSync: function (bankTransferEventSyncRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferEventSyncRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferEventSync', 'bankTransferEventSyncRequest', bankTransferEventSyncRequest);\n        const localVarPath = `/bank_transfer/event/sync`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n     * @summary Retrieve a bank transfer\n     * @param {BankTransferGetRequest} bankTransferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferGet: function (bankTransferGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferGetRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferGet', 'bankTransferGetRequest', bankTransferGetRequest);\n        const localVarPath = `/bank_transfer/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.\n     * @summary List bank transfers\n     * @param {BankTransferListRequest} bankTransferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferList: function (bankTransferListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferListRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferList', 'bankTransferListRequest', bankTransferListRequest);\n        const localVarPath = `/bank_transfer/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n     * @summary Migrate account into Bank Transfers\n     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferMigrateAccount: function (bankTransferMigrateAccountRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferMigrateAccountRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferMigrateAccount', 'bankTransferMigrateAccountRequest', bankTransferMigrateAccountRequest);\n        const localVarPath = `/bank_transfer/migrate_account`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepGet: function (bankTransferSweepGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferSweepGetRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferSweepGet', 'bankTransferSweepGetRequest', bankTransferSweepGetRequest);\n        const localVarPath = `/bank_transfer/sweep/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepList: function (bankTransferSweepListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'bankTransferSweepListRequest' is not null or undefined\n        common_1.assertParamExists('bankTransferSweepList', 'bankTransferSweepListRequest', bankTransferSweepListRequest);\n        const localVarPath = `/bank_transfer/sweep/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n     * @summary Get Categories\n     * @param {object} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    categoriesGet: function (body) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'body' is not null or undefined\n        common_1.assertParamExists('categoriesGet', 'body', body);\n        const localVarPath = `/categories/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n     * @summary Create payment token\n     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createPaymentToken: function (paymentInitiationPaymentTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationPaymentTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('createPaymentToken', 'paymentInitiationPaymentTokenCreateRequest', paymentInitiationPaymentTokenCreateRequest);\n        const localVarPath = `/payment_initiation/payment/token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch without using Plaid Exchange\n     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchAltCreate: function (depositSwitchAltCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'depositSwitchAltCreateRequest' is not null or undefined\n        common_1.assertParamExists('depositSwitchAltCreate', 'depositSwitchAltCreateRequest', depositSwitchAltCreateRequest);\n        const localVarPath = `/deposit_switch/alt/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch\n     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchCreate: function (depositSwitchCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'depositSwitchCreateRequest' is not null or undefined\n        common_1.assertParamExists('depositSwitchCreate', 'depositSwitchCreateRequest', depositSwitchCreateRequest);\n        const localVarPath = `/deposit_switch/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n     * @summary Retrieve a deposit switch\n     * @param {DepositSwitchGetRequest} depositSwitchGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchGet: function (depositSwitchGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'depositSwitchGetRequest' is not null or undefined\n        common_1.assertParamExists('depositSwitchGet', 'depositSwitchGetRequest', depositSwitchGetRequest);\n        const localVarPath = `/deposit_switch/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.\n     * @summary Create a deposit switch token\n     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchTokenCreate: function (depositSwitchTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'depositSwitchTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('depositSwitchTokenCreate', 'depositSwitchTokenCreateRequest', depositSwitchTokenCreateRequest);\n        const localVarPath = `/deposit_switch/token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n     * @summary Search employer database\n     * @param {EmployersSearchRequest} employersSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employersSearch: function (employersSearchRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'employersSearchRequest' is not null or undefined\n        common_1.assertParamExists('employersSearch', 'employersSearchRequest', employersSearchRequest);\n        const localVarPath = `/employers/search`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n     * @summary Retrieve a summary of an individual\\'s employment information\n     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employmentVerificationGet: function (employmentVerificationGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'employmentVerificationGetRequest' is not null or undefined\n        common_1.assertParamExists('employmentVerificationGet', 'employmentVerificationGetRequest', employmentVerificationGetRequest);\n        const localVarPath = `/employment/verification/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n     * @summary Retrieve identity data\n     * @param {IdentityGetRequest} identityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    identityGet: function (identityGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'identityGetRequest' is not null or undefined\n        common_1.assertParamExists('identityGet', 'identityGetRequest', identityGetRequest);\n        const localVarPath = `/identity/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.\n     * @summary (Deprecated) Create an income verification instance\n     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationCreate: function (incomeVerificationCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationCreateRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationCreate', 'incomeVerificationCreateRequest', incomeVerificationCreateRequest);\n        const localVarPath = `/income/verification/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n     * @summary Download the original documents used for income verification\n     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationDocumentsDownload: function (incomeVerificationDocumentsDownloadRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationDocumentsDownloadRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationDocumentsDownload', 'incomeVerificationDocumentsDownloadRequest', incomeVerificationDocumentsDownloadRequest);\n        const localVarPath = `/income/verification/documents/download`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * /income/verification/paystub/get returns information from a single paystub used for income verification\n     * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n     * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubGet: function (incomeVerificationPaystubGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationPaystubGetRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationPaystubGet', 'incomeVerificationPaystubGetRequest', incomeVerificationPaystubGetRequest);\n        const localVarPath = `/income/verification/paystub/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPaystubGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the paystubs used for income verification\n     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubsGet: function (incomeVerificationPaystubsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationPaystubsGetRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationPaystubsGet', 'incomeVerificationPaystubsGetRequest', incomeVerificationPaystubsGetRequest);\n        const localVarPath = `/income/verification/paystubs/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n     * @summary Check digital income verification eligibility and optimize conversion\n     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPrecheck: function (incomeVerificationPrecheckRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationPrecheckRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationPrecheck', 'incomeVerificationPrecheckRequest', incomeVerificationPrecheckRequest);\n        const localVarPath = `/income/verification/precheck`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/refresh` refreshes a given income verification.\n     * @summary Refresh an income verification\n     * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationRefresh: function (incomeVerificationRefreshRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationRefreshRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationRefresh', 'incomeVerificationRefreshRequest', incomeVerificationRefreshRequest);\n        const localVarPath = `/income/verification/refresh`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationRefreshRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary (Deprecated) Retrieve a summary of information derived from income verification\n     * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationSummaryGet: function (incomeVerificationSummaryGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'incomeVerificationSummaryGetRequest' is not null or undefined\n        common_1.assertParamExists('incomeVerificationSummaryGet', 'incomeVerificationSummaryGetRequest', incomeVerificationSummaryGetRequest);\n        const localVarPath = `/income/verification/summary/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationSummaryGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the tax documents used for income verification\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationTaxformsGet: function (requestBody) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'requestBody' is not null or undefined\n        common_1.assertParamExists('incomeVerificationTaxformsGet', 'requestBody', requestBody);\n        const localVarPath = `/income/verification/taxforms/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n     * @summary Get details of all supported institutions\n     * @param {InstitutionsGetRequest} institutionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGet: function (institutionsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'institutionsGetRequest' is not null or undefined\n        common_1.assertParamExists('institutionsGet', 'institutionsGetRequest', institutionsGetRequest);\n        const localVarPath = `/institutions/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Get details of an institution\n     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGetById: function (institutionsGetByIdRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'institutionsGetByIdRequest' is not null or undefined\n        common_1.assertParamExists('institutionsGetById', 'institutionsGetByIdRequest', institutionsGetByIdRequest);\n        const localVarPath = `/institutions/get_by_id`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Search institutions\n     * @param {InstitutionsSearchRequest} institutionsSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsSearch: function (institutionsSearchRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'institutionsSearchRequest' is not null or undefined\n        common_1.assertParamExists('institutionsSearch', 'institutionsSearchRequest', institutionsSearchRequest);\n        const localVarPath = `/institutions/search`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n     * @summary Get Investment holdings\n     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsHoldingsGet: function (investmentsHoldingsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'investmentsHoldingsGetRequest' is not null or undefined\n        common_1.assertParamExists('investmentsHoldingsGet', 'investmentsHoldingsGetRequest', investmentsHoldingsGetRequest);\n        const localVarPath = `/investments/holdings/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n     * @summary Get investment transactions\n     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsTransactionsGet: function (investmentsTransactionsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'investmentsTransactionsGetRequest' is not null or undefined\n        common_1.assertParamExists('investmentsTransactionsGet', 'investmentsTransactionsGetRequest', investmentsTransactionsGetRequest);\n        const localVarPath = `/investments/transactions/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.\n     * @summary Invalidate access_token\n     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemAccessTokenInvalidate: function (itemAccessTokenInvalidateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemAccessTokenInvalidateRequest' is not null or undefined\n        common_1.assertParamExists('itemAccessTokenInvalidate', 'itemAccessTokenInvalidateRequest', itemAccessTokenInvalidateRequest);\n        const localVarPath = `/item/access_token/invalidate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * List a userâ€™s connected applications\n     * @summary List a userâ€™s connected applications\n     * @param {ItemApplicationListRequest} itemApplicationListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationList: function (itemApplicationListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemApplicationListRequest' is not null or undefined\n        common_1.assertParamExists('itemApplicationList', 'itemApplicationListRequest', itemApplicationListRequest);\n        const localVarPath = `/item/application/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Enable consumers to update product access on selected accounts for an application.\n     * @summary Update the scopes of access for a particular application\n     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationScopesUpdate: function (itemApplicationScopesUpdateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemApplicationScopesUpdateRequest' is not null or undefined\n        common_1.assertParamExists('itemApplicationScopesUpdate', 'itemApplicationScopesUpdateRequest', itemApplicationScopesUpdateRequest);\n        const localVarPath = `/item/application/scopes/update`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n     * @summary Create public token\n     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemCreatePublicToken: function (itemPublicTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemPublicTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('itemCreatePublicToken', 'itemPublicTokenCreateRequest', itemPublicTokenCreateRequest);\n        const localVarPath = `/item/public_token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Returns information about the status of an Item.\n     * @summary Retrieve an Item\n     * @param {ItemGetRequest} itemGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemGet: function (itemGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemGetRequest' is not null or undefined\n        common_1.assertParamExists('itemGet', 'itemGetRequest', itemGetRequest);\n        const localVarPath = `/item/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n     * @summary Import Item\n     * @param {ItemImportRequest} itemImportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemImport: function (itemImportRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemImportRequest' is not null or undefined\n        common_1.assertParamExists('itemImport', 'itemImportRequest', itemImportRequest);\n        const localVarPath = `/item/import`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n     * @summary Exchange public token for an access token\n     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemPublicTokenExchange: function (itemPublicTokenExchangeRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined\n        common_1.assertParamExists('itemPublicTokenExchange', 'itemPublicTokenExchangeRequest', itemPublicTokenExchangeRequest);\n        const localVarPath = `/item/public_token/exchange`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n     * @summary Remove an Item\n     * @param {ItemRemoveRequest} itemRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemRemove: function (itemRemoveRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemRemoveRequest' is not null or undefined\n        common_1.assertParamExists('itemRemove', 'itemRemoveRequest', itemRemoveRequest);\n        const localVarPath = `/item/remove`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n     * @summary Update Webhook URL\n     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemWebhookUpdate: function (itemWebhookUpdateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'itemWebhookUpdateRequest' is not null or undefined\n        common_1.assertParamExists('itemWebhookUpdate', 'itemWebhookUpdateRequest', itemWebhookUpdateRequest);\n        const localVarPath = `/item/webhook/update`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n     * @summary Retrieve Liabilities data\n     * @param {LiabilitiesGetRequest} liabilitiesGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    liabilitiesGet: function (liabilitiesGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'liabilitiesGetRequest' is not null or undefined\n        common_1.assertParamExists('liabilitiesGet', 'liabilitiesGetRequest', liabilitiesGetRequest);\n        const localVarPath = `/liabilities/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n     * @summary Create Link Token\n     * @param {LinkTokenCreateRequest} linkTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenCreate: function (linkTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'linkTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('linkTokenCreate', 'linkTokenCreateRequest', linkTokenCreateRequest);\n        const localVarPath = `/link/token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n     * @summary Get Link Token\n     * @param {LinkTokenGetRequest} linkTokenGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenGet: function (linkTokenGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'linkTokenGetRequest' is not null or undefined\n        common_1.assertParamExists('linkTokenGet', 'linkTokenGetRequest', linkTokenGetRequest);\n        const localVarPath = `/link/token/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n     * @summary Create a payment\n     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentCreate: function (paymentInitiationPaymentCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationPaymentCreateRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationPaymentCreate', 'paymentInitiationPaymentCreateRequest', paymentInitiationPaymentCreateRequest);\n        const localVarPath = `/payment_initiation/payment/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n     * @summary Get payment details\n     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentGet: function (paymentInitiationPaymentGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationPaymentGetRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationPaymentGet', 'paymentInitiationPaymentGetRequest', paymentInitiationPaymentGetRequest);\n        const localVarPath = `/payment_initiation/payment/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n     * @summary List payments\n     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentList: function (paymentInitiationPaymentListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationPaymentListRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationPaymentList', 'paymentInitiationPaymentListRequest', paymentInitiationPaymentListRequest);\n        const localVarPath = `/payment_initiation/payment/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account.\n     * @summary Reverse an existing payment\n     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentReverse: function (paymentInitiationPaymentReverseRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationPaymentReverseRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationPaymentReverse', 'paymentInitiationPaymentReverseRequest', paymentInitiationPaymentReverseRequest);\n        const localVarPath = `/payment_initiation/payment/reverse`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.\n     * @summary Create payment recipient\n     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientCreate: function (paymentInitiationRecipientCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationRecipientCreateRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationRecipientCreate', 'paymentInitiationRecipientCreateRequest', paymentInitiationRecipientCreateRequest);\n        const localVarPath = `/payment_initiation/recipient/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Get details about a payment recipient you have previously created.\n     * @summary Get payment recipient\n     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientGet: function (paymentInitiationRecipientGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationRecipientGetRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationRecipientGet', 'paymentInitiationRecipientGetRequest', paymentInitiationRecipientGetRequest);\n        const localVarPath = `/payment_initiation/recipient/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n     * @summary List payment recipients\n     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientList: function (paymentInitiationRecipientListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'paymentInitiationRecipientListRequest' is not null or undefined\n        common_1.assertParamExists('paymentInitiationRecipientList', 'paymentInitiationRecipientListRequest', paymentInitiationRecipientListRequest);\n        const localVarPath = `/payment_initiation/recipient/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n     * @summary Create Apex bank account token\n     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorApexProcessorTokenCreate: function (processorApexProcessorTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorApexProcessorTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('processorApexProcessorTokenCreate', 'processorApexProcessorTokenCreateRequest', processorApexProcessorTokenCreateRequest);\n        const localVarPath = `/processor/apex/processor_token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).\n     * @summary Retrieve Auth data\n     * @param {ProcessorAuthGetRequest} processorAuthGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorAuthGet: function (processorAuthGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorAuthGetRequest' is not null or undefined\n        common_1.assertParamExists('processorAuthGet', 'processorAuthGetRequest', processorAuthGetRequest);\n        const localVarPath = `/processor/auth/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.\n     * @summary Retrieve Balance data\n     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBalanceGet: function (processorBalanceGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorBalanceGetRequest' is not null or undefined\n        common_1.assertParamExists('processorBalanceGet', 'processorBalanceGetRequest', processorBalanceGetRequest);\n        const localVarPath = `/processor/balance/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n     * @summary Create a bank transfer as a processor\n     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBankTransferCreate: function (processorBankTransferCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorBankTransferCreateRequest' is not null or undefined\n        common_1.assertParamExists('processorBankTransferCreate', 'processorBankTransferCreateRequest', processorBankTransferCreateRequest);\n        const localVarPath = `/processor/bank_transfer/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n     * @summary Retrieve Identity data\n     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorIdentityGet: function (processorIdentityGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorIdentityGetRequest' is not null or undefined\n        common_1.assertParamExists('processorIdentityGet', 'processorIdentityGetRequest', processorIdentityGetRequest);\n        const localVarPath = `/processor/identity/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n     * @summary Create Stripe bank account token\n     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorStripeBankAccountTokenCreate: function (processorStripeBankAccountTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorStripeBankAccountTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('processorStripeBankAccountTokenCreate', 'processorStripeBankAccountTokenCreateRequest', processorStripeBankAccountTokenCreateRequest);\n        const localVarPath = `/processor/stripe/bank_account_token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n     * @summary Create processor token\n     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorTokenCreate: function (processorTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'processorTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('processorTokenCreate', 'processorTokenCreateRequest', processorTokenCreateRequest);\n        const localVarPath = `/processor/token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n     * @summary Manually fire a Bank Transfer webhook\n     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferFireWebhook: function (sandboxBankTransferFireWebhookRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxBankTransferFireWebhookRequest' is not null or undefined\n        common_1.assertParamExists('sandboxBankTransferFireWebhook', 'sandboxBankTransferFireWebhookRequest', sandboxBankTransferFireWebhookRequest);\n        const localVarPath = `/sandbox/bank_transfer/fire_webhook`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a bank transfer event in Sandbox\n     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferSimulate: function (sandboxBankTransferSimulateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxBankTransferSimulateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxBankTransferSimulate', 'sandboxBankTransferSimulateRequest', sandboxBankTransferSimulateRequest);\n        const localVarPath = `/sandbox/bank_transfer/simulate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n     * @summary Manually fire an Income webhook\n     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxIncomeFireWebhook: function (sandboxIncomeFireWebhookRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxIncomeFireWebhookRequest' is not null or undefined\n        common_1.assertParamExists('sandboxIncomeFireWebhook', 'sandboxIncomeFireWebhookRequest', sandboxIncomeFireWebhookRequest);\n        const localVarPath = `/sandbox/income/fire_webhook`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n     * @summary Fire a test webhook\n     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemFireWebhook: function (sandboxItemFireWebhookRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxItemFireWebhookRequest' is not null or undefined\n        common_1.assertParamExists('sandboxItemFireWebhook', 'sandboxItemFireWebhookRequest', sandboxItemFireWebhookRequest);\n        const localVarPath = `/sandbox/item/fire_webhook`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n     * @summary Force a Sandbox Item into an error state\n     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemResetLogin: function (sandboxItemResetLoginRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxItemResetLoginRequest' is not null or undefined\n        common_1.assertParamExists('sandboxItemResetLogin', 'sandboxItemResetLoginRequest', sandboxItemResetLoginRequest);\n        const localVarPath = `/sandbox/item/reset_login`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n     * @summary Set verification status for Sandbox account\n     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemSetVerificationStatus: function (sandboxItemSetVerificationStatusRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxItemSetVerificationStatusRequest' is not null or undefined\n        common_1.assertParamExists('sandboxItemSetVerificationStatus', 'sandboxItemSetVerificationStatusRequest', sandboxItemSetVerificationStatusRequest);\n        const localVarPath = `/sandbox/item/set_verification_status`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Save the selected accounts when connecting to the Platypus Oauth institution\n     * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxOauthSelectAccounts: function (sandboxOauthSelectAccountsRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxOauthSelectAccountsRequest' is not null or undefined\n        common_1.assertParamExists('sandboxOauthSelectAccounts', 'sandboxOauthSelectAccountsRequest', sandboxOauthSelectAccountsRequest);\n        const localVarPath = `/sandbox/oauth/select_accounts`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n     * @summary Create a test Item and processor token\n     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxProcessorTokenCreate: function (sandboxProcessorTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxProcessorTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxProcessorTokenCreate', 'sandboxProcessorTokenCreateRequest', sandboxProcessorTokenCreateRequest);\n        const localVarPath = `/sandbox/processor_token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n     * @summary Create a test Item\n     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxPublicTokenCreate: function (sandboxPublicTokenCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxPublicTokenCreateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxPublicTokenCreate', 'sandboxPublicTokenCreateRequest', sandboxPublicTokenCreateRequest);\n        const localVarPath = `/sandbox/public_token/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n     * @summary Trigger the creation of a repayment\n     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferRepaymentSimulate: function (sandboxTransferRepaymentSimulateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxTransferRepaymentSimulateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxTransferRepaymentSimulate', 'sandboxTransferRepaymentSimulateRequest', sandboxTransferRepaymentSimulateRequest);\n        const localVarPath = `/sandbox/transfer/repayment/simulate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a transfer event in Sandbox\n     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSimulate: function (sandboxTransferSimulateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxTransferSimulateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxTransferSimulate', 'sandboxTransferSimulateRequest', sandboxTransferSimulateRequest);\n        const localVarPath = `/sandbox/transfer/simulate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n     * @summary Simulate creating a sweep\n     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSweepSimulate: function (sandboxTransferSweepSimulateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'sandboxTransferSweepSimulateRequest' is not null or undefined\n        common_1.assertParamExists('sandboxTransferSweepSimulate', 'sandboxTransferSweepSimulateRequest', sandboxTransferSweepSimulateRequest);\n        const localVarPath = `/sandbox/transfer/sweep/simulate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n     * @summary Report whether you initiated an ACH transaction\n     * @param {SignalDecisionReportRequest} signalDecisionReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalDecisionReport: function (signalDecisionReportRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'signalDecisionReportRequest' is not null or undefined\n        common_1.assertParamExists('signalDecisionReport', 'signalDecisionReportRequest', signalDecisionReportRequest);\n        const localVarPath = `/signal/decision/report`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n     * @summary Evaluate a planned ACH transaction\n     * @param {SignalEvaluateRequest} signalEvaluateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalEvaluate: function (signalEvaluateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'signalEvaluateRequest' is not null or undefined\n        common_1.assertParamExists('signalEvaluate', 'signalEvaluateRequest', signalEvaluateRequest);\n        const localVarPath = `/signal/evaluate`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n     * @summary Report a return for an ACH transaction\n     * @param {SignalReturnReportRequest} signalReturnReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalReturnReport: function (signalReturnReportRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'signalReturnReportRequest' is not null or undefined\n        common_1.assertParamExists('signalReturnReport', 'signalReturnReportRequest', signalReturnReportRequest);\n        const localVarPath = `/signal/return/report`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n     * @summary Get transaction data\n     * @param {TransactionsGetRequest} transactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsGet: function (transactionsGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transactionsGetRequest' is not null or undefined\n        common_1.assertParamExists('transactionsGet', 'transactionsGetRequest', transactionsGetRequest);\n        const localVarPath = `/transactions/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get streams of recurring transactions\n     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRecurringGet: function (transactionsRecurringGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transactionsRecurringGetRequest' is not null or undefined\n        common_1.assertParamExists('transactionsRecurringGet', 'transactionsRecurringGetRequest', transactionsRecurringGetRequest);\n        const localVarPath = `/transactions/recurring/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n     * @summary Refresh transaction data\n     * @param {TransactionsRefreshRequest} transactionsRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRefresh: function (transactionsRefreshRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transactionsRefreshRequest' is not null or undefined\n        common_1.assertParamExists('transactionsRefresh', 'transactionsRefreshRequest', transactionsRefreshRequest);\n        const localVarPath = `/transactions/refresh`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get incremental transaction updates on an Item\n     * @param {TransactionsSyncRequest} transactionsSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsSync: function (transactionsSyncRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transactionsSyncRequest' is not null or undefined\n        common_1.assertParamExists('transactionsSync', 'transactionsSyncRequest', transactionsSyncRequest);\n        const localVarPath = `/transactions/sync`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n     * @summary Create a transfer authorization\n     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferAuthorizationCreate: function (transferAuthorizationCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferAuthorizationCreateRequest' is not null or undefined\n        common_1.assertParamExists('transferAuthorizationCreate', 'transferAuthorizationCreateRequest', transferAuthorizationCreateRequest);\n        const localVarPath = `/transfer/authorization/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n     * @summary Cancel a transfer\n     * @param {TransferCancelRequest} transferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCancel: function (transferCancelRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferCancelRequest' is not null or undefined\n        common_1.assertParamExists('transferCancel', 'transferCancelRequest', transferCancelRequest);\n        const localVarPath = `/transfer/cancel`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/create` endpoint to initiate a new transfer.\n     * @summary Create a transfer\n     * @param {TransferCreateRequest} transferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCreate: function (transferCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferCreateRequest' is not null or undefined\n        common_1.assertParamExists('transferCreate', 'transferCreateRequest', transferCreateRequest);\n        const localVarPath = `/transfer/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n     * @summary List transfer events\n     * @param {TransferEventListRequest} transferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventList: function (transferEventListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferEventListRequest' is not null or undefined\n        common_1.assertParamExists('transferEventList', 'transferEventListRequest', transferEventListRequest);\n        const localVarPath = `/transfer/event/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n     * @summary Sync transfer events\n     * @param {TransferEventSyncRequest} transferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventSync: function (transferEventSyncRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferEventSyncRequest' is not null or undefined\n        common_1.assertParamExists('transferEventSync', 'transferEventSyncRequest', transferEventSyncRequest);\n        const localVarPath = `/transfer/event/sync`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n     * @summary Retrieve a transfer\n     * @param {TransferGetRequest} transferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferGet: function (transferGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferGetRequest' is not null or undefined\n        common_1.assertParamExists('transferGet', 'transferGetRequest', transferGetRequest);\n        const localVarPath = `/transfer/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n     * @summary Create a transfer intent object to invoke the Transfer UI\n     * @param {TransferIntentCreateRequest} transferIntentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentCreate: function (transferIntentCreateRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferIntentCreateRequest' is not null or undefined\n        common_1.assertParamExists('transferIntentCreate', 'transferIntentCreateRequest', transferIntentCreateRequest);\n        const localVarPath = `/transfer/intent/create`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n     * @summary Retrieve more information about a transfer intent\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentGet: function (requestBody) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'requestBody' is not null or undefined\n        common_1.assertParamExists('transferIntentGet', 'requestBody', requestBody);\n        const localVarPath = `/transfer/intent/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.\n     * @summary List transfers\n     * @param {TransferListRequest} transferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferList: function (transferListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferListRequest' is not null or undefined\n        common_1.assertParamExists('transferList', 'transferListRequest', transferListRequest);\n        const localVarPath = `/transfer/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n     * @summary Lists historical repayments\n     * @param {TransferRepaymentListRequest} transferRepaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentList: function (transferRepaymentListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferRepaymentListRequest' is not null or undefined\n        common_1.assertParamExists('transferRepaymentList', 'transferRepaymentListRequest', transferRepaymentListRequest);\n        const localVarPath = `/transfer/repayment/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n     * @summary List the returns included in a repayment\n     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentReturnList: function (transferRepaymentReturnListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferRepaymentReturnListRequest' is not null or undefined\n        common_1.assertParamExists('transferRepaymentReturnList', 'transferRepaymentReturnListRequest', transferRepaymentReturnListRequest);\n        const localVarPath = `/transfer/repayment/return/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {TransferSweepGetRequest} transferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepGet: function (transferSweepGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferSweepGetRequest' is not null or undefined\n        common_1.assertParamExists('transferSweepGet', 'transferSweepGetRequest', transferSweepGetRequest);\n        const localVarPath = `/transfer/sweep/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {TransferSweepListRequest} transferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepList: function (transferSweepListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'transferSweepListRequest' is not null or undefined\n        common_1.assertParamExists('transferSweepList', 'transferSweepListRequest', transferSweepListRequest);\n        const localVarPath = `/transfer/sweep/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Fetch an e-wallet. The response includes the current balance.\n     * @summary Fetch an e-wallet\n     * @param {WalletGetRequest} walletGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletGet: function (walletGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'walletGetRequest' is not null or undefined\n        common_1.assertParamExists('walletGet', 'walletGetRequest', walletGetRequest);\n        const localVarPath = `/wallet/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.\n     * @summary Execute a transaction using an e-wallet\n     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionExecute: function (walletTransactionExecuteRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'walletTransactionExecuteRequest' is not null or undefined\n        common_1.assertParamExists('walletTransactionExecute', 'walletTransactionExecuteRequest', walletTransactionExecuteRequest);\n        const localVarPath = `/wallet/transaction/execute`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.\n     * @summary List e-wallet transactions\n     * @param {WalletTransactionsListRequest} walletTransactionsListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionsList: function (walletTransactionsListRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'walletTransactionsListRequest' is not null or undefined\n        common_1.assertParamExists('walletTransactionsList', 'walletTransactionsListRequest', walletTransactionsListRequest);\n        const localVarPath = `/wallet/transactions/list`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionsListRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    },\n    /**\n     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n     * @summary Get webhook verification key\n     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    webhookVerificationKeyGet: function (webhookVerificationKeyGetRequest) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, function* () {\n        // verify required parameter 'webhookVerificationKeyGetRequest' is not null or undefined\n        common_1.assertParamExists('webhookVerificationKeyGet', 'webhookVerificationKeyGetRequest', webhookVerificationKeyGetRequest);\n        const localVarPath = `/webhook_verification_key/get`;\n        // use dummy base URL string because the URL constructor only accepts absolute URLs.\n        const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n        let baseOptions;\n        if (configuration) {\n          baseOptions = configuration.baseOptions;\n        }\n        const localVarRequestOptions = Object.assign(Object.assign({\n          method: 'POST'\n        }, baseOptions), options);\n        const localVarHeaderParameter = {};\n        const localVarQueryParameter = {};\n        // authentication clientId required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration);\n        // authentication plaidVersion required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration);\n        // authentication secret required\n        yield common_1.setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration);\n        localVarHeaderParameter['Content-Type'] = 'application/json';\n        common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n        localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n        localVarRequestOptions.data = common_1.serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration);\n        return {\n          url: common_1.toPathString(localVarUrlObj),\n          options: localVarRequestOptions\n        };\n      });\n    }\n  };\n};\nexports.PlaidApiAxiosParamCreator = PlaidApiAxiosParamCreator;\n/**\n * PlaidApi - functional programming interface\n * @export\n */\nconst PlaidApiFp = function (configuration) {\n  const localVarAxiosParamCreator = exports.PlaidApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n     * @summary Retrieve real-time balance data\n     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsBalanceGet(accountsBalanceGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n     * @summary Retrieve accounts\n     * @param {AccountsGetRequest} accountsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsGet(accountsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n     * @summary Retrieve information about a Plaid application\n     * @param {ApplicationGetRequest} applicationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    applicationGet(applicationGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n     * @summary Create Asset Report Audit Copy\n     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n     * @summary Retrieve an Asset Report Audit Copy\n     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n     * @summary Remove Asset Report Audit Copy\n     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n     * @summary Create an Asset Report\n     * @param {AssetReportCreateRequest} assetReportCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportCreate(assetReportCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n     * @summary Filter Asset Report\n     * @param {AssetReportFilterRequest} assetReportFilterRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportFilter(assetReportFilterRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n     * @summary Retrieve an Asset Report\n     * @param {AssetReportGetRequest} assetReportGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportGet(assetReportGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n     * @summary Retrieve a PDF Asset Report\n     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportPdfGet(assetReportPDFGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n     * @summary Refresh an Asset Report\n     * @param {AssetReportRefreshRequest} assetReportRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRefresh(assetReportRefreshRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n     * @summary Delete an Asset Report\n     * @param {AssetReportRemoveRequest} assetReportRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRemove(assetReportRemoveRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n     * @summary Retrieve auth data\n     * @param {AuthGetRequest} authGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authGet(authGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.authGet(authGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n     * @summary Get balance of your Bank Transfer account\n     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n     * @summary Cancel a bank transfer\n     * @param {BankTransferCancelRequest} bankTransferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCancel(bankTransferCancelRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n     * @summary Create a bank transfer\n     * @param {BankTransferCreateRequest} bankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCreate(bankTransferCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n     * @summary List bank transfer events\n     * @param {BankTransferEventListRequest} bankTransferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventList(bankTransferEventListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n     * @summary Sync bank transfer events\n     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventSync(bankTransferEventSyncRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n     * @summary Retrieve a bank transfer\n     * @param {BankTransferGetRequest} bankTransferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferGet(bankTransferGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.\n     * @summary List bank transfers\n     * @param {BankTransferListRequest} bankTransferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferList(bankTransferListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n     * @summary Migrate account into Bank Transfers\n     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepGet(bankTransferSweepGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepList(bankTransferSweepListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n     * @summary Get Categories\n     * @param {object} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    categoriesGet(body, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.categoriesGet(body, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n     * @summary Create payment token\n     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch without using Plaid Exchange\n     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch\n     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchCreate(depositSwitchCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n     * @summary Retrieve a deposit switch\n     * @param {DepositSwitchGetRequest} depositSwitchGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchGet(depositSwitchGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.\n     * @summary Create a deposit switch token\n     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n     * @summary Search employer database\n     * @param {EmployersSearchRequest} employersSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employersSearch(employersSearchRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n     * @summary Retrieve a summary of an individual\\'s employment information\n     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employmentVerificationGet(employmentVerificationGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n     * @summary Retrieve identity data\n     * @param {IdentityGetRequest} identityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    identityGet(identityGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.identityGet(identityGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.\n     * @summary (Deprecated) Create an income verification instance\n     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationCreate(incomeVerificationCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n     * @summary Download the original documents used for income verification\n     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * /income/verification/paystub/get returns information from a single paystub used for income verification\n     * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n     * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the paystubs used for income verification\n     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n     * @summary Check digital income verification eligibility and optimize conversion\n     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/refresh` refreshes a given income verification.\n     * @summary Refresh an income verification\n     * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationRefresh(incomeVerificationRefreshRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary (Deprecated) Retrieve a summary of information derived from income verification\n     * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the tax documents used for income verification\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationTaxformsGet(requestBody, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationTaxformsGet(requestBody, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n     * @summary Get details of all supported institutions\n     * @param {InstitutionsGetRequest} institutionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGet(institutionsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Get details of an institution\n     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGetById(institutionsGetByIdRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Search institutions\n     * @param {InstitutionsSearchRequest} institutionsSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsSearch(institutionsSearchRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n     * @summary Get Investment holdings\n     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n     * @summary Get investment transactions\n     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.\n     * @summary Invalidate access_token\n     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * List a userâ€™s connected applications\n     * @summary List a userâ€™s connected applications\n     * @param {ItemApplicationListRequest} itemApplicationListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationList(itemApplicationListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Enable consumers to update product access on selected accounts for an application.\n     * @summary Update the scopes of access for a particular application\n     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n     * @summary Create public token\n     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemCreatePublicToken(itemPublicTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Returns information about the status of an Item.\n     * @summary Retrieve an Item\n     * @param {ItemGetRequest} itemGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemGet(itemGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemGet(itemGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n     * @summary Import Item\n     * @param {ItemImportRequest} itemImportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemImport(itemImportRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemImport(itemImportRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n     * @summary Exchange public token for an access token\n     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n     * @summary Remove an Item\n     * @param {ItemRemoveRequest} itemRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemRemove(itemRemoveRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n     * @summary Update Webhook URL\n     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemWebhookUpdate(itemWebhookUpdateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n     * @summary Retrieve Liabilities data\n     * @param {LiabilitiesGetRequest} liabilitiesGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    liabilitiesGet(liabilitiesGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n     * @summary Create Link Token\n     * @param {LinkTokenCreateRequest} linkTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenCreate(linkTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n     * @summary Get Link Token\n     * @param {LinkTokenGetRequest} linkTokenGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenGet(linkTokenGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n     * @summary Create a payment\n     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n     * @summary Get payment details\n     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n     * @summary List payments\n     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account.\n     * @summary Reverse an existing payment\n     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.\n     * @summary Create payment recipient\n     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Get details about a payment recipient you have previously created.\n     * @summary Get payment recipient\n     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n     * @summary List payment recipients\n     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n     * @summary Create Apex bank account token\n     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).\n     * @summary Retrieve Auth data\n     * @param {ProcessorAuthGetRequest} processorAuthGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorAuthGet(processorAuthGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.\n     * @summary Retrieve Balance data\n     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBalanceGet(processorBalanceGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n     * @summary Create a bank transfer as a processor\n     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBankTransferCreate(processorBankTransferCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n     * @summary Retrieve Identity data\n     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorIdentityGet(processorIdentityGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n     * @summary Create Stripe bank account token\n     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n     * @summary Create processor token\n     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorTokenCreate(processorTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n     * @summary Manually fire a Bank Transfer webhook\n     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a bank transfer event in Sandbox\n     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n     * @summary Manually fire an Income webhook\n     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n     * @summary Fire a test webhook\n     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n     * @summary Force a Sandbox Item into an error state\n     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n     * @summary Set verification status for Sandbox account\n     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Save the selected accounts when connecting to the Platypus Oauth institution\n     * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n     * @summary Create a test Item and processor token\n     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n     * @summary Create a test Item\n     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n     * @summary Trigger the creation of a repayment\n     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a transfer event in Sandbox\n     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n     * @summary Simulate creating a sweep\n     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n     * @summary Report whether you initiated an ACH transaction\n     * @param {SignalDecisionReportRequest} signalDecisionReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalDecisionReport(signalDecisionReportRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n     * @summary Evaluate a planned ACH transaction\n     * @param {SignalEvaluateRequest} signalEvaluateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalEvaluate(signalEvaluateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n     * @summary Report a return for an ACH transaction\n     * @param {SignalReturnReportRequest} signalReturnReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalReturnReport(signalReturnReportRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n     * @summary Get transaction data\n     * @param {TransactionsGetRequest} transactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsGet(transactionsGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get streams of recurring transactions\n     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRecurringGet(transactionsRecurringGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n     * @summary Refresh transaction data\n     * @param {TransactionsRefreshRequest} transactionsRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRefresh(transactionsRefreshRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get incremental transaction updates on an Item\n     * @param {TransactionsSyncRequest} transactionsSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsSync(transactionsSyncRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n     * @summary Create a transfer authorization\n     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n     * @summary Cancel a transfer\n     * @param {TransferCancelRequest} transferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCancel(transferCancelRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/create` endpoint to initiate a new transfer.\n     * @summary Create a transfer\n     * @param {TransferCreateRequest} transferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCreate(transferCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n     * @summary List transfer events\n     * @param {TransferEventListRequest} transferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventList(transferEventListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n     * @summary Sync transfer events\n     * @param {TransferEventSyncRequest} transferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventSync(transferEventSyncRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n     * @summary Retrieve a transfer\n     * @param {TransferGetRequest} transferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferGet(transferGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferGet(transferGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n     * @summary Create a transfer intent object to invoke the Transfer UI\n     * @param {TransferIntentCreateRequest} transferIntentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentCreate(transferIntentCreateRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n     * @summary Retrieve more information about a transfer intent\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentGet(requestBody, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentGet(requestBody, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.\n     * @summary List transfers\n     * @param {TransferListRequest} transferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferList(transferListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferList(transferListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n     * @summary Lists historical repayments\n     * @param {TransferRepaymentListRequest} transferRepaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentList(transferRepaymentListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n     * @summary List the returns included in a repayment\n     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {TransferSweepGetRequest} transferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepGet(transferSweepGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {TransferSweepListRequest} transferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepList(transferSweepListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Fetch an e-wallet. The response includes the current balance.\n     * @summary Fetch an e-wallet\n     * @param {WalletGetRequest} walletGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletGet(walletGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.walletGet(walletGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.\n     * @summary Execute a transaction using an e-wallet\n     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionExecute(walletTransactionExecuteRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.\n     * @summary List e-wallet transactions\n     * @param {WalletTransactionsListRequest} walletTransactionsListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionsList(walletTransactionsListRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionsList(walletTransactionsListRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n    /**\n     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n     * @summary Get webhook verification key\n     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    }\n  };\n};\nexports.PlaidApiFp = PlaidApiFp;\n/**\n * PlaidApi - factory interface\n * @export\n */\nconst PlaidApiFactory = function (configuration, basePath, axios) {\n  const localVarFp = exports.PlaidApiFp(configuration);\n  return {\n    /**\n     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n     * @summary Retrieve real-time balance data\n     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsBalanceGet(accountsBalanceGetRequest, options) {\n      return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n     * @summary Retrieve accounts\n     * @param {AccountsGetRequest} accountsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    accountsGet(accountsGetRequest, options) {\n      return localVarFp.accountsGet(accountsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n     * @summary Retrieve information about a Plaid application\n     * @param {ApplicationGetRequest} applicationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    applicationGet(applicationGetRequest, options) {\n      return localVarFp.applicationGet(applicationGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n     * @summary Create Asset Report Audit Copy\n     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {\n      return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n     * @summary Retrieve an Asset Report Audit Copy\n     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {\n      return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n     * @summary Remove Asset Report Audit Copy\n     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {\n      return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n     * @summary Create an Asset Report\n     * @param {AssetReportCreateRequest} assetReportCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportCreate(assetReportCreateRequest, options) {\n      return localVarFp.assetReportCreate(assetReportCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n     * @summary Filter Asset Report\n     * @param {AssetReportFilterRequest} assetReportFilterRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportFilter(assetReportFilterRequest, options) {\n      return localVarFp.assetReportFilter(assetReportFilterRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n     * @summary Retrieve an Asset Report\n     * @param {AssetReportGetRequest} assetReportGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportGet(assetReportGetRequest, options) {\n      return localVarFp.assetReportGet(assetReportGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n     * @summary Retrieve a PDF Asset Report\n     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportPdfGet(assetReportPDFGetRequest, options) {\n      return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n     * @summary Refresh an Asset Report\n     * @param {AssetReportRefreshRequest} assetReportRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRefresh(assetReportRefreshRequest, options) {\n      return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n     * @summary Delete an Asset Report\n     * @param {AssetReportRemoveRequest} assetReportRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assetReportRemove(assetReportRemoveRequest, options) {\n      return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n     * @summary Retrieve auth data\n     * @param {AuthGetRequest} authGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authGet(authGetRequest, options) {\n      return localVarFp.authGet(authGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n     * @summary Get balance of your Bank Transfer account\n     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {\n      return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n     * @summary Cancel a bank transfer\n     * @param {BankTransferCancelRequest} bankTransferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCancel(bankTransferCancelRequest, options) {\n      return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n     * @summary Create a bank transfer\n     * @param {BankTransferCreateRequest} bankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferCreate(bankTransferCreateRequest, options) {\n      return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n     * @summary List bank transfer events\n     * @param {BankTransferEventListRequest} bankTransferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventList(bankTransferEventListRequest, options) {\n      return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n     * @summary Sync bank transfer events\n     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferEventSync(bankTransferEventSyncRequest, options) {\n      return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n     * @summary Retrieve a bank transfer\n     * @param {BankTransferGetRequest} bankTransferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferGet(bankTransferGetRequest, options) {\n      return localVarFp.bankTransferGet(bankTransferGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.\n     * @summary List bank transfers\n     * @param {BankTransferListRequest} bankTransferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferList(bankTransferListRequest, options) {\n      return localVarFp.bankTransferList(bankTransferListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n     * @summary Migrate account into Bank Transfers\n     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {\n      return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepGet(bankTransferSweepGetRequest, options) {\n      return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankTransferSweepList(bankTransferSweepListRequest, options) {\n      return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n     * @summary Get Categories\n     * @param {object} body\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    categoriesGet(body, options) {\n      return localVarFp.categoriesGet(body, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n     * @summary Create payment token\n     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {\n      return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch without using Plaid Exchange\n     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {\n      return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch\n     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchCreate(depositSwitchCreateRequest, options) {\n      return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n     * @summary Retrieve a deposit switch\n     * @param {DepositSwitchGetRequest} depositSwitchGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchGet(depositSwitchGetRequest, options) {\n      return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.\n     * @summary Create a deposit switch token\n     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {\n      return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n     * @summary Search employer database\n     * @param {EmployersSearchRequest} employersSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employersSearch(employersSearchRequest, options) {\n      return localVarFp.employersSearch(employersSearchRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n     * @summary Retrieve a summary of an individual\\'s employment information\n     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    employmentVerificationGet(employmentVerificationGetRequest, options) {\n      return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n     * @summary Retrieve identity data\n     * @param {IdentityGetRequest} identityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    identityGet(identityGetRequest, options) {\n      return localVarFp.identityGet(identityGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.\n     * @summary (Deprecated) Create an income verification instance\n     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationCreate(incomeVerificationCreateRequest, options) {\n      return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n     * @summary Download the original documents used for income verification\n     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {\n      return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * /income/verification/paystub/get returns information from a single paystub used for income verification\n     * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n     * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options) {\n      return localVarFp.incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the paystubs used for income verification\n     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {\n      return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n     * @summary Check digital income verification eligibility and optimize conversion\n     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {\n      return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/refresh` refreshes a given income verification.\n     * @summary Refresh an income verification\n     * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {\n      return localVarFp.incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary (Deprecated) Retrieve a summary of information derived from income verification\n     * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options) {\n      return localVarFp.incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the tax documents used for income verification\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    incomeVerificationTaxformsGet(requestBody, options) {\n      return localVarFp.incomeVerificationTaxformsGet(requestBody, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n     * @summary Get details of all supported institutions\n     * @param {InstitutionsGetRequest} institutionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGet(institutionsGetRequest, options) {\n      return localVarFp.institutionsGet(institutionsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Get details of an institution\n     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsGetById(institutionsGetByIdRequest, options) {\n      return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n     * @summary Search institutions\n     * @param {InstitutionsSearchRequest} institutionsSearchRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    institutionsSearch(institutionsSearchRequest, options) {\n      return localVarFp.institutionsSearch(institutionsSearchRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n     * @summary Get Investment holdings\n     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {\n      return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n     * @summary Get investment transactions\n     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {\n      return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.\n     * @summary Invalidate access_token\n     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {\n      return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * List a userâ€™s connected applications\n     * @summary List a userâ€™s connected applications\n     * @param {ItemApplicationListRequest} itemApplicationListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationList(itemApplicationListRequest, options) {\n      return localVarFp.itemApplicationList(itemApplicationListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Enable consumers to update product access on selected accounts for an application.\n     * @summary Update the scopes of access for a particular application\n     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {\n      return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n     * @summary Create public token\n     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemCreatePublicToken(itemPublicTokenCreateRequest, options) {\n      return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Returns information about the status of an Item.\n     * @summary Retrieve an Item\n     * @param {ItemGetRequest} itemGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemGet(itemGetRequest, options) {\n      return localVarFp.itemGet(itemGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n     * @summary Import Item\n     * @param {ItemImportRequest} itemImportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemImport(itemImportRequest, options) {\n      return localVarFp.itemImport(itemImportRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n     * @summary Exchange public token for an access token\n     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {\n      return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n     * @summary Remove an Item\n     * @param {ItemRemoveRequest} itemRemoveRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemRemove(itemRemoveRequest, options) {\n      return localVarFp.itemRemove(itemRemoveRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n     * @summary Update Webhook URL\n     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemWebhookUpdate(itemWebhookUpdateRequest, options) {\n      return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n     * @summary Retrieve Liabilities data\n     * @param {LiabilitiesGetRequest} liabilitiesGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    liabilitiesGet(liabilitiesGetRequest, options) {\n      return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n     * @summary Create Link Token\n     * @param {LinkTokenCreateRequest} linkTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenCreate(linkTokenCreateRequest, options) {\n      return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n     * @summary Get Link Token\n     * @param {LinkTokenGetRequest} linkTokenGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    linkTokenGet(linkTokenGetRequest, options) {\n      return localVarFp.linkTokenGet(linkTokenGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n     * @summary Create a payment\n     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {\n      return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n     * @summary Get payment details\n     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {\n      return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n     * @summary List payments\n     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {\n      return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account.\n     * @summary Reverse an existing payment\n     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {\n      return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.\n     * @summary Create payment recipient\n     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {\n      return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Get details about a payment recipient you have previously created.\n     * @summary Get payment recipient\n     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {\n      return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n     * @summary List payment recipients\n     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {\n      return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n     * @summary Create Apex bank account token\n     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {\n      return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).\n     * @summary Retrieve Auth data\n     * @param {ProcessorAuthGetRequest} processorAuthGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorAuthGet(processorAuthGetRequest, options) {\n      return localVarFp.processorAuthGet(processorAuthGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.\n     * @summary Retrieve Balance data\n     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBalanceGet(processorBalanceGetRequest, options) {\n      return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n     * @summary Create a bank transfer as a processor\n     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorBankTransferCreate(processorBankTransferCreateRequest, options) {\n      return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n     * @summary Retrieve Identity data\n     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorIdentityGet(processorIdentityGetRequest, options) {\n      return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n     * @summary Create Stripe bank account token\n     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {\n      return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n     * @summary Create processor token\n     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    processorTokenCreate(processorTokenCreateRequest, options) {\n      return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n     * @summary Manually fire a Bank Transfer webhook\n     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {\n      return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a bank transfer event in Sandbox\n     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {\n      return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n     * @summary Manually fire an Income webhook\n     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {\n      return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n     * @summary Fire a test webhook\n     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {\n      return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n     * @summary Force a Sandbox Item into an error state\n     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {\n      return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n     * @summary Set verification status for Sandbox account\n     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {\n      return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Save the selected accounts when connecting to the Platypus Oauth institution\n     * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {\n      return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n     * @summary Create a test Item and processor token\n     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {\n      return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n     * @summary Create a test Item\n     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {\n      return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n     * @summary Trigger the creation of a repayment\n     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {\n      return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a transfer event in Sandbox\n     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {\n      return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n     * @summary Simulate creating a sweep\n     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {\n      return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n     * @summary Report whether you initiated an ACH transaction\n     * @param {SignalDecisionReportRequest} signalDecisionReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalDecisionReport(signalDecisionReportRequest, options) {\n      return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n     * @summary Evaluate a planned ACH transaction\n     * @param {SignalEvaluateRequest} signalEvaluateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalEvaluate(signalEvaluateRequest, options) {\n      return localVarFp.signalEvaluate(signalEvaluateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n     * @summary Report a return for an ACH transaction\n     * @param {SignalReturnReportRequest} signalReturnReportRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    signalReturnReport(signalReturnReportRequest, options) {\n      return localVarFp.signalReturnReport(signalReturnReportRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n     * @summary Get transaction data\n     * @param {TransactionsGetRequest} transactionsGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsGet(transactionsGetRequest, options) {\n      return localVarFp.transactionsGet(transactionsGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get streams of recurring transactions\n     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRecurringGet(transactionsRecurringGetRequest, options) {\n      return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n     * @summary Refresh transaction data\n     * @param {TransactionsRefreshRequest} transactionsRefreshRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsRefresh(transactionsRefreshRequest, options) {\n      return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get incremental transaction updates on an Item\n     * @param {TransactionsSyncRequest} transactionsSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transactionsSync(transactionsSyncRequest, options) {\n      return localVarFp.transactionsSync(transactionsSyncRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n     * @summary Create a transfer authorization\n     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {\n      return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n     * @summary Cancel a transfer\n     * @param {TransferCancelRequest} transferCancelRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCancel(transferCancelRequest, options) {\n      return localVarFp.transferCancel(transferCancelRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/create` endpoint to initiate a new transfer.\n     * @summary Create a transfer\n     * @param {TransferCreateRequest} transferCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferCreate(transferCreateRequest, options) {\n      return localVarFp.transferCreate(transferCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n     * @summary List transfer events\n     * @param {TransferEventListRequest} transferEventListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventList(transferEventListRequest, options) {\n      return localVarFp.transferEventList(transferEventListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n     * @summary Sync transfer events\n     * @param {TransferEventSyncRequest} transferEventSyncRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferEventSync(transferEventSyncRequest, options) {\n      return localVarFp.transferEventSync(transferEventSyncRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n     * @summary Retrieve a transfer\n     * @param {TransferGetRequest} transferGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferGet(transferGetRequest, options) {\n      return localVarFp.transferGet(transferGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n     * @summary Create a transfer intent object to invoke the Transfer UI\n     * @param {TransferIntentCreateRequest} transferIntentCreateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentCreate(transferIntentCreateRequest, options) {\n      return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n     * @summary Retrieve more information about a transfer intent\n     * @param {{ [key: string]: object; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferIntentGet(requestBody, options) {\n      return localVarFp.transferIntentGet(requestBody, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.\n     * @summary List transfers\n     * @param {TransferListRequest} transferListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferList(transferListRequest, options) {\n      return localVarFp.transferList(transferListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n     * @summary Lists historical repayments\n     * @param {TransferRepaymentListRequest} transferRepaymentListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentList(transferRepaymentListRequest, options) {\n      return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n     * @summary List the returns included in a repayment\n     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {\n      return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {TransferSweepGetRequest} transferSweepGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepGet(transferSweepGetRequest, options) {\n      return localVarFp.transferSweepGet(transferSweepGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {TransferSweepListRequest} transferSweepListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    transferSweepList(transferSweepListRequest, options) {\n      return localVarFp.transferSweepList(transferSweepListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Fetch an e-wallet. The response includes the current balance.\n     * @summary Fetch an e-wallet\n     * @param {WalletGetRequest} walletGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletGet(walletGetRequest, options) {\n      return localVarFp.walletGet(walletGetRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.\n     * @summary Execute a transaction using an e-wallet\n     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionExecute(walletTransactionExecuteRequest, options) {\n      return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.\n     * @summary List e-wallet transactions\n     * @param {WalletTransactionsListRequest} walletTransactionsListRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    walletTransactionsList(walletTransactionsListRequest, options) {\n      return localVarFp.walletTransactionsList(walletTransactionsListRequest, options).then(request => request(axios, basePath));\n    },\n    /**\n     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n     * @summary Get webhook verification key\n     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {\n      return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then(request => request(axios, basePath));\n    }\n  };\n};\nexports.PlaidApiFactory = PlaidApiFactory;\n/**\n * PlaidApi - object-oriented interface\n * @export\n * @class PlaidApi\n * @extends {BaseAPI}\n */\nclass PlaidApi extends base_1.BaseAPI {\n  /**\n   * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n   * @summary Retrieve real-time balance data\n   * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  accountsBalanceGet(accountsBalanceGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n   * @summary Retrieve accounts\n   * @param {AccountsGetRequest} accountsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  accountsGet(accountsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n   * @summary Retrieve information about a Plaid application\n   * @param {ApplicationGetRequest} applicationGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  applicationGet(applicationGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n   * @summary Create Asset Report Audit Copy\n   * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n   * @summary Retrieve an Asset Report Audit Copy\n   * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n   * @summary Remove Asset Report Audit Copy\n   * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n   * @summary Create an Asset Report\n   * @param {AssetReportCreateRequest} assetReportCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportCreate(assetReportCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n   * @summary Filter Asset Report\n   * @param {AssetReportFilterRequest} assetReportFilterRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportFilter(assetReportFilterRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n   * @summary Retrieve an Asset Report\n   * @param {AssetReportGetRequest} assetReportGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportGet(assetReportGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n   * @summary Retrieve a PDF Asset Report\n   * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportPdfGet(assetReportPDFGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n   * @summary Refresh an Asset Report\n   * @param {AssetReportRefreshRequest} assetReportRefreshRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportRefresh(assetReportRefreshRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n   * @summary Delete an Asset Report\n   * @param {AssetReportRemoveRequest} assetReportRemoveRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  assetReportRemove(assetReportRemoveRequest, options) {\n    return exports.PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n   * @summary Retrieve auth data\n   * @param {AuthGetRequest} authGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  authGet(authGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).authGet(authGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n   * @summary Get balance of your Bank Transfer account\n   * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n   * @summary Cancel a bank transfer\n   * @param {BankTransferCancelRequest} bankTransferCancelRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferCancel(bankTransferCancelRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n   * @summary Create a bank transfer\n   * @param {BankTransferCreateRequest} bankTransferCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferCreate(bankTransferCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n   * @summary List bank transfer events\n   * @param {BankTransferEventListRequest} bankTransferEventListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferEventList(bankTransferEventListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n   * @summary Sync bank transfer events\n   * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferEventSync(bankTransferEventSyncRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n   * @summary Retrieve a bank transfer\n   * @param {BankTransferGetRequest} bankTransferGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferGet(bankTransferGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.\n   * @summary List bank transfers\n   * @param {BankTransferListRequest} bankTransferListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferList(bankTransferListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n   * @summary Migrate account into Bank Transfers\n   * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n   * @summary Retrieve a sweep\n   * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferSweepGet(bankTransferSweepGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n   * @summary List sweeps\n   * @param {BankTransferSweepListRequest} bankTransferSweepListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  bankTransferSweepList(bankTransferSweepListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n   * @summary Get Categories\n   * @param {object} body\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  categoriesGet(body, options) {\n    return exports.PlaidApiFp(this.configuration).categoriesGet(body, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n   * @summary Create payment token\n   * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n   * @summary Create a deposit switch without using Plaid Exchange\n   * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n   * @summary Create a deposit switch\n   * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  depositSwitchCreate(depositSwitchCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n   * @summary Retrieve a deposit switch\n   * @param {DepositSwitchGetRequest} depositSwitchGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  depositSwitchGet(depositSwitchGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.\n   * @summary Create a deposit switch token\n   * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n   * @summary Search employer database\n   * @param {EmployersSearchRequest} employersSearchRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  employersSearch(employersSearchRequest, options) {\n    return exports.PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n   * @summary Retrieve a summary of an individual\\'s employment information\n   * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  employmentVerificationGet(employmentVerificationGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n   * @summary Retrieve identity data\n   * @param {IdentityGetRequest} identityGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  identityGet(identityGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.\n   * @summary (Deprecated) Create an income verification instance\n   * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationCreate(incomeVerificationCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n   * @summary Download the original documents used for income verification\n   * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * /income/verification/paystub/get returns information from a single paystub used for income verification\n   * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n   * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n   * @summary Retrieve information from the paystubs used for income verification\n   * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n   * @summary Check digital income verification eligibility and optimize conversion\n   * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/refresh` refreshes a given income verification.\n   * @summary Refresh an income verification\n   * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationRefresh(incomeVerificationRefreshRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n   * @summary (Deprecated) Retrieve a summary of information derived from income verification\n   * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n   * @summary Retrieve information from the tax documents used for income verification\n   * @param {{ [key: string]: object; }} requestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  incomeVerificationTaxformsGet(requestBody, options) {\n    return exports.PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(requestBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n   * @summary Get details of all supported institutions\n   * @param {InstitutionsGetRequest} institutionsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  institutionsGet(institutionsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n   * @summary Get details of an institution\n   * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  institutionsGetById(institutionsGetByIdRequest, options) {\n    return exports.PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.\n   * @summary Search institutions\n   * @param {InstitutionsSearchRequest} institutionsSearchRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  institutionsSearch(institutionsSearchRequest, options) {\n    return exports.PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n   * @summary Get Investment holdings\n   * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n   * @summary Get investment transactions\n   * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.\n   * @summary Invalidate access_token\n   * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * List a userâ€™s connected applications\n   * @summary List a userâ€™s connected applications\n   * @param {ItemApplicationListRequest} itemApplicationListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemApplicationList(itemApplicationListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Enable consumers to update product access on selected accounts for an application.\n   * @summary Update the scopes of access for a particular application\n   * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n   * @summary Create public token\n   * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemCreatePublicToken(itemPublicTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Returns information about the status of an Item.\n   * @summary Retrieve an Item\n   * @param {ItemGetRequest} itemGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemGet(itemGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n   * @summary Import Item\n   * @param {ItemImportRequest} itemImportRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemImport(itemImportRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n   * @summary Exchange public token for an access token\n   * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n   * @summary Remove an Item\n   * @param {ItemRemoveRequest} itemRemoveRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemRemove(itemRemoveRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n   * @summary Update Webhook URL\n   * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  itemWebhookUpdate(itemWebhookUpdateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n   * @summary Retrieve Liabilities data\n   * @param {LiabilitiesGetRequest} liabilitiesGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  liabilitiesGet(liabilitiesGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n   * @summary Create Link Token\n   * @param {LinkTokenCreateRequest} linkTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  linkTokenCreate(linkTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n   * @summary Get Link Token\n   * @param {LinkTokenGetRequest} linkTokenGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  linkTokenGet(linkTokenGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n   * @summary Create a payment\n   * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n   * @summary Get payment details\n   * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n   * @summary List payments\n   * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account.\n   * @summary Reverse an existing payment\n   * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.\n   * @summary Create payment recipient\n   * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Get details about a payment recipient you have previously created.\n   * @summary Get payment recipient\n   * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n   * @summary List payment recipients\n   * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n   * @summary Create Apex bank account token\n   * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).\n   * @summary Retrieve Auth data\n   * @param {ProcessorAuthGetRequest} processorAuthGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorAuthGet(processorAuthGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.\n   * @summary Retrieve Balance data\n   * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorBalanceGet(processorBalanceGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n   * @summary Create a bank transfer as a processor\n   * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorBankTransferCreate(processorBankTransferCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n   * @summary Retrieve Identity data\n   * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorIdentityGet(processorIdentityGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n   * @summary Create Stripe bank account token\n   * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n   * @summary Create processor token\n   * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  processorTokenCreate(processorTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n   * @summary Manually fire a Bank Transfer webhook\n   * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n   * @summary Simulate a bank transfer event in Sandbox\n   * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n   * @summary Manually fire an Income webhook\n   * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n   * @summary Fire a test webhook\n   * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n   * @summary Force a Sandbox Item into an error state\n   * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n   * @summary Set verification status for Sandbox account\n   * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Save the selected accounts when connecting to the Platypus Oauth institution\n   * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n   * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n   * @summary Create a test Item and processor token\n   * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n   * @summary Create a test Item\n   * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n   * @summary Trigger the creation of a repayment\n   * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n   * @summary Simulate a transfer event in Sandbox\n   * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n   * @summary Simulate creating a sweep\n   * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n   * @summary Report whether you initiated an ACH transaction\n   * @param {SignalDecisionReportRequest} signalDecisionReportRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  signalDecisionReport(signalDecisionReportRequest, options) {\n    return exports.PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n   * @summary Evaluate a planned ACH transaction\n   * @param {SignalEvaluateRequest} signalEvaluateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  signalEvaluate(signalEvaluateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n   * @summary Report a return for an ACH transaction\n   * @param {SignalReturnReportRequest} signalReturnReportRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  signalReturnReport(signalReturnReportRequest, options) {\n    return exports.PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n   * @summary Get transaction data\n   * @param {TransactionsGetRequest} transactionsGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transactionsGet(transactionsGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n   * @summary Get streams of recurring transactions\n   * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transactionsRecurringGet(transactionsRecurringGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n   * @summary Refresh transaction data\n   * @param {TransactionsRefreshRequest} transactionsRefreshRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transactionsRefresh(transactionsRefreshRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n   * @summary Get incremental transaction updates on an Item\n   * @param {TransactionsSyncRequest} transactionsSyncRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transactionsSync(transactionsSyncRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n   * @summary Create a transfer authorization\n   * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n   * @summary Cancel a transfer\n   * @param {TransferCancelRequest} transferCancelRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferCancel(transferCancelRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/create` endpoint to initiate a new transfer.\n   * @summary Create a transfer\n   * @param {TransferCreateRequest} transferCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferCreate(transferCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n   * @summary List transfer events\n   * @param {TransferEventListRequest} transferEventListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferEventList(transferEventListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n   * @summary Sync transfer events\n   * @param {TransferEventSyncRequest} transferEventSyncRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferEventSync(transferEventSyncRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n   * @summary Retrieve a transfer\n   * @param {TransferGetRequest} transferGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferGet(transferGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n   * @summary Create a transfer intent object to invoke the Transfer UI\n   * @param {TransferIntentCreateRequest} transferIntentCreateRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferIntentCreate(transferIntentCreateRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n   * @summary Retrieve more information about a transfer intent\n   * @param {{ [key: string]: object; }} requestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferIntentGet(requestBody, options) {\n    return exports.PlaidApiFp(this.configuration).transferIntentGet(requestBody, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.\n   * @summary List transfers\n   * @param {TransferListRequest} transferListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferList(transferListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferList(transferListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n   * @summary Lists historical repayments\n   * @param {TransferRepaymentListRequest} transferRepaymentListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferRepaymentList(transferRepaymentListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n   * @summary List the returns included in a repayment\n   * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n   * @summary Retrieve a sweep\n   * @param {TransferSweepGetRequest} transferSweepGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferSweepGet(transferSweepGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n   * @summary List sweeps\n   * @param {TransferSweepListRequest} transferSweepListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  transferSweepList(transferSweepListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Fetch an e-wallet. The response includes the current balance.\n   * @summary Fetch an e-wallet\n   * @param {WalletGetRequest} walletGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  walletGet(walletGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds.\n   * @summary Execute a transaction using an e-wallet\n   * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  walletTransactionExecute(walletTransactionExecuteRequest, options) {\n    return exports.PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.\n   * @summary List e-wallet transactions\n   * @param {WalletTransactionsListRequest} walletTransactionsListRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  walletTransactionsList(walletTransactionsListRequest, options) {\n    return exports.PlaidApiFp(this.configuration).walletTransactionsList(walletTransactionsListRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n   * @summary Get webhook verification key\n   * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PlaidApi\n   */\n  webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {\n    return exports.PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then(request => request(this.axios, this.basePath));\n  }\n}\nexports.PlaidApi = PlaidApi;","map":{"version":3,"names":["axios_1","__importDefault","require","common_1","base_1","ACHClass","exports","APRAprTypeEnum","AccountAssetsVerificationStatusEnum","AccountBaseVerificationStatusEnum","AccountIdentityVerificationStatusEnum","AccountSelectionCardinality","AccountSubtype","AccountType","AssetReportTransactionTransactionTypeEnum","BankTransferDirection","BankTransferEventListRequestBankTransferTypeEnum","BankTransferEventListRequestDirectionEnum","BankTransferEventType","BankTransferNetwork","BankTransferStatus","BankTransferType","ConnectedApplicationProductDataTypesEnum","CountryCode","CreditAccountSubtype","DepositSwitchAltCreateRequestCountryCodeEnum","DepositSwitchCreateRequestCountryCodeEnum","DepositSwitchGetResponseStateEnum","DepositSwitchGetResponseSwitchMethodEnum","DepositSwitchTargetAccountAccountSubtypeEnum","DepositoryAccountSubtype","DocType","EarningsBreakdownCanonicalDescription","EmailTypeEnum","EmploymentVerificationStatus","IncidentUpdateStatusEnum","IncomeBreakdownType","IncomeVerificationPrecheckConfidence","IncomeVerificationPrecheckMilitaryInfoBranchEnum","InvestmentAccountSubtype","InvestmentTransactionTypeEnum","InvestmentTransactionSubtypeEnum","ItemUpdateTypeEnum","LinkTokenCreateRequestAuthFlowTypeEnum","LoanAccountSubtype","ModelErrorErrorTypeEnum","OverrideAccountType","PayFrequencyValue","PayPeriodDetailsPayFrequencyEnum","PaymentAmountCurrencyEnum","PaymentInitiationPaymentCreateResponseStatusEnum","PaymentInitiationPaymentReverseResponseStatusEnum","PaymentInitiationPaymentStatus","PaymentInitiationRefundStatusEnum","PaymentScheduleInterval","PaymentScheme","PaystubPayFrequency","PaystubVerificationStatus","PhoneNumberTypeEnum","PlaidErrorErrorTypeEnum","ProcessorTokenCreateRequestProcessorEnum","ProductStatusStatusEnum","ProductStatusBreakdownRefreshIntervalEnum","Products","RecurringTransactionFrequency","SandboxIncomeFireWebhookRequestVerificationStatusEnum","SandboxItemFireWebhookRequestWebhookCodeEnum","SandboxItemSetVerificationStatusRequestVerificationStatusEnum","ScopesContext","StudentLoanStatusTypeEnum","StudentRepaymentPlanTypeEnum","TotalCanonicalDescription","TransactionTransactionTypeEnum","TransactionPaymentChannelEnum","TransactionAllOfPaymentChannelEnum","TransactionBaseTransactionTypeEnum","TransactionCode","TransferAuthorizationDecisionEnum","TransferAuthorizationDecisionRationaleCodeEnum","TransferAuthorizationGuaranteeDecision","TransferAuthorizationGuaranteeDecisionRationaleCodeEnum","TransferEventListRequestTransferTypeEnum","TransferEventType","TransferIntentCreateStatusEnum","TransferIntentCreateMode","TransferIntentGetStatusEnum","TransferIntentGetAuthorizationDecisionEnum","TransferNetwork","TransferStatus","TransferSweepStatus","TransferType","VerificationAttributeTypeEnum","VerificationRefreshStatus","VerificationStatus","WalletTransactionTypeEnum","WalletTransactionAmountIsoCurrencyCodeEnum","WalletTransactionStatus","WarningWarningCodeEnum","PlaidApiAxiosParamCreator","configuration","_this","accountsBalanceGet","accountsBalanceGetRequest","options","arguments","length","undefined","__awaiter","assertParamExists","localVarPath","localVarUrlObj","URL","DUMMY_BASE_URL","baseOptions","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","setApiKeyToObject","setSearchParams","query","headersFromBaseOptions","headers","data","serializeDataIfNeeded","url","toPathString","accountsGet","accountsGetRequest","applicationGet","applicationGetRequest","assetReportAuditCopyCreate","assetReportAuditCopyCreateRequest","assetReportAuditCopyGet","assetReportAuditCopyGetRequest","assetReportAuditCopyRemove","assetReportAuditCopyRemoveRequest","assetReportCreate","assetReportCreateRequest","assetReportFilter","assetReportFilterRequest","assetReportGet","assetReportGetRequest","assetReportPdfGet","assetReportPDFGetRequest","assetReportRefresh","assetReportRefreshRequest","assetReportRemove","assetReportRemoveRequest","authGet","authGetRequest","bankTransferBalanceGet","bankTransferBalanceGetRequest","bankTransferCancel","bankTransferCancelRequest","bankTransferCreate","bankTransferCreateRequest","bankTransferEventList","bankTransferEventListRequest","bankTransferEventSync","bankTransferEventSyncRequest","bankTransferGet","bankTransferGetRequest","bankTransferList","bankTransferListRequest","bankTransferMigrateAccount","bankTransferMigrateAccountRequest","bankTransferSweepGet","bankTransferSweepGetRequest","bankTransferSweepList","bankTransferSweepListRequest","categoriesGet","body","createPaymentToken","paymentInitiationPaymentTokenCreateRequest","depositSwitchAltCreate","depositSwitchAltCreateRequest","depositSwitchCreate","depositSwitchCreateRequest","depositSwitchGet","depositSwitchGetRequest","depositSwitchTokenCreate","depositSwitchTokenCreateRequest","employersSearch","employersSearchRequest","employmentVerificationGet","employmentVerificationGetRequest","identityGet","identityGetRequest","incomeVerificationCreate","incomeVerificationCreateRequest","incomeVerificationDocumentsDownload","incomeVerificationDocumentsDownloadRequest","incomeVerificationPaystubGet","incomeVerificationPaystubGetRequest","incomeVerificationPaystubsGet","incomeVerificationPaystubsGetRequest","incomeVerificationPrecheck","incomeVerificationPrecheckRequest","incomeVerificationRefresh","incomeVerificationRefreshRequest","incomeVerificationSummaryGet","incomeVerificationSummaryGetRequest","incomeVerificationTaxformsGet","requestBody","institutionsGet","institutionsGetRequest","institutionsGetById","institutionsGetByIdRequest","institutionsSearch","institutionsSearchRequest","investmentsHoldingsGet","investmentsHoldingsGetRequest","investmentsTransactionsGet","investmentsTransactionsGetRequest","itemAccessTokenInvalidate","itemAccessTokenInvalidateRequest","itemApplicationList","itemApplicationListRequest","itemApplicationScopesUpdate","itemApplicationScopesUpdateRequest","itemCreatePublicToken","itemPublicTokenCreateRequest","itemGet","itemGetRequest","itemImport","itemImportRequest","itemPublicTokenExchange","itemPublicTokenExchangeRequest","itemRemove","itemRemoveRequest","itemWebhookUpdate","itemWebhookUpdateRequest","liabilitiesGet","liabilitiesGetRequest","linkTokenCreate","linkTokenCreateRequest","linkTokenGet","linkTokenGetRequest","paymentInitiationPaymentCreate","paymentInitiationPaymentCreateRequest","paymentInitiationPaymentGet","paymentInitiationPaymentGetRequest","paymentInitiationPaymentList","paymentInitiationPaymentListRequest","paymentInitiationPaymentReverse","paymentInitiationPaymentReverseRequest","paymentInitiationRecipientCreate","paymentInitiationRecipientCreateRequest","paymentInitiationRecipientGet","paymentInitiationRecipientGetRequest","paymentInitiationRecipientList","paymentInitiationRecipientListRequest","processorApexProcessorTokenCreate","processorApexProcessorTokenCreateRequest","processorAuthGet","processorAuthGetRequest","processorBalanceGet","processorBalanceGetRequest","processorBankTransferCreate","processorBankTransferCreateRequest","processorIdentityGet","processorIdentityGetRequest","processorStripeBankAccountTokenCreate","processorStripeBankAccountTokenCreateRequest","processorTokenCreate","processorTokenCreateRequest","sandboxBankTransferFireWebhook","sandboxBankTransferFireWebhookRequest","sandboxBankTransferSimulate","sandboxBankTransferSimulateRequest","sandboxIncomeFireWebhook","sandboxIncomeFireWebhookRequest","sandboxItemFireWebhook","sandboxItemFireWebhookRequest","sandboxItemResetLogin","sandboxItemResetLoginRequest","sandboxItemSetVerificationStatus","sandboxItemSetVerificationStatusRequest","sandboxOauthSelectAccounts","sandboxOauthSelectAccountsRequest","sandboxProcessorTokenCreate","sandboxProcessorTokenCreateRequest","sandboxPublicTokenCreate","sandboxPublicTokenCreateRequest","sandboxTransferRepaymentSimulate","sandboxTransferRepaymentSimulateRequest","sandboxTransferSimulate","sandboxTransferSimulateRequest","sandboxTransferSweepSimulate","sandboxTransferSweepSimulateRequest","signalDecisionReport","signalDecisionReportRequest","signalEvaluate","signalEvaluateRequest","signalReturnReport","signalReturnReportRequest","transactionsGet","transactionsGetRequest","transactionsRecurringGet","transactionsRecurringGetRequest","transactionsRefresh","transactionsRefreshRequest","transactionsSync","transactionsSyncRequest","transferAuthorizationCreate","transferAuthorizationCreateRequest","transferCancel","transferCancelRequest","transferCreate","transferCreateRequest","transferEventList","transferEventListRequest","transferEventSync","transferEventSyncRequest","transferGet","transferGetRequest","transferIntentCreate","transferIntentCreateRequest","transferIntentGet","transferList","transferListRequest","transferRepaymentList","transferRepaymentListRequest","transferRepaymentReturnList","transferRepaymentReturnListRequest","transferSweepGet","transferSweepGetRequest","transferSweepList","transferSweepListRequest","walletGet","walletGetRequest","walletTransactionExecute","walletTransactionExecuteRequest","walletTransactionsList","walletTransactionsListRequest","webhookVerificationKeyGet","webhookVerificationKeyGetRequest","PlaidApiFp","localVarAxiosParamCreator","localVarAxiosArgs","createRequestFunction","default","BASE_PATH","PlaidApiFactory","basePath","axios","localVarFp","then","request","PlaidApi","BaseAPI"],"sources":["C:\\Users\\pilat\\OneDrive\\Documents\\GitHub\\react\\node_modules\\plaid\\api.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * The Plaid API\n * The Plaid REST API. Please see https://plaid.com/docs/api for more details.\n *\n * The version of the OpenAPI document: 2020-09-14_1.78.2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\\\"arc\\\"` - Accounts Receivable Entry  `\\\"cbr`\\\" - Cross Border Entry  `\\\"ccd\\\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\\\"cie\\\"` - Customer Initiated Entry  `\\\"cor\\\"` - Automated Notification of Change  `\\\"ctx\\\"` - Corporate Trade Exchange  `\\\"iat\\\"` - International  `\\\"mte\\\"` - Machine Transfer Entry  `\\\"pbr\\\"` - Cross Border Entry  `\\\"pop\\\"` - Point-of-Purchase Entry  `\\\"pos\\\"` - Point-of-Sale Entry  `\\\"ppd\\\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\\\"rck\\\"` - Re-presented Check Entry  `\\\"tel\\\"` - Telephone-Initiated Entry  `\\\"web\\\"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet\n * @export\n * @enum {string}\n */\nexport enum ACHClass {\n    Arc = 'arc',\n    Cbr = 'cbr',\n    Ccd = 'ccd',\n    Cie = 'cie',\n    Cor = 'cor',\n    Ctx = 'ctx',\n    Iat = 'iat',\n    Mte = 'mte',\n    Pbr = 'pbr',\n    Pop = 'pop',\n    Pos = 'pos',\n    Ppd = 'ppd',\n    Rck = 'rck',\n    Tel = 'tel',\n    Web = 'web'\n}\n\n/**\n * Information about the APR on the account.\n * @export\n * @interface APR\n */\nexport interface APR {\n    [key: string]: object | any;\n\n    /**\n     * Annual Percentage Rate applied. \n     * @type {number}\n     * @memberof APR\n     */\n    apr_percentage: number;\n    /**\n     * The type of balance to which the APR applies.\n     * @type {string}\n     * @memberof APR\n     */\n    apr_type: APRAprTypeEnum;\n    /**\n     * Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.\n     * @type {number}\n     * @memberof APR\n     */\n    balance_subject_to_apr: number | null;\n    /**\n     * Amount of money charged due to interest from last statement.\n     * @type {number}\n     * @memberof APR\n     */\n    interest_charge_amount: number | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum APRAprTypeEnum {\n    BalanceTransferApr = 'balance_transfer_apr',\n    CashApr = 'cash_apr',\n    PurchaseApr = 'purchase_apr',\n    Special = 'special'\n}\n\n/**\n * Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`.\n * @export\n * @interface AccountAccess\n */\nexport interface AccountAccess {\n    /**\n     * The unique account identifier for this account. This value must match that returned by the data access API for this account.\n     * @type {string}\n     * @memberof AccountAccess\n     */\n    unique_id: string;\n    /**\n     * Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountAccess\n     */\n    authorized?: boolean | null;\n    /**\n     * \n     * @type {AccountProductAccessNullable}\n     * @memberof AccountAccess\n     */\n    account_product_access?: AccountProductAccessNullable | null;\n}\n/**\n * Asset information about an account\n * @export\n * @interface AccountAssets\n */\nexport interface AccountAssets {\n    /**\n     * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can\\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.\n     * @type {string}\n     * @memberof AccountAssets\n     */\n    account_id: string;\n    /**\n     * \n     * @type {AccountBalance}\n     * @memberof AccountAssets\n     */\n    balances: AccountBalance;\n    /**\n     * The last 2-4 alphanumeric characters of an account\\'s official account number. Note that the mask may be non-unique between an Item\\'s accounts, and it may also not match the mask that the bank displays to the user.\n     * @type {string}\n     * @memberof AccountAssets\n     */\n    mask: string | null;\n    /**\n     * The name of the account, either assigned by the user or by the financial institution itself\n     * @type {string}\n     * @memberof AccountAssets\n     */\n    name: string;\n    /**\n     * The official name of the account as given by the financial institution\n     * @type {string}\n     * @memberof AccountAssets\n     */\n    official_name: string | null;\n    /**\n     * \n     * @type {AccountType}\n     * @memberof AccountAssets\n     */\n    type: AccountType;\n    /**\n     * \n     * @type {AccountSubtype}\n     * @memberof AccountAssets\n     */\n    subtype: AccountSubtype | null;\n    /**\n     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   \n     * @type {string}\n     * @memberof AccountAssets\n     */\n    verification_status?: AccountAssetsVerificationStatusEnum;\n    /**\n     * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.\n     * @type {number}\n     * @memberof AccountAssets\n     */\n    days_available: number;\n    /**\n     * Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.\n     * @type {Array<AssetReportTransaction>}\n     * @memberof AccountAssets\n     */\n    transactions: Array<AssetReportTransaction>;\n    /**\n     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)\n     * @type {Array<Owner>}\n     * @memberof AccountAssets\n     */\n    owners: Array<Owner>;\n    /**\n     * Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.\n     * @type {Array<HistoricalBalance>}\n     * @memberof AccountAssets\n     */\n    historical_balances: Array<HistoricalBalance>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccountAssetsVerificationStatusEnum {\n    AutomaticallyVerified = 'automatically_verified',\n    PendingAutomaticVerification = 'pending_automatic_verification',\n    PendingManualVerification = 'pending_manual_verification',\n    ManuallyVerified = 'manually_verified',\n    VerificationExpired = 'verification_expired',\n    VerificationFailed = 'verification_failed'\n}\n\n/**\n * \n * @export\n * @interface AccountAssetsAllOf\n */\nexport interface AccountAssetsAllOf {\n    /**\n     * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.\n     * @type {number}\n     * @memberof AccountAssetsAllOf\n     */\n    days_available: number;\n    /**\n     * Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.\n     * @type {Array<AssetReportTransaction>}\n     * @memberof AccountAssetsAllOf\n     */\n    transactions: Array<AssetReportTransaction>;\n    /**\n     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)\n     * @type {Array<Owner>}\n     * @memberof AccountAssetsAllOf\n     */\n    owners: Array<Owner>;\n    /**\n     * Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.\n     * @type {Array<HistoricalBalance>}\n     * @memberof AccountAssetsAllOf\n     */\n    historical_balances: Array<HistoricalBalance>;\n}\n/**\n * A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.\n * @export\n * @interface AccountBalance\n */\nexport interface AccountBalance {\n    [key: string]: object | any;\n\n    /**\n     * The amount of funds available to be withdrawn from the account, as determined by the financial institution.  For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.  For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.  Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.  Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.  If `current` is `null` this field is guaranteed not to be `null`.\n     * @type {number}\n     * @memberof AccountBalance\n     */\n    available: number | null;\n    /**\n     * The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.  For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account\\'s balance includes both principal and any outstanding interest.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.  Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.  When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.\n     * @type {number}\n     * @memberof AccountBalance\n     */\n    current: number | null;\n    /**\n     * For `credit`-type accounts, this represents the credit limit.  For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.  In North America, this field is typically only available for `credit`-type accounts.\n     * @type {number}\n     * @memberof AccountBalance\n     */\n    limit: number | null;\n    /**\n     * The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof AccountBalance\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.\n     * @type {string}\n     * @memberof AccountBalance\n     */\n    unofficial_currency_code: string | null;\n    /**\n     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated  This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).\n     * @type {string}\n     * @memberof AccountBalance\n     */\n    last_updated_datetime?: string | null;\n}\n/**\n * A single account at a financial institution.\n * @export\n * @interface AccountBase\n */\nexport interface AccountBase {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can\\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.\n     * @type {string}\n     * @memberof AccountBase\n     */\n    account_id: string;\n    /**\n     * \n     * @type {AccountBalance}\n     * @memberof AccountBase\n     */\n    balances: AccountBalance;\n    /**\n     * The last 2-4 alphanumeric characters of an account\\'s official account number. Note that the mask may be non-unique between an Item\\'s accounts, and it may also not match the mask that the bank displays to the user.\n     * @type {string}\n     * @memberof AccountBase\n     */\n    mask: string | null;\n    /**\n     * The name of the account, either assigned by the user or by the financial institution itself\n     * @type {string}\n     * @memberof AccountBase\n     */\n    name: string;\n    /**\n     * The official name of the account as given by the financial institution\n     * @type {string}\n     * @memberof AccountBase\n     */\n    official_name: string | null;\n    /**\n     * \n     * @type {AccountType}\n     * @memberof AccountBase\n     */\n    type: AccountType;\n    /**\n     * \n     * @type {AccountSubtype}\n     * @memberof AccountBase\n     */\n    subtype: AccountSubtype | null;\n    /**\n     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   \n     * @type {string}\n     * @memberof AccountBase\n     */\n    verification_status?: AccountBaseVerificationStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccountBaseVerificationStatusEnum {\n    AutomaticallyVerified = 'automatically_verified',\n    PendingAutomaticVerification = 'pending_automatic_verification',\n    PendingManualVerification = 'pending_manual_verification',\n    ManuallyVerified = 'manually_verified',\n    VerificationExpired = 'verification_expired',\n    VerificationFailed = 'verification_failed'\n}\n\n/**\n * Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.\n * @export\n * @interface AccountFilter\n */\nexport interface AccountFilter {\n    /**\n     * A list of account subtypes to be filtered.\n     * @type {Array<string>}\n     * @memberof AccountFilter\n     */\n    depository?: Array<string>;\n    /**\n     * A list of account subtypes to be filtered.\n     * @type {Array<string>}\n     * @memberof AccountFilter\n     */\n    credit?: Array<string>;\n    /**\n     * A list of account subtypes to be filtered.\n     * @type {Array<string>}\n     * @memberof AccountFilter\n     */\n    loan?: Array<string>;\n    /**\n     * A list of account subtypes to be filtered.\n     * @type {Array<string>}\n     * @memberof AccountFilter\n     */\n    investment?: Array<string>;\n}\n/**\n * The `account_filters` specified in the original call to `/link/token/create`. \n * @export\n * @interface AccountFiltersResponse\n */\nexport interface AccountFiltersResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {DepositoryFilter}\n     * @memberof AccountFiltersResponse\n     */\n    depository?: DepositoryFilter;\n    /**\n     * \n     * @type {CreditFilter}\n     * @memberof AccountFiltersResponse\n     */\n    credit?: CreditFilter;\n    /**\n     * \n     * @type {LoanFilter}\n     * @memberof AccountFiltersResponse\n     */\n    loan?: LoanFilter;\n    /**\n     * \n     * @type {InvestmentFilter}\n     * @memberof AccountFiltersResponse\n     */\n    investment?: InvestmentFilter;\n}\n/**\n * Identity information about an account\n * @export\n * @interface AccountIdentity\n */\nexport interface AccountIdentity {\n    /**\n     * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can\\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.\n     * @type {string}\n     * @memberof AccountIdentity\n     */\n    account_id: string;\n    /**\n     * \n     * @type {AccountBalance}\n     * @memberof AccountIdentity\n     */\n    balances: AccountBalance;\n    /**\n     * The last 2-4 alphanumeric characters of an account\\'s official account number. Note that the mask may be non-unique between an Item\\'s accounts, and it may also not match the mask that the bank displays to the user.\n     * @type {string}\n     * @memberof AccountIdentity\n     */\n    mask: string | null;\n    /**\n     * The name of the account, either assigned by the user or by the financial institution itself\n     * @type {string}\n     * @memberof AccountIdentity\n     */\n    name: string;\n    /**\n     * The official name of the account as given by the financial institution\n     * @type {string}\n     * @memberof AccountIdentity\n     */\n    official_name: string | null;\n    /**\n     * \n     * @type {AccountType}\n     * @memberof AccountIdentity\n     */\n    type: AccountType;\n    /**\n     * \n     * @type {AccountSubtype}\n     * @memberof AccountIdentity\n     */\n    subtype: AccountSubtype | null;\n    /**\n     * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   \n     * @type {string}\n     * @memberof AccountIdentity\n     */\n    verification_status?: AccountIdentityVerificationStatusEnum;\n    /**\n     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)\n     * @type {Array<Owner>}\n     * @memberof AccountIdentity\n     */\n    owners: Array<Owner>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccountIdentityVerificationStatusEnum {\n    AutomaticallyVerified = 'automatically_verified',\n    PendingAutomaticVerification = 'pending_automatic_verification',\n    PendingManualVerification = 'pending_manual_verification',\n    ManuallyVerified = 'manually_verified',\n    VerificationExpired = 'verification_expired',\n    VerificationFailed = 'verification_failed'\n}\n\n/**\n * \n * @export\n * @interface AccountIdentityAllOf\n */\nexport interface AccountIdentityAllOf {\n    /**\n     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)\n     * @type {Array<Owner>}\n     * @memberof AccountIdentityAllOf\n     */\n    owners: Array<Owner>;\n}\n/**\n * Allow the application to access specific products on this account\n * @export\n * @interface AccountProductAccess\n */\nexport interface AccountProductAccess {\n    /**\n     * Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccess\n     */\n    account_data?: boolean | null;\n    /**\n     * Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccess\n     */\n    statements?: boolean | null;\n    /**\n     * Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccess\n     */\n    tax_documents?: boolean | null;\n}\n/**\n * Allow the application to access specific products on this account\n * @export\n * @interface AccountProductAccessNullable\n */\nexport interface AccountProductAccessNullable {\n    /**\n     * Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccessNullable\n     */\n    account_data?: boolean | null;\n    /**\n     * Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccessNullable\n     */\n    statements?: boolean | null;\n    /**\n     * Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof AccountProductAccessNullable\n     */\n    tax_documents?: boolean | null;\n}\n/**\n * The application requires that accounts be limited to a specific cardinality. `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts. `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account. `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select\n * @export\n * @enum {string}\n */\nexport enum AccountSelectionCardinality {\n    SingleSelect = 'SINGLE_SELECT',\n    MultiSelect = 'MULTI_SELECT',\n    All = 'ALL'\n}\n\n/**\n * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nexport enum AccountSubtype {\n    _401a = '401a',\n    _401k = '401k',\n    _403B = '403B',\n    _457b = '457b',\n    _529 = '529',\n    Brokerage = 'brokerage',\n    CashIsa = 'cash isa',\n    EducationSavingsAccount = 'education savings account',\n    Ebt = 'ebt',\n    FixedAnnuity = 'fixed annuity',\n    Gic = 'gic',\n    HealthReimbursementArrangement = 'health reimbursement arrangement',\n    Hsa = 'hsa',\n    Isa = 'isa',\n    Ira = 'ira',\n    Lif = 'lif',\n    LifeInsurance = 'life insurance',\n    Lira = 'lira',\n    Lrif = 'lrif',\n    Lrsp = 'lrsp',\n    NonTaxableBrokerageAccount = 'non-taxable brokerage account',\n    Other = 'other',\n    OtherInsurance = 'other insurance',\n    OtherAnnuity = 'other annuity',\n    Prif = 'prif',\n    Rdsp = 'rdsp',\n    Resp = 'resp',\n    Rlif = 'rlif',\n    Rrif = 'rrif',\n    Pension = 'pension',\n    ProfitSharingPlan = 'profit sharing plan',\n    Retirement = 'retirement',\n    Roth = 'roth',\n    Roth401k = 'roth 401k',\n    Rrsp = 'rrsp',\n    SepIra = 'sep ira',\n    SimpleIra = 'simple ira',\n    Sipp = 'sipp',\n    StockPlan = 'stock plan',\n    ThriftSavingsPlan = 'thrift savings plan',\n    Tfsa = 'tfsa',\n    Trust = 'trust',\n    Ugma = 'ugma',\n    Utma = 'utma',\n    VariableAnnuity = 'variable annuity',\n    CreditCard = 'credit card',\n    Paypal = 'paypal',\n    Cd = 'cd',\n    Checking = 'checking',\n    Savings = 'savings',\n    MoneyMarket = 'money market',\n    Prepaid = 'prepaid',\n    Auto = 'auto',\n    Business = 'business',\n    Commercial = 'commercial',\n    Construction = 'construction',\n    Consumer = 'consumer',\n    HomeEquity = 'home equity',\n    Loan = 'loan',\n    Mortgage = 'mortgage',\n    Overdraft = 'overdraft',\n    LineOfCredit = 'line of credit',\n    Student = 'student',\n    CashManagement = 'cash management',\n    Keogh = 'keogh',\n    MutualFund = 'mutual fund',\n    Recurring = 'recurring',\n    Rewards = 'rewards',\n    SafeDeposit = 'safe deposit',\n    Sarsep = 'sarsep',\n    Payroll = 'payroll',\n    Null = 'null'\n}\n\n/**\n * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `brokerage`: An investment account. Used for `/assets/` endpoints only; other endpoints use `investment`.  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nexport enum AccountType {\n    Investment = 'investment',\n    Credit = 'credit',\n    Depository = 'depository',\n    Loan = 'loan',\n    Brokerage = 'brokerage',\n    Other = 'other'\n}\n\n/**\n * AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get`\n * @export\n * @interface AccountsBalanceGetRequest\n */\nexport interface AccountsBalanceGetRequest {\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof AccountsBalanceGetRequest\n     */\n    access_token: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AccountsBalanceGetRequest\n     */\n    secret?: string;\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AccountsBalanceGetRequest\n     */\n    client_id?: string;\n    /**\n     * \n     * @type {AccountsBalanceGetRequestOptions}\n     * @memberof AccountsBalanceGetRequest\n     */\n    options?: AccountsBalanceGetRequestOptions;\n}\n/**\n * An optional object to filter `/accounts/balance/get` results.\n * @export\n * @interface AccountsBalanceGetRequestOptions\n */\nexport interface AccountsBalanceGetRequestOptions {\n    /**\n     * A list of `account_ids` to retrieve for the Item. The default value is `null`.  Note: An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof AccountsBalanceGetRequestOptions\n     */\n    account_ids?: Array<string>;\n    /**\n     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.  If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.  This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.\n     * @type {string}\n     * @memberof AccountsBalanceGetRequestOptions\n     */\n    min_last_updated_datetime?: string;\n}\n/**\n * AccountsGetRequest defines the request schema for `/accounts/get`\n * @export\n * @interface AccountsGetRequest\n */\nexport interface AccountsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AccountsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AccountsGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof AccountsGetRequest\n     */\n    access_token: string;\n    /**\n     * \n     * @type {AccountsGetRequestOptions}\n     * @memberof AccountsGetRequest\n     */\n    options?: AccountsGetRequestOptions;\n}\n/**\n * An optional object to filter `/accounts/get` results.\n * @export\n * @interface AccountsGetRequestOptions\n */\nexport interface AccountsGetRequestOptions {\n    /**\n     * An array of `account_ids` to retrieve for the Account.\n     * @type {Array<string>}\n     * @memberof AccountsGetRequestOptions\n     */\n    account_ids?: Array<string>;\n}\n/**\n * AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`.\n * @export\n * @interface AccountsGetResponse\n */\nexport interface AccountsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of financial institution accounts associated with the Item. If `/accounts/balance/get` was called, each account will include real-time balance information.\n     * @type {Array<AccountBase>}\n     * @memberof AccountsGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * \n     * @type {Item}\n     * @memberof AccountsGetResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AccountsGetResponse\n     */\n    request_id: string;\n}\n/**\n * A physical mailing address.\n * @export\n * @interface Address\n */\nexport interface Address {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {AddressData}\n     * @memberof Address\n     */\n    data: AddressData;\n    /**\n     * When `true`, identifies the address as the primary address on an account.\n     * @type {boolean}\n     * @memberof Address\n     */\n    primary?: boolean;\n}\n/**\n * Data about the components comprising an address.\n * @export\n * @interface AddressData\n */\nexport interface AddressData {\n    [key: string]: object | any;\n\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof AddressData\n     */\n    city: string;\n    /**\n     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof AddressData\n     */\n    region: string | null;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof AddressData\n     */\n    street: string;\n    /**\n     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.\n     * @type {string}\n     * @memberof AddressData\n     */\n    postal_code: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof AddressData\n     */\n    country: string | null;\n}\n/**\n * Data about the components comprising an address.\n * @export\n * @interface AddressDataNullable\n */\nexport interface AddressDataNullable {\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof AddressDataNullable\n     */\n    city: string;\n    /**\n     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof AddressDataNullable\n     */\n    region: string | null;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof AddressDataNullable\n     */\n    street: string;\n    /**\n     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.\n     * @type {string}\n     * @memberof AddressDataNullable\n     */\n    postal_code: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof AddressDataNullable\n     */\n    country: string | null;\n}\n/**\n * A physical mailing address.\n * @export\n * @interface AddressNullable\n */\nexport interface AddressNullable {\n    /**\n     * \n     * @type {AddressData}\n     * @memberof AddressNullable\n     */\n    data: AddressData;\n    /**\n     * When `true`, identifies the address as the primary address on an account.\n     * @type {boolean}\n     * @memberof AddressNullable\n     */\n    primary?: boolean;\n}\n/**\n * Metadata about the application\n * @export\n * @interface Application\n */\nexport interface Application {\n    /**\n     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.\n     * @type {string}\n     * @memberof Application\n     */\n    application_id: string;\n    /**\n     * The name of the application\n     * @type {string}\n     * @memberof Application\n     */\n    name: string;\n    /**\n     * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.\n     * @type {string}\n     * @memberof Application\n     * @deprecated\n     */\n    created_at?: string;\n    /**\n     * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.\n     * @type {string}\n     * @memberof Application\n     */\n    join_date: string;\n    /**\n     * A URL that links to the application logo image.\n     * @type {string}\n     * @memberof Application\n     */\n    logo_url: string | null;\n    /**\n     * The URL for the application\\'s website\n     * @type {string}\n     * @memberof Application\n     */\n    application_url: string | null;\n    /**\n     * A string provided by the connected app stating why they use their respective enabled products.\n     * @type {string}\n     * @memberof Application\n     */\n    reason_for_access: string | null;\n}\n/**\n * ApplicationGetRequest defines the schema for `/application/get`\n * @export\n * @interface ApplicationGetRequest\n */\nexport interface ApplicationGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ApplicationGetRequest\n     */\n    client_id: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ApplicationGetRequest\n     */\n    secret: string;\n    /**\n     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.\n     * @type {string}\n     * @memberof ApplicationGetRequest\n     */\n    application_id: string;\n}\n/**\n * ApplicationGetResponse defines the response schema for `/application/get`\n * @export\n * @interface ApplicationGetResponse\n */\nexport interface ApplicationGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ApplicationGetResponse\n     */\n    request_id: string;\n    /**\n     * \n     * @type {Application}\n     * @memberof ApplicationGetResponse\n     */\n    application: Application;\n}\n/**\n * An object representing an Asset Report\n * @export\n * @interface AssetReport\n */\nexport interface AssetReport {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.\n     * @type {string}\n     * @memberof AssetReport\n     */\n    asset_report_id: string;\n    /**\n     * An identifier you determine and submit for the Asset Report.\n     * @type {string}\n     * @memberof AssetReport\n     */\n    client_report_id: string | null;\n    /**\n     * The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \\\"2018-04-12T03:32:11Z\\\").\n     * @type {string}\n     * @memberof AssetReport\n     */\n    date_generated: string;\n    /**\n     * The duration of transaction history you requested\n     * @type {number}\n     * @memberof AssetReport\n     */\n    days_requested: number;\n    /**\n     * \n     * @type {AssetReportUser}\n     * @memberof AssetReport\n     */\n    user: AssetReportUser;\n    /**\n     * Data returned by Plaid about each of the Items included in the Asset Report.\n     * @type {Array<AssetReportItem>}\n     * @memberof AssetReport\n     */\n    items: Array<AssetReportItem>;\n}\n/**\n * AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get`\n * @export\n * @interface AssetReportAuditCopyCreateRequest\n */\nexport interface AssetReportAuditCopyCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateRequest\n     */\n    secret?: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateRequest\n     */\n    asset_report_token: string;\n    /**\n     * The `auditor_id` of the third party with whom you would like to share the Asset Report.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateRequest\n     */\n    auditor_id: string;\n}\n/**\n * AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get`\n * @export\n * @interface AssetReportAuditCopyCreateResponse\n */\nexport interface AssetReportAuditCopyCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateResponse\n     */\n    audit_copy_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportAuditCopyCreateResponse\n     */\n    request_id: string;\n}\n/**\n * AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get`\n * @export\n * @interface AssetReportAuditCopyGetRequest\n */\nexport interface AssetReportAuditCopyGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyGetRequest\n     */\n    secret?: string;\n    /**\n     * The `audit_copy_token` granting access to the Audit Copy you would like to get.\n     * @type {string}\n     * @memberof AssetReportAuditCopyGetRequest\n     */\n    audit_copy_token: string;\n}\n/**\n * AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove`\n * @export\n * @interface AssetReportAuditCopyRemoveRequest\n */\nexport interface AssetReportAuditCopyRemoveRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyRemoveRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportAuditCopyRemoveRequest\n     */\n    secret?: string;\n    /**\n     * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.\n     * @type {string}\n     * @memberof AssetReportAuditCopyRemoveRequest\n     */\n    audit_copy_token: string;\n}\n/**\n * AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove`\n * @export\n * @interface AssetReportAuditCopyRemoveResponse\n */\nexport interface AssetReportAuditCopyRemoveResponse {\n    [key: string]: object | any;\n\n    /**\n     * `true` if the Audit Copy was successfully removed.\n     * @type {boolean}\n     * @memberof AssetReportAuditCopyRemoveResponse\n     */\n    removed: boolean;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportAuditCopyRemoveResponse\n     */\n    request_id: string;\n}\n/**\n * AssetReportCreateRequest defines the request schema for `/asset_report/create`\n * @export\n * @interface AssetReportCreateRequest\n */\nexport interface AssetReportCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportCreateRequest\n     */\n    secret?: string;\n    /**\n     * An array of access tokens corresponding to the Items that will be included in the report. The `assets` product must have been initialized for the Items during link; the Assets product cannot be added after initialization.\n     * @type {Array<string>}\n     * @memberof AssetReportCreateRequest\n     */\n    access_tokens: Array<string>;\n    /**\n     * The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.\n     * @type {number}\n     * @memberof AssetReportCreateRequest\n     */\n    days_requested: number;\n    /**\n     * \n     * @type {AssetReportCreateRequestOptions}\n     * @memberof AssetReportCreateRequest\n     */\n    options?: AssetReportCreateRequestOptions;\n}\n/**\n * An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae\\'s Day 1 Certainty program.\n * @export\n * @interface AssetReportCreateRequestOptions\n */\nexport interface AssetReportCreateRequestOptions {\n    /**\n     * Client-generated identifier, which can be used by lenders to track loan applications.\n     * @type {string}\n     * @memberof AssetReportCreateRequestOptions\n     */\n    client_report_id?: string | null;\n    /**\n     * URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready.\n     * @type {string}\n     * @memberof AssetReportCreateRequestOptions\n     */\n    webhook?: string | null;\n    /**\n     * \n     * @type {AssetReportUser}\n     * @memberof AssetReportCreateRequestOptions\n     */\n    user?: AssetReportUser;\n}\n/**\n * AssetReportCreateResponse defines the response schema for `/asset_report/create`\n * @export\n * @interface AssetReportCreateResponse\n */\nexport interface AssetReportCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportCreateResponse\n     */\n    asset_report_token: string;\n    /**\n     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.\n     * @type {string}\n     * @memberof AssetReportCreateResponse\n     */\n    asset_report_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportCreateResponse\n     */\n    request_id: string;\n}\n/**\n * AssetReportFilterRequest defines the request schema for `/asset_report/filter`\n * @export\n * @interface AssetReportFilterRequest\n */\nexport interface AssetReportFilterRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportFilterRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportFilterRequest\n     */\n    secret?: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportFilterRequest\n     */\n    asset_report_token: string;\n    /**\n     * The accounts to exclude from the Asset Report, identified by `account_id`.\n     * @type {Array<string>}\n     * @memberof AssetReportFilterRequest\n     */\n    account_ids_to_exclude: Array<string>;\n}\n/**\n * AssetReportFilterResponse defines the response schema for `/asset_report/filter`\n * @export\n * @interface AssetReportFilterResponse\n */\nexport interface AssetReportFilterResponse {\n    [key: string]: object | any;\n\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportFilterResponse\n     */\n    asset_report_token: string;\n    /**\n     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.\n     * @type {string}\n     * @memberof AssetReportFilterResponse\n     */\n    asset_report_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportFilterResponse\n     */\n    request_id: string;\n}\n/**\n * AssetReportGetRequest defines the request schema for `/asset_report/get`\n * @export\n * @interface AssetReportGetRequest\n */\nexport interface AssetReportGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportGetRequest\n     */\n    secret?: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportGetRequest\n     */\n    asset_report_token: string;\n    /**\n     * `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted.\n     * @type {boolean}\n     * @memberof AssetReportGetRequest\n     */\n    include_insights?: boolean;\n}\n/**\n * AssetReportGetResponse defines the response schema for `/asset_report/get`\n * @export\n * @interface AssetReportGetResponse\n */\nexport interface AssetReportGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {AssetReport}\n     * @memberof AssetReportGetResponse\n     */\n    report: AssetReport;\n    /**\n     * If the Asset Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing\n     * @type {Array<Warning>}\n     * @memberof AssetReportGetResponse\n     */\n    warnings: Array<Warning>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportGetResponse\n     */\n    request_id: string;\n}\n/**\n * A representation of an Item within an Asset Report.\n * @export\n * @interface AssetReportItem\n */\nexport interface AssetReportItem {\n    [key: string]: object | any;\n\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof AssetReportItem\n     */\n    item_id: string;\n    /**\n     * The full financial institution name associated with the Item.\n     * @type {string}\n     * @memberof AssetReportItem\n     */\n    institution_name: string;\n    /**\n     * The id of the financial institution associated with the Item.\n     * @type {string}\n     * @memberof AssetReportItem\n     */\n    institution_id: string;\n    /**\n     * The date and time when this Itemâ€™s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.\n     * @type {string}\n     * @memberof AssetReportItem\n     */\n    date_last_updated: string;\n    /**\n     * Data about each of the accounts open on the Item.\n     * @type {Array<AccountAssets>}\n     * @memberof AssetReportItem\n     */\n    accounts: Array<AccountAssets>;\n}\n/**\n * AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get`\n * @export\n * @interface AssetReportPDFGetRequest\n */\nexport interface AssetReportPDFGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportPDFGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportPDFGetRequest\n     */\n    secret?: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportPDFGetRequest\n     */\n    asset_report_token: string;\n}\n/**\n * AssetReportRefreshRequest defines the request schema for `/asset_report/refresh`\n * @export\n * @interface AssetReportRefreshRequest\n */\nexport interface AssetReportRefreshRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportRefreshRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportRefreshRequest\n     */\n    secret?: string;\n    /**\n     * The `asset_report_token` returned by the original call to `/asset_report/create`\n     * @type {string}\n     * @memberof AssetReportRefreshRequest\n     */\n    asset_report_token: string;\n    /**\n     * The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used.\n     * @type {number}\n     * @memberof AssetReportRefreshRequest\n     */\n    days_requested?: number | null;\n    /**\n     * \n     * @type {AssetReportRefreshRequestOptions}\n     * @memberof AssetReportRefreshRequest\n     */\n    options?: AssetReportRefreshRequestOptions;\n}\n/**\n * An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used.\n * @export\n * @interface AssetReportRefreshRequestOptions\n */\nexport interface AssetReportRefreshRequestOptions {\n    /**\n     * Client-generated identifier, which can be used by lenders to track loan applications.\n     * @type {string}\n     * @memberof AssetReportRefreshRequestOptions\n     */\n    client_report_id?: string | null;\n    /**\n     * URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready.\n     * @type {string}\n     * @memberof AssetReportRefreshRequestOptions\n     */\n    webhook?: string | null;\n    /**\n     * \n     * @type {AssetReportUser}\n     * @memberof AssetReportRefreshRequestOptions\n     */\n    user?: AssetReportUser;\n}\n/**\n * AssetReportRefreshResponse defines the response schema for `/asset_report/refresh`\n * @export\n * @interface AssetReportRefreshResponse\n */\nexport interface AssetReportRefreshResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.\n     * @type {string}\n     * @memberof AssetReportRefreshResponse\n     */\n    asset_report_id: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportRefreshResponse\n     */\n    asset_report_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportRefreshResponse\n     */\n    request_id: string;\n}\n/**\n * AssetReportRemoveRequest defines the request schema for `/asset_report/remove`\n * @export\n * @interface AssetReportRemoveRequest\n */\nexport interface AssetReportRemoveRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportRemoveRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AssetReportRemoveRequest\n     */\n    secret?: string;\n    /**\n     * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.\n     * @type {string}\n     * @memberof AssetReportRemoveRequest\n     */\n    asset_report_token: string;\n}\n/**\n * AssetReportRemoveResponse defines the response schema for `/asset_report/remove`\n * @export\n * @interface AssetReportRemoveResponse\n */\nexport interface AssetReportRemoveResponse {\n    [key: string]: object | any;\n\n    /**\n     * `true` if the Asset Report was successfully removed.\n     * @type {boolean}\n     * @memberof AssetReportRemoveResponse\n     */\n    removed: boolean;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AssetReportRemoveResponse\n     */\n    request_id: string;\n}\n/**\n * A transaction on the asset report\n * @export\n * @interface AssetReportTransaction\n */\nexport interface AssetReportTransaction {\n    /**\n     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. \n     * @type {string}\n     * @memberof AssetReportTransaction\n     * @deprecated\n     */\n    transaction_type?: AssetReportTransactionTransactionTypeEnum;\n    /**\n     * The ID of a posted transaction\\'s associated pending transaction, where applicable.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    pending_transaction_id?: string | null;\n    /**\n     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    category_id?: string | null;\n    /**\n     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {Array<string>}\n     * @memberof AssetReportTransaction\n     */\n    category?: Array<string> | null;\n    /**\n     * \n     * @type {Location}\n     * @memberof AssetReportTransaction\n     */\n    location?: Location;\n    /**\n     * \n     * @type {PaymentMeta}\n     * @memberof AssetReportTransaction\n     */\n    payment_meta?: PaymentMeta;\n    /**\n     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    account_owner?: string | null;\n    /**\n     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    name?: string;\n    /**\n     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    original_description: string | null;\n    /**\n     * The ID of the account in which this transaction occurred.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    account_id: string;\n    /**\n     * The settled value of the transaction, denominated in the account\\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.\n     * @type {number}\n     * @memberof AssetReportTransaction\n     */\n    amount: number;\n    /**\n     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    unofficial_currency_code: string | null;\n    /**\n     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    date: string;\n    /**\n     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.\n     * @type {boolean}\n     * @memberof AssetReportTransaction\n     */\n    pending: boolean;\n    /**\n     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    transaction_id: string;\n    /**\n     * The merchant name, as extracted by Plaid from the `name` field.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    merchant_name?: string | null;\n    /**\n     * The check number of the transaction. This field is only populated for check transactions.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    check_number?: string | null;\n    /**\n     * The date on which the transaction took place, in IS0 8601 format.\n     * @type {string}\n     * @memberof AssetReportTransaction\n     */\n    date_transacted?: string | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AssetReportTransactionTransactionTypeEnum {\n    Digital = 'digital',\n    Place = 'place',\n    Special = 'special',\n    Unresolved = 'unresolved'\n}\n\n/**\n * \n * @export\n * @interface AssetReportTransactionAllOf\n */\nexport interface AssetReportTransactionAllOf {\n    /**\n     * The date on which the transaction took place, in IS0 8601 format.\n     * @type {string}\n     * @memberof AssetReportTransactionAllOf\n     */\n    date_transacted?: string | null;\n}\n/**\n * The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program.\n * @export\n * @interface AssetReportUser\n */\nexport interface AssetReportUser {\n    [key: string]: object | any;\n\n    /**\n     * An identifier you determine and submit for the user.\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    client_user_id?: string | null;\n    /**\n     * The user\\'s first name. Required for the Fannie Mae Day 1 Certaintyâ„¢ program.\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    first_name?: string | null;\n    /**\n     * The user\\'s middle name\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    middle_name?: string | null;\n    /**\n     * The user\\'s last name.  Required for the Fannie Mae Day 1 Certaintyâ„¢ program.\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    last_name?: string | null;\n    /**\n     * The user\\'s Social Security Number. Required for the Fannie Mae Day 1 Certaintyâ„¢ program.  Format: \\\"ddd-dd-dddd\\\"\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    ssn?: string | null;\n    /**\n     * The user\\'s phone number, in E.164 format: +{countrycode}{number}. For example: \\\"+14151234567\\\". Phone numbers provided in other formats will be parsed on a best-effort basis.\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    phone_number?: string | null;\n    /**\n     * The user\\'s email address.\n     * @type {string}\n     * @memberof AssetReportUser\n     */\n    email?: string | null;\n}\n/**\n * Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`.\n * @export\n * @interface AssetsErrorWebhook\n */\nexport interface AssetsErrorWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ASSETS`\n     * @type {string}\n     * @memberof AssetsErrorWebhook\n     */\n    webhook_type: string;\n    /**\n     * `ERROR`\n     * @type {string}\n     * @memberof AssetsErrorWebhook\n     */\n    webhook_code: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof AssetsErrorWebhook\n     */\n    error: PlaidError;\n    /**\n     * The ID associated with the Asset Report.\n     * @type {string}\n     * @memberof AssetsErrorWebhook\n     */\n    asset_report_id: string;\n}\n/**\n * Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, youâ€™ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`.\n * @export\n * @interface AssetsProductReadyWebhook\n */\nexport interface AssetsProductReadyWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ASSETS`\n     * @type {string}\n     * @memberof AssetsProductReadyWebhook\n     */\n    webhook_type: string;\n    /**\n     * `PRODUCT_READY`\n     * @type {string}\n     * @memberof AssetsProductReadyWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `asset_report_id` that can be provided to `/asset_report/get` to retrieve the Asset Report.\n     * @type {string}\n     * @memberof AssetsProductReadyWebhook\n     */\n    asset_report_id: string;\n}\n/**\n * An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty.\n * @export\n * @interface AuthGetNumbers\n */\nexport interface AuthGetNumbers {\n    [key: string]: object | any;\n\n    /**\n     * An array of ACH numbers identifying accounts.\n     * @type {Array<NumbersACH>}\n     * @memberof AuthGetNumbers\n     */\n    ach: Array<NumbersACH>;\n    /**\n     * An array of EFT numbers identifying accounts.\n     * @type {Array<NumbersEFT>}\n     * @memberof AuthGetNumbers\n     */\n    eft: Array<NumbersEFT>;\n    /**\n     * An array of IBAN numbers identifying accounts.\n     * @type {Array<NumbersInternational>}\n     * @memberof AuthGetNumbers\n     */\n    international: Array<NumbersInternational>;\n    /**\n     * An array of BACS numbers identifying accounts.\n     * @type {Array<NumbersBACS>}\n     * @memberof AuthGetNumbers\n     */\n    bacs: Array<NumbersBACS>;\n}\n/**\n * AuthGetRequest defines the request schema for `/auth/get`\n * @export\n * @interface AuthGetRequest\n */\nexport interface AuthGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof AuthGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof AuthGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof AuthGetRequest\n     */\n    access_token: string;\n    /**\n     * \n     * @type {AuthGetRequestOptions}\n     * @memberof AuthGetRequest\n     */\n    options?: AuthGetRequestOptions;\n}\n/**\n * An optional object to filter `/auth/get` results.\n * @export\n * @interface AuthGetRequestOptions\n */\nexport interface AuthGetRequestOptions {\n    /**\n     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof AuthGetRequestOptions\n     */\n    account_ids?: Array<string>;\n}\n/**\n * AuthGetResponse defines the response schema for `/auth/get`\n * @export\n * @interface AuthGetResponse\n */\nexport interface AuthGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * The `accounts` for which numbers are being retrieved.\n     * @type {Array<AccountBase>}\n     * @memberof AuthGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * \n     * @type {AuthGetNumbers}\n     * @memberof AuthGetResponse\n     */\n    numbers: AuthGetNumbers;\n    /**\n     * \n     * @type {Item}\n     * @memberof AuthGetResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof AuthGetResponse\n     */\n    request_id: string;\n}\n/**\n * Metadata that captures information about the Auth features of an institution.\n * @export\n * @interface AuthMetadata\n */\nexport interface AuthMetadata {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {AuthSupportedMethods}\n     * @memberof AuthMetadata\n     */\n    supported_methods: AuthSupportedMethods | null;\n}\n/**\n * Metadata specifically related to which auth methods an institution supports.\n * @export\n * @interface AuthSupportedMethods\n */\nexport interface AuthSupportedMethods {\n    [key: string]: object | any;\n\n    /**\n     * Indicates if instant auth is supported.\n     * @type {boolean}\n     * @memberof AuthSupportedMethods\n     */\n    instant_auth: boolean;\n    /**\n     * Indicates if instant match is supported.\n     * @type {boolean}\n     * @memberof AuthSupportedMethods\n     */\n    instant_match: boolean;\n    /**\n     * Indicates if automated microdeposits are supported.\n     * @type {boolean}\n     * @memberof AuthSupportedMethods\n     */\n    automated_micro_deposits: boolean;\n}\n/**\n * Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use.\n * @export\n * @interface AutomaticallyVerifiedWebhook\n */\nexport interface AutomaticallyVerifiedWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `AUTH`\n     * @type {string}\n     * @memberof AutomaticallyVerifiedWebhook\n     */\n    webhook_type: string;\n    /**\n     * `AUTOMATICALLY_VERIFIED`\n     * @type {string}\n     * @memberof AutomaticallyVerifiedWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `account_id` of the account associated with the webhook\n     * @type {string}\n     * @memberof AutomaticallyVerifiedWebhook\n     */\n    account_id: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof AutomaticallyVerifiedWebhook\n     */\n    item_id: string;\n}\n/**\n * The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: \\\"R01\\\", \\\"R02\\\", \\\"R03\\\", \\\"R04\\\", \\\"R06\\\", \\\"R08\\\",  \\\"R09\\\", \\\"R13\\\", \\\"R16\\\", \\\"R17\\\", \\\"R20\\\", \\\"R23\\\". These returns have a turnaround time of 2 banking days.\n * @export\n * @interface BankInitiatedReturnRisk\n */\nexport interface BankInitiatedReturnRisk {\n    /**\n     * A score from 0-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.\n     * @type {number}\n     * @memberof BankInitiatedReturnRisk\n     */\n    score: number;\n    /**\n     * In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%   3: Predicted bank-initiated return incidence rate between 1.5% - 3%   4: Predicted bank-initiated return incidence rate between 3% - 5%   5: Predicted bank-initiated return incidence rate between 5% - 10%   6: Predicted bank-initiated return incidence rate between 10% - 15%   7: Predicted bank-initiated return incidence rate between 15% and 50%   8: Predicted bank-initiated return incidence rate greater than 50% \n     * @type {number}\n     * @memberof BankInitiatedReturnRisk\n     */\n    risk_tier: number;\n}\n/**\n * Represents a bank transfer within the Bank Transfers API.\n * @export\n * @interface BankTransfer\n */\nexport interface BankTransfer {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    id: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof BankTransfer\n     */\n    ach_class: ACHClass;\n    /**\n     * The account ID that should be credited/debited for this bank transfer.\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    account_id: string;\n    /**\n     * \n     * @type {BankTransferType}\n     * @memberof BankTransfer\n     */\n    type: BankTransferType;\n    /**\n     * \n     * @type {BankTransferUser}\n     * @memberof BankTransfer\n     */\n    user: BankTransferUser;\n    /**\n     * The amount of the bank transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    amount: string;\n    /**\n     * The currency of the transfer amount, e.g. \\\"USD\\\"\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    iso_currency_code: string;\n    /**\n     * The description of the transfer.\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    description: string;\n    /**\n     * The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    created: string;\n    /**\n     * \n     * @type {BankTransferStatus}\n     * @memberof BankTransfer\n     */\n    status: BankTransferStatus;\n    /**\n     * \n     * @type {BankTransferNetwork}\n     * @memberof BankTransfer\n     */\n    network: BankTransferNetwork;\n    /**\n     * When `true`, you can still cancel this bank transfer.\n     * @type {boolean}\n     * @memberof BankTransfer\n     */\n    cancellable: boolean;\n    /**\n     * \n     * @type {BankTransferFailure}\n     * @memberof BankTransfer\n     */\n    failure_reason: BankTransferFailure | null;\n    /**\n     * A string containing the custom tag provided by the client in the create request. Will be null if not provided.\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    custom_tag: string | null;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof BankTransfer\n     */\n    metadata: { [key: string]: string; } | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account that was used for this transfer.\n     * @type {string}\n     * @memberof BankTransfer\n     */\n    origination_account_id: string;\n    /**\n     * \n     * @type {BankTransferDirection}\n     * @memberof BankTransfer\n     */\n    direction: BankTransferDirection | null;\n}\n/**\n * Information about the balance of a bank transfer\n * @export\n * @interface BankTransferBalance\n */\nexport interface BankTransferBalance {\n    [key: string]: object | any;\n\n    /**\n     * The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts.\n     * @type {string}\n     * @memberof BankTransferBalance\n     */\n    available: string;\n    /**\n     * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.\n     * @type {string}\n     * @memberof BankTransferBalance\n     */\n    transactable: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/balance/get`\n * @export\n * @interface BankTransferBalanceGetRequest\n */\nexport interface BankTransferBalanceGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferBalanceGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferBalanceGetRequest\n     */\n    secret?: string;\n    /**\n     * If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned.\n     * @type {string}\n     * @memberof BankTransferBalanceGetRequest\n     */\n    origination_account_id?: string | null;\n}\n/**\n * Defines the response schema for `/bank_transfer/balance/get`\n * @export\n * @interface BankTransferBalanceGetResponse\n */\nexport interface BankTransferBalanceGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {BankTransferBalance}\n     * @memberof BankTransferBalanceGetResponse\n     */\n    balance: BankTransferBalance;\n    /**\n     * The ID of the origination account that this balance belongs to.\n     * @type {string}\n     * @memberof BankTransferBalanceGetResponse\n     */\n    origination_account_id: string | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferBalanceGetResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/cancel`\n * @export\n * @interface BankTransferCancelRequest\n */\nexport interface BankTransferCancelRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferCancelRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferCancelRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof BankTransferCancelRequest\n     */\n    bank_transfer_id: string;\n}\n/**\n * Defines the response schema for `/bank_transfer/cancel`\n * @export\n * @interface BankTransferCancelResponse\n */\nexport interface BankTransferCancelResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferCancelResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/create`\n * @export\n * @interface BankTransferCreateRequest\n */\nexport interface BankTransferCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    secret?: string;\n    /**\n     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    idempotency_key: string;\n    /**\n     * The Plaid `access_token` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    access_token: string;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {BankTransferType}\n     * @memberof BankTransferCreateRequest\n     */\n    type: BankTransferType;\n    /**\n     * \n     * @type {BankTransferNetwork}\n     * @memberof BankTransferCreateRequest\n     */\n    network: BankTransferNetwork;\n    /**\n     * The amount of the bank transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    amount: string;\n    /**\n     * The currency of the transfer amount â€“ should be set to \\\"USD\\\".\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    iso_currency_code: string;\n    /**\n     * The transfer description. Maximum of 10 characters.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof BankTransferCreateRequest\n     */\n    ach_class?: ACHClass;\n    /**\n     * \n     * @type {BankTransferUser}\n     * @memberof BankTransferCreateRequest\n     */\n    user: BankTransferUser;\n    /**\n     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    custom_tag?: string | null;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof BankTransferCreateRequest\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.\n     * @type {string}\n     * @memberof BankTransferCreateRequest\n     */\n    origination_account_id?: string | null;\n}\n/**\n * Defines the response schema for `/bank_transfer/create`\n * @export\n * @interface BankTransferCreateResponse\n */\nexport interface BankTransferCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {BankTransfer}\n     * @memberof BankTransferCreateResponse\n     */\n    bank_transfer: BankTransfer;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.\n * @export\n * @enum {string}\n */\nexport enum BankTransferDirection {\n    Outbound = 'outbound',\n    Inbound = 'inbound',\n    Null = 'null'\n}\n\n/**\n * Represents an event in the Bank Transfers API.\n * @export\n * @interface BankTransferEvent\n */\nexport interface BankTransferEvent {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.\n     * @type {number}\n     * @memberof BankTransferEvent\n     */\n    event_id: number;\n    /**\n     * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    timestamp: string;\n    /**\n     * \n     * @type {BankTransferEventType}\n     * @memberof BankTransferEvent\n     */\n    event_type: BankTransferEventType;\n    /**\n     * The account ID associated with the bank transfer.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    account_id: string;\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    bank_transfer_id: string;\n    /**\n     * The ID of the origination account that this balance belongs to.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    origination_account_id: string | null;\n    /**\n     * \n     * @type {BankTransferType}\n     * @memberof BankTransferEvent\n     */\n    bank_transfer_type: BankTransferType;\n    /**\n     * The bank transfer amount.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    bank_transfer_amount: string;\n    /**\n     * The currency of the bank transfer amount.\n     * @type {string}\n     * @memberof BankTransferEvent\n     */\n    bank_transfer_iso_currency_code: string;\n    /**\n     * \n     * @type {BankTransferFailure}\n     * @memberof BankTransferEvent\n     */\n    failure_reason: BankTransferFailure | null;\n    /**\n     * \n     * @type {BankTransferDirection}\n     * @memberof BankTransferEvent\n     */\n    direction: BankTransferDirection | null;\n}\n/**\n * Defines the request schema for `/bank_transfer/event/list`\n * @export\n * @interface BankTransferEventListRequest\n */\nexport interface BankTransferEventListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    end_date?: string | null;\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    bank_transfer_id?: string | null;\n    /**\n     * The account ID to get events for all transactions to/from an account.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    account_id?: string | null;\n    /**\n     * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    bank_transfer_type?: BankTransferEventListRequestBankTransferTypeEnum;\n    /**\n     * Filter events by event type.\n     * @type {Array<BankTransferEventType>}\n     * @memberof BankTransferEventListRequest\n     */\n    event_types?: Array<BankTransferEventType>;\n    /**\n     * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.\n     * @type {number}\n     * @memberof BankTransferEventListRequest\n     */\n    count?: number | null;\n    /**\n     * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.\n     * @type {number}\n     * @memberof BankTransferEventListRequest\n     */\n    offset?: number | null;\n    /**\n     * The origination account ID to get events for transfers from a specific origination account.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    origination_account_id?: string | null;\n    /**\n     * Indicates the direction of the transfer: `outbound`: for API-initiated transfers `inbound`: for payments received by the FBO account.\n     * @type {string}\n     * @memberof BankTransferEventListRequest\n     */\n    direction?: BankTransferEventListRequestDirectionEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum BankTransferEventListRequestBankTransferTypeEnum {\n    Debit = 'debit',\n    Credit = 'credit',\n    Null = 'null'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum BankTransferEventListRequestDirectionEnum {\n    Inbound = 'inbound',\n    Outbound = 'outbound',\n    Null = 'null'\n}\n\n/**\n * Defines the response schema for `/bank_transfer/event/list`\n * @export\n * @interface BankTransferEventListResponse\n */\nexport interface BankTransferEventListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<BankTransferEvent>}\n     * @memberof BankTransferEventListResponse\n     */\n    bank_transfer_events: Array<BankTransferEvent>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferEventListResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/event/sync`\n * @export\n * @interface BankTransferEventSyncRequest\n */\nexport interface BankTransferEventSyncRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferEventSyncRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferEventSyncRequest\n     */\n    secret?: string;\n    /**\n     * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.\n     * @type {number}\n     * @memberof BankTransferEventSyncRequest\n     */\n    after_id: number;\n    /**\n     * The maximum number of bank transfer events to return.\n     * @type {number}\n     * @memberof BankTransferEventSyncRequest\n     */\n    count?: number | null;\n}\n/**\n * Defines the response schema for `/bank_transfer/event/sync`\n * @export\n * @interface BankTransferEventSyncResponse\n */\nexport interface BankTransferEventSyncResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<BankTransferEvent>}\n     * @memberof BankTransferEventSyncResponse\n     */\n    bank_transfer_events: Array<BankTransferEvent>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferEventSyncResponse\n     */\n    request_id: string;\n}\n/**\n * The type of event that this bank transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.\n * @export\n * @enum {string}\n */\nexport enum BankTransferEventType {\n    Pending = 'pending',\n    Cancelled = 'cancelled',\n    Failed = 'failed',\n    Posted = 'posted',\n    Reversed = 'reversed'\n}\n\n/**\n * The failure reason if the type of this transfer is `\\\"failed\\\"` or `\\\"reversed\\\"`. Null value otherwise.\n * @export\n * @interface BankTransferFailure\n */\nexport interface BankTransferFailure {\n    [key: string]: object | any;\n\n    /**\n     * The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes).\n     * @type {string}\n     * @memberof BankTransferFailure\n     */\n    ach_return_code?: string | null;\n    /**\n     * A human-readable description of the reason for the failure or reversal.\n     * @type {string}\n     * @memberof BankTransferFailure\n     */\n    description?: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/get`\n * @export\n * @interface BankTransferGetRequest\n */\nexport interface BankTransferGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferGetRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof BankTransferGetRequest\n     */\n    bank_transfer_id: string;\n}\n/**\n * Defines the response schema for `/bank_transfer/get`\n * @export\n * @interface BankTransferGetResponse\n */\nexport interface BankTransferGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {BankTransfer}\n     * @memberof BankTransferGetResponse\n     */\n    bank_transfer: BankTransfer;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferGetResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/list`\n * @export\n * @interface BankTransferListRequest\n */\nexport interface BankTransferListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof BankTransferListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof BankTransferListRequest\n     */\n    end_date?: string | null;\n    /**\n     * The maximum number of bank transfers to return.\n     * @type {number}\n     * @memberof BankTransferListRequest\n     */\n    count?: number;\n    /**\n     * The number of bank transfers to skip before returning results.\n     * @type {number}\n     * @memberof BankTransferListRequest\n     */\n    offset?: number;\n    /**\n     * Filter bank transfers to only those originated through the specified origination account.\n     * @type {string}\n     * @memberof BankTransferListRequest\n     */\n    origination_account_id?: string | null;\n    /**\n     * \n     * @type {BankTransferDirection}\n     * @memberof BankTransferListRequest\n     */\n    direction?: BankTransferDirection | null;\n}\n/**\n * Defines the response schema for `/bank_transfer/list`\n * @export\n * @interface BankTransferListResponse\n */\nexport interface BankTransferListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<BankTransfer>}\n     * @memberof BankTransferListResponse\n     */\n    bank_transfers: Array<BankTransfer>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferListResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/migrate_account`\n * @export\n * @interface BankTransferMigrateAccountRequest\n */\nexport interface BankTransferMigrateAccountRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountRequest\n     */\n    secret?: string;\n    /**\n     * The user\\'s account number.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountRequest\n     */\n    account_number: string;\n    /**\n     * The user\\'s routing number.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountRequest\n     */\n    routing_number: string;\n    /**\n     * The type of the bank account (`checking` or `savings`).\n     * @type {string}\n     * @memberof BankTransferMigrateAccountRequest\n     */\n    account_type: string;\n}\n/**\n * Defines the response schema for `/bank_transfer/migrate_account`\n * @export\n * @interface BankTransferMigrateAccountResponse\n */\nexport interface BankTransferMigrateAccountResponse {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid `access_token` for the newly created Item.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountResponse\n     */\n    access_token: string;\n    /**\n     * The Plaid `account_id` for the newly created Item.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountResponse\n     */\n    account_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferMigrateAccountResponse\n     */\n    request_id: string;\n}\n/**\n * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.\n * @export\n * @enum {string}\n */\nexport enum BankTransferNetwork {\n    Ach = 'ach',\n    SameDayAch = 'same-day-ach',\n    Wire = 'wire'\n}\n\n/**\n * The status of the transfer.\n * @export\n * @enum {string}\n */\nexport enum BankTransferStatus {\n    Pending = 'pending',\n    Posted = 'posted',\n    Cancelled = 'cancelled',\n    Failed = 'failed',\n    Reversed = 'reversed'\n}\n\n/**\n * BankTransferSweep describes a sweep transfer.\n * @export\n * @interface BankTransferSweep\n */\nexport interface BankTransferSweep {\n    [key: string]: object | any;\n\n    /**\n     * Identifier of the sweep.\n     * @type {string}\n     * @memberof BankTransferSweep\n     */\n    id: string;\n    /**\n     * The datetime when the sweep occurred, in RFC 3339 format.\n     * @type {string}\n     * @memberof BankTransferSweep\n     */\n    created_at: string;\n    /**\n     * The amount of the sweep.\n     * @type {string}\n     * @memberof BankTransferSweep\n     */\n    amount: string;\n    /**\n     * The currency of the sweep, e.g. \\\"USD\\\".\n     * @type {string}\n     * @memberof BankTransferSweep\n     */\n    iso_currency_code: string;\n}\n/**\n * Defines the request schema for `/bank_transfer/sweep/get`\n * @export\n * @interface BankTransferSweepGetRequest\n */\nexport interface BankTransferSweepGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferSweepGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferSweepGetRequest\n     */\n    secret?: string;\n    /**\n     * Identifier of the sweep.\n     * @type {string}\n     * @memberof BankTransferSweepGetRequest\n     */\n    sweep_id: string;\n}\n/**\n * BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get`\n * @export\n * @interface BankTransferSweepGetResponse\n */\nexport interface BankTransferSweepGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {BankTransferSweep}\n     * @memberof BankTransferSweepGetResponse\n     */\n    sweep: BankTransferSweep;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferSweepGetResponse\n     */\n    request_id: string;\n}\n/**\n * BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list`\n * @export\n * @interface BankTransferSweepListRequest\n */\nexport interface BankTransferSweepListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferSweepListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof BankTransferSweepListRequest\n     */\n    secret?: string;\n    /**\n     * If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to.\n     * @type {string}\n     * @memberof BankTransferSweepListRequest\n     */\n    origination_account_id?: string | null;\n    /**\n     * The start datetime of sweeps to return (RFC 3339 format).\n     * @type {string}\n     * @memberof BankTransferSweepListRequest\n     */\n    start_time?: string | null;\n    /**\n     * The end datetime of sweeps to return (RFC 3339 format).\n     * @type {string}\n     * @memberof BankTransferSweepListRequest\n     */\n    end_time?: string | null;\n    /**\n     * The maximum number of sweeps to return.\n     * @type {number}\n     * @memberof BankTransferSweepListRequest\n     */\n    count?: number | null;\n}\n/**\n * BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list`\n * @export\n * @interface BankTransferSweepListResponse\n */\nexport interface BankTransferSweepListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<BankTransferSweep>}\n     * @memberof BankTransferSweepListResponse\n     */\n    sweeps: Array<BankTransferSweep>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof BankTransferSweepListResponse\n     */\n    request_id: string;\n}\n/**\n * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.\n * @export\n * @enum {string}\n */\nexport enum BankTransferType {\n    Debit = 'debit',\n    Credit = 'credit'\n}\n\n/**\n * The legal name and other information for the account holder.\n * @export\n * @interface BankTransferUser\n */\nexport interface BankTransferUser {\n    [key: string]: object | any;\n\n    /**\n     * The account holderâ€™s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder.\n     * @type {string}\n     * @memberof BankTransferUser\n     */\n    legal_name: string;\n    /**\n     * The account holderâ€™s email.\n     * @type {string}\n     * @memberof BankTransferUser\n     */\n    email_address?: string | null;\n    /**\n     * The account holder\\'s routing number. This field is only used in response data. Do not provide this field when making requests.\n     * @type {string}\n     * @memberof BankTransferUser\n     */\n    routing_number?: string;\n}\n/**\n * Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`.\n * @export\n * @interface BankTransfersEventsUpdateWebhook\n */\nexport interface BankTransfersEventsUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `BANK_TRANSFERS`\n     * @type {string}\n     * @memberof BankTransfersEventsUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `BANK_TRANSFERS_EVENTS_UPDATE`\n     * @type {string}\n     * @memberof BankTransfersEventsUpdateWebhook\n     */\n    webhook_code: string;\n}\n/**\n * CategoriesGetResponse defines the response schema for `/categories/get`\n * @export\n * @interface CategoriesGetResponse\n */\nexport interface CategoriesGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of all of the transaction categories used by Plaid.\n     * @type {Array<Category>}\n     * @memberof CategoriesGetResponse\n     */\n    categories: Array<Category>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof CategoriesGetResponse\n     */\n    request_id: string;\n}\n/**\n * Information describing a transaction category\n * @export\n * @interface Category\n */\nexport interface Category {\n    [key: string]: object | any;\n\n    /**\n     * An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.\n     * @type {string}\n     * @memberof Category\n     */\n    category_id: string;\n    /**\n     * `place` for physical transactions or `special` for other transactions such as bank charges.\n     * @type {string}\n     * @memberof Category\n     */\n    group: string;\n    /**\n     * A hierarchical array of the categories to which this `category_id` belongs.\n     * @type {Array<string>}\n     * @memberof Category\n     */\n    hierarchy: Array<string>;\n}\n/**\n * An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.\n * @export\n * @interface Cause\n */\nexport interface Cause {\n    [key: string]: object | any;\n\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof Cause\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof Cause\n     */\n    error: PlaidError;\n}\n/**\n * Describes the connected application for a particular end user.\n * @export\n * @interface ConnectedApplication\n */\nexport interface ConnectedApplication {\n    /**\n     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    application_id: string;\n    /**\n     * The name of the application\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    name: string;\n    /**\n     * A URL that links to the application logo image (will be deprecated in the future, please use logo_url).\n     * @type {string}\n     * @memberof ConnectedApplication\n     * @deprecated\n     */\n    logo: string | null;\n    /**\n     * A URL that links to the application logo image.\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    logo_url: string | null;\n    /**\n     * The URL for the application\\'s website\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    application_url: string | null;\n    /**\n     * A string provided by the connected app stating why they use their respective enabled products.\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    reason_for_access: string | null;\n    /**\n     * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    created_at: string;\n    /**\n     * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.\n     * @type {string}\n     * @memberof ConnectedApplication\n     */\n    join_date: string;\n    /**\n     * (Deprecated) A list of enums representing the data collected and products enabled for this connected application.\n     * @type {Array<string>}\n     * @memberof ConnectedApplication\n     */\n    product_data_types: Array<ConnectedApplicationProductDataTypesEnum>;\n    /**\n     * \n     * @type {ScopesNullable}\n     * @memberof ConnectedApplication\n     */\n    scopes?: ScopesNullable | null;\n    /**\n     * \n     * @type {RequestedScopes}\n     * @memberof ConnectedApplication\n     */\n    requested_scopes?: RequestedScopes;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ConnectedApplicationProductDataTypesEnum {\n    Balance = 'ACCOUNT_BALANCE',\n    UserInfo = 'ACCOUNT_USER_INFO',\n    Transactions = 'ACCOUNT_TRANSACTIONS'\n}\n\n/**\n * ISO-3166-1 alpha-2 country code standard.\n * @export\n * @enum {string}\n */\nexport enum CountryCode {\n    Us = 'US',\n    Gb = 'GB',\n    Es = 'ES',\n    Nl = 'NL',\n    Fr = 'FR',\n    Ie = 'IE',\n    Ca = 'CA',\n    De = 'DE'\n}\n\n/**\n * Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).\n * @export\n * @enum {string}\n */\nexport enum CreditAccountSubtype {\n    CreditCard = 'credit card',\n    Paypal = 'paypal',\n    All = 'all'\n}\n\n/**\n * An object representing a credit card account.\n * @export\n * @interface CreditCardLiability\n */\nexport interface CreditCardLiability {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the account that this liability belongs to.\n     * @type {string}\n     * @memberof CreditCardLiability\n     */\n    account_id: string | null;\n    /**\n     * The various interest rates that apply to the account.\n     * @type {Array<APR>}\n     * @memberof CreditCardLiability\n     */\n    aprs: Array<APR>;\n    /**\n     * true if a payment is currently overdue. Availability for this field is limited.\n     * @type {boolean}\n     * @memberof CreditCardLiability\n     */\n    is_overdue: boolean | null;\n    /**\n     * The amount of the last payment.\n     * @type {number}\n     * @memberof CreditCardLiability\n     */\n    last_payment_amount: number;\n    /**\n     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.\n     * @type {string}\n     * @memberof CreditCardLiability\n     */\n    last_payment_date: string | null;\n    /**\n     * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof CreditCardLiability\n     */\n    last_statement_issue_date: string;\n    /**\n     * The total amount owed as of the last statement issued\n     * @type {number}\n     * @memberof CreditCardLiability\n     */\n    last_statement_balance: number;\n    /**\n     * The minimum payment due for the next billing cycle.\n     * @type {number}\n     * @memberof CreditCardLiability\n     */\n    minimum_payment_amount: number;\n    /**\n     * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof CreditCardLiability\n     */\n    next_payment_due_date: string | null;\n}\n/**\n * A filter to apply to `credit`-type accounts\n * @export\n * @interface CreditFilter\n */\nexport interface CreditFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<CreditAccountSubtype>}\n     * @memberof CreditFilter\n     */\n    account_subtypes: Array<CreditAccountSubtype>;\n}\n/**\n * The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: \\\"R05\\\", \\\"R07\\\", \\\"R10\\\", \\\"R11\\\", \\\"R29\\\". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.\n * @export\n * @interface CustomerInitiatedReturnRisk\n */\nexport interface CustomerInitiatedReturnRisk {\n    /**\n     * A score from 0-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.\n     * @type {number}\n     * @memberof CustomerInitiatedReturnRisk\n     */\n    score: number;\n    /**\n     * A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.  In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%   5: Predicted customer-initiated return incidence rate greater than 0.5% \n     * @type {number}\n     * @memberof CustomerInitiatedReturnRisk\n     */\n    risk_tier: number;\n}\n/**\n * An object with the deduction information found on a paystub.\n * @export\n * @interface Deductions\n */\nexport interface Deductions {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<Total>}\n     * @memberof Deductions\n     * @deprecated\n     */\n    subtotals?: Array<Total>;\n    /**\n     * \n     * @type {Array<DeductionsBreakdown>}\n     * @memberof Deductions\n     */\n    breakdown: Array<DeductionsBreakdown>;\n    /**\n     * \n     * @type {Array<Total>}\n     * @memberof Deductions\n     * @deprecated\n     */\n    totals?: Array<Total>;\n    /**\n     * \n     * @type {DeductionsTotal}\n     * @memberof Deductions\n     */\n    total: DeductionsTotal;\n}\n/**\n * An object representing the deduction line items for the pay period\n * @export\n * @interface DeductionsBreakdown\n */\nexport interface DeductionsBreakdown {\n    [key: string]: object | any;\n\n    /**\n     * Raw amount of the deduction\n     * @type {number}\n     * @memberof DeductionsBreakdown\n     */\n    current_amount?: number | null;\n    /**\n     * Description of the deduction line item\n     * @type {string}\n     * @memberof DeductionsBreakdown\n     */\n    description?: string | null;\n    /**\n     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof DeductionsBreakdown\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof DeductionsBreakdown\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * The year-to-date amount of the deduction\n     * @type {number}\n     * @memberof DeductionsBreakdown\n     */\n    ytd_amount?: number | null;\n}\n/**\n * An object representing the total deductions for the pay period\n * @export\n * @interface DeductionsTotal\n */\nexport interface DeductionsTotal {\n    [key: string]: object | any;\n\n    /**\n     * Raw amount of the deduction\n     * @type {number}\n     * @memberof DeductionsTotal\n     */\n    current_amount?: number | null;\n    /**\n     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof DeductionsTotal\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof DeductionsTotal\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * The year-to-date total amount of the deductions\n     * @type {number}\n     * @memberof DeductionsTotal\n     */\n    ytd_amount?: number | null;\n}\n/**\n * Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day. \n * @export\n * @interface DefaultUpdateWebhook\n */\nexport interface DefaultUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `TRANSACTIONS`\n     * @type {string}\n     * @memberof DefaultUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `DEFAULT_UPDATE`\n     * @type {string}\n     * @memberof DefaultUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof DefaultUpdateWebhook\n     */\n    error?: PlaidError;\n    /**\n     * The number of new transactions detected since the last time this webhook was fired.\n     * @type {number}\n     * @memberof DefaultUpdateWebhook\n     */\n    new_transactions: number;\n    /**\n     * The `item_id` of the Item the webhook relates to.\n     * @type {string}\n     * @memberof DefaultUpdateWebhook\n     */\n    item_id: string;\n}\n/**\n * The user\\'s address.\n * @export\n * @interface DepositSwitchAddressData\n */\nexport interface DepositSwitchAddressData {\n    [key: string]: object | any;\n\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof DepositSwitchAddressData\n     */\n    city: string;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof DepositSwitchAddressData\n     */\n    region: string;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof DepositSwitchAddressData\n     */\n    street: string;\n    /**\n     * The postal code\n     * @type {string}\n     * @memberof DepositSwitchAddressData\n     */\n    postal_code: string;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof DepositSwitchAddressData\n     */\n    country: string;\n}\n/**\n * DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`\n * @export\n * @interface DepositSwitchAltCreateRequest\n */\nexport interface DepositSwitchAltCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    secret?: string;\n    /**\n     * \n     * @type {DepositSwitchTargetAccount}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    target_account: DepositSwitchTargetAccount;\n    /**\n     * \n     * @type {DepositSwitchTargetUser}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    target_user: DepositSwitchTargetUser;\n    /**\n     * \n     * @type {DepositSwitchCreateRequestOptions}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    options?: DepositSwitchCreateRequestOptions;\n    /**\n     * ISO-3166-1 alpha-2 country code standard.\n     * @type {string}\n     * @memberof DepositSwitchAltCreateRequest\n     */\n    country_code?: DepositSwitchAltCreateRequestCountryCodeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum DepositSwitchAltCreateRequestCountryCodeEnum {\n    Us = 'US',\n    Ca = 'CA'\n}\n\n/**\n * DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create`\n * @export\n * @interface DepositSwitchAltCreateResponse\n */\nexport interface DepositSwitchAltCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.\n     * @type {string}\n     * @memberof DepositSwitchAltCreateResponse\n     */\n    deposit_switch_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof DepositSwitchAltCreateResponse\n     */\n    request_id: string;\n}\n/**\n * DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create`\n * @export\n * @interface DepositSwitchCreateRequest\n */\nexport interface DepositSwitchCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchCreateRequest\n     */\n    secret?: string;\n    /**\n     * Access token for the target Item, typically provided in the Import Item response. \n     * @type {string}\n     * @memberof DepositSwitchCreateRequest\n     */\n    target_access_token: string;\n    /**\n     * Plaid Account ID that specifies the target bank account. This account will become the recipient for a user\\'s direct deposit.\n     * @type {string}\n     * @memberof DepositSwitchCreateRequest\n     */\n    target_account_id: string;\n    /**\n     * ISO-3166-1 alpha-2 country code standard.\n     * @type {string}\n     * @memberof DepositSwitchCreateRequest\n     */\n    country_code?: DepositSwitchCreateRequestCountryCodeEnum;\n    /**\n     * \n     * @type {DepositSwitchCreateRequestOptions}\n     * @memberof DepositSwitchCreateRequest\n     */\n    options?: DepositSwitchCreateRequestOptions;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum DepositSwitchCreateRequestCountryCodeEnum {\n    Us = 'US',\n    Ca = 'CA'\n}\n\n/**\n * Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`.\n * @export\n * @interface DepositSwitchCreateRequestOptions\n */\nexport interface DepositSwitchCreateRequestOptions {\n    /**\n     * The URL registered to receive webhooks when the status of a deposit switch request has changed. \n     * @type {string}\n     * @memberof DepositSwitchCreateRequestOptions\n     */\n    webhook?: string | null;\n    /**\n     * An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product.\n     * @type {Array<string>}\n     * @memberof DepositSwitchCreateRequestOptions\n     */\n    transaction_item_access_tokens?: Array<string>;\n}\n/**\n * DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create`\n * @export\n * @interface DepositSwitchCreateResponse\n */\nexport interface DepositSwitchCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.\n     * @type {string}\n     * @memberof DepositSwitchCreateResponse\n     */\n    deposit_switch_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof DepositSwitchCreateResponse\n     */\n    request_id: string;\n}\n/**\n * DepositSwitchGetRequest defines the request schema for `/deposit_switch/get`\n * @export\n * @interface DepositSwitchGetRequest\n */\nexport interface DepositSwitchGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the deposit switch\n     * @type {string}\n     * @memberof DepositSwitchGetRequest\n     */\n    deposit_switch_id: string;\n}\n/**\n * DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`\n * @export\n * @interface DepositSwitchGetResponse\n */\nexport interface DepositSwitchGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the deposit switch.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    deposit_switch_id: string;\n    /**\n     * The ID of the bank account the direct deposit was switched to.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    target_account_id: string | null;\n    /**\n     * The ID of the Item the direct deposit was switched to.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    target_item_id: string | null;\n    /**\n     *  The state, or status, of the deposit switch.  - `initialized` â€“ The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` â€“ The deposit switch request has been submitted and is being processed.  - `completed` â€“ The user\\'s employer has fulfilled the deposit switch request.  - `error` â€“ There was an error processing the deposit switch request.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    state: DepositSwitchGetResponseStateEnum;\n    /**\n     * The method used to make the deposit switch.  - `instant` â€“ User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.  - `mail` â€“ User requested that Plaid contact their employer by mail to make the direct deposit switch.  - `pdf` â€“ User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.\\'\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    switch_method?: DepositSwitchGetResponseSwitchMethodEnum;\n    /**\n     * When `true`, userâ€™s direct deposit goes to multiple banks. When false, userâ€™s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.\n     * @type {boolean}\n     * @memberof DepositSwitchGetResponse\n     */\n    account_has_multiple_allocations: boolean | null;\n    /**\n     * When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, userâ€™s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.\n     * @type {boolean}\n     * @memberof DepositSwitchGetResponse\n     */\n    is_allocated_remainder: boolean | null;\n    /**\n     * The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.\n     * @type {number}\n     * @memberof DepositSwitchGetResponse\n     */\n    percent_allocated: number | null;\n    /**\n     * The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.\n     * @type {number}\n     * @memberof DepositSwitchGetResponse\n     */\n    amount_allocated: number | null;\n    /**\n     * The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    employer_name?: string | null;\n    /**\n     * The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    employer_id?: string | null;\n    /**\n     * The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    institution_name?: string | null;\n    /**\n     * The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    institution_id?: string | null;\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created. \n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    date_created: string;\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed. \n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    date_completed: string | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof DepositSwitchGetResponse\n     */\n    request_id: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum DepositSwitchGetResponseStateEnum {\n    Initialized = 'initialized',\n    Processing = 'processing',\n    Completed = 'completed',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum DepositSwitchGetResponseSwitchMethodEnum {\n    Instant = 'instant',\n    Mail = 'mail',\n    Pdf = 'pdf',\n    Null = 'null'\n}\n\n/**\n * Fired when the status of a deposit switch request has changed.\n * @export\n * @interface DepositSwitchStateUpdateWebhook\n */\nexport interface DepositSwitchStateUpdateWebhook {\n    /**\n     * `\\\"DEPOSIT_SWITCH\\\"`\n     * @type {string}\n     * @memberof DepositSwitchStateUpdateWebhook\n     */\n    webhook_type?: string;\n    /**\n     * `\\\"SWITCH_STATE_UPDATE\\\"`\n     * @type {string}\n     * @memberof DepositSwitchStateUpdateWebhook\n     */\n    webhook_code?: string;\n    /**\n     *  The state, or status, of the deposit switch.  `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  `processing`: The deposit switch request has been submitted and is being processed.  `completed`: The user\\'s employer has fulfilled and completed the deposit switch request.  `error`: There was an error processing the deposit switch request.  For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).\n     * @type {string}\n     * @memberof DepositSwitchStateUpdateWebhook\n     */\n    state?: string;\n    /**\n     * The ID of the deposit switch.\n     * @type {string}\n     * @memberof DepositSwitchStateUpdateWebhook\n     */\n    deposit_switch_id?: string;\n}\n/**\n * The deposit switch destination account\n * @export\n * @interface DepositSwitchTargetAccount\n */\nexport interface DepositSwitchTargetAccount {\n    [key: string]: object | any;\n\n    /**\n     * Account number for deposit switch destination\n     * @type {string}\n     * @memberof DepositSwitchTargetAccount\n     */\n    account_number: string;\n    /**\n     * Routing number for deposit switch destination\n     * @type {string}\n     * @memberof DepositSwitchTargetAccount\n     */\n    routing_number: string;\n    /**\n     * The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.\n     * @type {string}\n     * @memberof DepositSwitchTargetAccount\n     */\n    account_name: string;\n    /**\n     * The account subtype of the account, either `checking` or `savings`.\n     * @type {string}\n     * @memberof DepositSwitchTargetAccount\n     */\n    account_subtype: DepositSwitchTargetAccountAccountSubtypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum DepositSwitchTargetAccountAccountSubtypeEnum {\n    Checking = 'checking',\n    Savings = 'savings'\n}\n\n/**\n * The deposit switch target user\n * @export\n * @interface DepositSwitchTargetUser\n */\nexport interface DepositSwitchTargetUser {\n    [key: string]: object | any;\n\n    /**\n     * The given name (first name) of the user.\n     * @type {string}\n     * @memberof DepositSwitchTargetUser\n     */\n    given_name: string;\n    /**\n     * The family name (last name) of the user.\n     * @type {string}\n     * @memberof DepositSwitchTargetUser\n     */\n    family_name: string;\n    /**\n     * The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.\n     * @type {string}\n     * @memberof DepositSwitchTargetUser\n     */\n    phone: string;\n    /**\n     * The email address of the user.\n     * @type {string}\n     * @memberof DepositSwitchTargetUser\n     */\n    email: string;\n    /**\n     * \n     * @type {DepositSwitchAddressData}\n     * @memberof DepositSwitchTargetUser\n     */\n    address?: DepositSwitchAddressData;\n    /**\n     * The taxpayer ID of the user, generally their SSN, EIN, or TIN.\n     * @type {string}\n     * @memberof DepositSwitchTargetUser\n     */\n    tax_payer_id?: string;\n}\n/**\n * DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create`\n * @export\n * @interface DepositSwitchTokenCreateRequest\n */\nexport interface DepositSwitchTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the deposit switch\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateRequest\n     */\n    deposit_switch_id: string;\n}\n/**\n * DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create`\n * @export\n * @interface DepositSwitchTokenCreateResponse\n */\nexport interface DepositSwitchTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * Deposit switch token, used to initialize Link for the Deposit Switch product\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateResponse\n     */\n    deposit_switch_token: string;\n    /**\n     * Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateResponse\n     */\n    deposit_switch_token_expiration_time: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof DepositSwitchTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).\n * @export\n * @enum {string}\n */\nexport enum DepositoryAccountSubtype {\n    Checking = 'checking',\n    Savings = 'savings',\n    Hsa = 'hsa',\n    Cd = 'cd',\n    MoneyMarket = 'money market',\n    Paypal = 'paypal',\n    Prepaid = 'prepaid',\n    CashManagement = 'cash management',\n    Ebt = 'ebt',\n    All = 'all'\n}\n\n/**\n * A filter to apply to `depository`-type accounts\n * @export\n * @interface DepositoryFilter\n */\nexport interface DepositoryFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<DepositoryAccountSubtype>}\n     * @memberof DepositoryFilter\n     */\n    account_subtypes: Array<DepositoryAccountSubtype>;\n}\n/**\n * Information about the accounts that the payment was distributed to.\n * @export\n * @interface DistributionBreakdown\n */\nexport interface DistributionBreakdown {\n    [key: string]: object | any;\n\n    /**\n     * Name of the account for the given distribution.\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    account_name?: string | null;\n    /**\n     * The name of the bank that the payment is being deposited to.\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    bank_name?: string | null;\n    /**\n     * The amount distributed to this account.\n     * @type {number}\n     * @memberof DistributionBreakdown\n     */\n    current_amount?: number | null;\n    /**\n     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The last 2-4 alphanumeric characters of an account\\'s official account number.\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    mask?: string | null;\n    /**\n     * Type of the account that the paystub was sent to (e.g. \\'checking\\').\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    type?: string | null;\n    /**\n     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof DistributionBreakdown\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * \n     * @type {Pay}\n     * @memberof DistributionBreakdown\n     * @deprecated\n     */\n    current_pay?: Pay;\n}\n/**\n * The type of document.  `DOCUMENT_TYPE_PAYSTUB`: A paystub.  `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.  `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.  `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.  `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.  `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.  `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.  `UNKNOWN`: Document type could not be determined.\n * @export\n * @enum {string}\n */\nexport enum DocType {\n    Unknown = 'UNKNOWN',\n    DocumentTypePaystub = 'DOCUMENT_TYPE_PAYSTUB',\n    DocumentTypeBankStatement = 'DOCUMENT_TYPE_BANK_STATEMENT',\n    DocumentTypeUsTaxW2 = 'DOCUMENT_TYPE_US_TAX_W2',\n    DocumentTypeUsMilitaryEras = 'DOCUMENT_TYPE_US_MILITARY_ERAS',\n    DocumentTypeUsMilitaryLes = 'DOCUMENT_TYPE_US_MILITARY_LES',\n    DocumentTypeUsMilitaryCles = 'DOCUMENT_TYPE_US_MILITARY_CLES',\n    DocumentTypeGig = 'DOCUMENT_TYPE_GIG',\n    DocumentTypeNone = 'DOCUMENT_TYPE_NONE'\n}\n\n/**\n * An object representing metadata from the end user\\'s uploaded document.\n * @export\n * @interface DocumentMetadata\n */\nexport interface DocumentMetadata {\n    [key: string]: object | any;\n\n    /**\n     * The name of the document.\n     * @type {string}\n     * @memberof DocumentMetadata\n     */\n    name?: string;\n    /**\n     * The processing status of the document.\n     * @type {string}\n     * @memberof DocumentMetadata\n     */\n    status?: string;\n    /**\n     * An identifier of the document that is also present in the paystub response.\n     * @type {string}\n     * @memberof DocumentMetadata\n     */\n    doc_id?: string;\n    /**\n     * \n     * @type {DocType}\n     * @memberof DocumentMetadata\n     */\n    doc_type?: DocType;\n}\n/**\n * An object representing both a breakdown of earnings on a paystub and the total earnings.\n * @export\n * @interface Earnings\n */\nexport interface Earnings {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<EarningsTotal>}\n     * @memberof Earnings\n     * @deprecated\n     */\n    subtotals?: Array<EarningsTotal>;\n    /**\n     * \n     * @type {Array<EarningsTotal>}\n     * @memberof Earnings\n     * @deprecated\n     */\n    totals?: Array<EarningsTotal>;\n    /**\n     * \n     * @type {Array<EarningsBreakdown>}\n     * @memberof Earnings\n     */\n    breakdown?: Array<EarningsBreakdown>;\n    /**\n     * \n     * @type {EarningsTotal}\n     * @memberof Earnings\n     */\n    total?: EarningsTotal;\n}\n/**\n * An object representing the earnings line items for the pay period.\n * @export\n * @interface EarningsBreakdown\n */\nexport interface EarningsBreakdown {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {EarningsBreakdownCanonicalDescription}\n     * @memberof EarningsBreakdown\n     */\n    canonical_description?: EarningsBreakdownCanonicalDescription | null;\n    /**\n     * Raw amount of the earning line item.\n     * @type {number}\n     * @memberof EarningsBreakdown\n     */\n    current_amount?: number | null;\n    /**\n     * Description of the earning line item.\n     * @type {string}\n     * @memberof EarningsBreakdown\n     */\n    description?: string | null;\n    /**\n     * Number of hours applicable for this earning.\n     * @type {number}\n     * @memberof EarningsBreakdown\n     */\n    hours?: number | null;\n    /**\n     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof EarningsBreakdown\n     */\n    iso_currency_code?: string | null;\n    /**\n     * Hourly rate applicable for this earning.\n     * @type {number}\n     * @memberof EarningsBreakdown\n     */\n    rate?: number | null;\n    /**\n     * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof EarningsBreakdown\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * The year-to-date amount of the deduction.\n     * @type {number}\n     * @memberof EarningsBreakdown\n     */\n    ytd_amount?: number | null;\n}\n/**\n * Commonly used term to describe the earning line item.\n * @export\n * @enum {string}\n */\nexport enum EarningsBreakdownCanonicalDescription {\n    Bonus = 'BONUS',\n    Commission = 'COMMISSION',\n    Overtime = 'OVERTIME',\n    PaidTimeOff = 'PAID TIME OFF',\n    RegularPay = 'REGULAR PAY',\n    Vacation = 'VACATION',\n    BasicAllowanceHousing = 'BASIC ALLOWANCE HOUSING',\n    BasicAllowanceSubsistence = 'BASIC ALLOWANCE SUBSISTENCE',\n    Other = 'OTHER',\n    Null = 'null'\n}\n\n/**\n * An object representing both the current pay period and year to date amount for an earning category.\n * @export\n * @interface EarningsTotal\n */\nexport interface EarningsTotal {\n    [key: string]: object | any;\n\n    /**\n     * Total amount of the earnings for this pay period\n     * @type {number}\n     * @memberof EarningsTotal\n     */\n    current_amount?: number | null;\n    /**\n     * \n     * @type {Pay}\n     * @memberof EarningsTotal\n     * @deprecated\n     */\n    current_pay?: Pay;\n    /**\n     * \n     * @type {Pay}\n     * @memberof EarningsTotal\n     * @deprecated\n     */\n    ytd_pay?: Pay;\n    /**\n     * Total number of hours worked for this pay period\n     * @type {number}\n     * @memberof EarningsTotal\n     */\n    hours?: number | null;\n    /**\n     * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof EarningsTotal\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof EarningsTotal\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * The total year-to-date amount of the earnings\n     * @type {number}\n     * @memberof EarningsTotal\n     */\n    ytd_amount?: number | null;\n}\n/**\n * An object representing an email address\n * @export\n * @interface Email\n */\nexport interface Email {\n    [key: string]: object | any;\n\n    /**\n     * The email address.\n     * @type {string}\n     * @memberof Email\n     */\n    data: string;\n    /**\n     * When `true`, identifies the email address as the primary email on an account.\n     * @type {boolean}\n     * @memberof Email\n     */\n    primary: boolean;\n    /**\n     * The type of email account as described by the financial institution.\n     * @type {string}\n     * @memberof Email\n     */\n    type: EmailTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum EmailTypeEnum {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Other = 'other'\n}\n\n/**\n * Data about the employee.\n * @export\n * @interface Employee\n */\nexport interface Employee {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PaystubAddress}\n     * @memberof Employee\n     */\n    address: PaystubAddress;\n    /**\n     * The name of the employee.\n     * @type {string}\n     * @memberof Employee\n     */\n    name: string | null;\n    /**\n     * Marital status of the employee - either `single` or `married`.\n     * @type {string}\n     * @memberof Employee\n     */\n    marital_status?: string | null;\n    /**\n     * \n     * @type {TaxpayerID}\n     * @memberof Employee\n     */\n    taxpayer_id?: TaxpayerID;\n}\n/**\n * The name of the employee, as reported on the paystub.\n * @export\n * @interface EmployeeIncomeSummaryFieldString\n */\nexport interface EmployeeIncomeSummaryFieldString {\n    /**\n     * The value of the field.\n     * @type {string}\n     * @memberof EmployeeIncomeSummaryFieldString\n     */\n    value: string;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof EmployeeIncomeSummaryFieldString\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * Data about the employer.\n * @export\n * @interface Employer\n */\nexport interface Employer {\n    [key: string]: object | any;\n\n    /**\n     * Plaid\\'s unique identifier for the employer.\n     * @type {string}\n     * @memberof Employer\n     */\n    employer_id: string;\n    /**\n     * The name of the employer\n     * @type {string}\n     * @memberof Employer\n     */\n    name: string;\n    /**\n     * \n     * @type {AddressDataNullable}\n     * @memberof Employer\n     */\n    address: AddressDataNullable | null;\n    /**\n     * A number from 0 to 1 indicating Plaid\\'s level of confidence in the pairing between the employer and the institution (not yet implemented).\n     * @type {number}\n     * @memberof Employer\n     */\n    confidence_score: number;\n}\n/**\n * The name of the employer, as reported on the paystub.\n * @export\n * @interface EmployerIncomeSummaryFieldString\n */\nexport interface EmployerIncomeSummaryFieldString {\n    /**\n     * The value of the field.\n     * @type {string}\n     * @memberof EmployerIncomeSummaryFieldString\n     */\n    value: string;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof EmployerIncomeSummaryFieldString\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * An object containing employer data.\n * @export\n * @interface EmployerVerification\n */\nexport interface EmployerVerification {\n    [key: string]: object | any;\n\n    /**\n     * Name of employer.\n     * @type {string}\n     * @memberof EmployerVerification\n     */\n    name?: string | null;\n}\n/**\n * EmployersSearchRequest defines the request schema for `/employers/search`.\n * @export\n * @interface EmployersSearchRequest\n */\nexport interface EmployersSearchRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof EmployersSearchRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof EmployersSearchRequest\n     */\n    secret?: string;\n    /**\n     * The employer name to be searched for.\n     * @type {string}\n     * @memberof EmployersSearchRequest\n     */\n    query: string;\n    /**\n     * The Plaid products the returned employers should support. Currently, this field must be set to `\\\"deposit_switch\\\"`.\n     * @type {Array<string>}\n     * @memberof EmployersSearchRequest\n     */\n    products: Array<string>;\n}\n/**\n * EmployersSearchResponse defines the response schema for `/employers/search`.\n * @export\n * @interface EmployersSearchResponse\n */\nexport interface EmployersSearchResponse {\n    [key: string]: object | any;\n\n    /**\n     * A list of employers matching the search criteria.\n     * @type {Array<Employer>}\n     * @memberof EmployersSearchResponse\n     */\n    employers: Array<Employer>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof EmployersSearchResponse\n     */\n    request_id: string;\n}\n/**\n * An object representing employment details found on a paystub.\n * @export\n * @interface EmploymentDetails\n */\nexport interface EmploymentDetails {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Pay}\n     * @memberof EmploymentDetails\n     * @deprecated\n     */\n    annual_salary?: Pay;\n    /**\n     * Date on which the employee was hired, in the YYYY-MM-DD format.\n     * @type {string}\n     * @memberof EmploymentDetails\n     */\n    hire_date?: string | null;\n}\n/**\n * An object containing proof of employment data for an individual\n * @export\n * @interface EmploymentVerification\n */\nexport interface EmploymentVerification {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {EmploymentVerificationStatus}\n     * @memberof EmploymentVerification\n     */\n    status?: EmploymentVerificationStatus | null;\n    /**\n     * Start of employment in ISO 8601 format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof EmploymentVerification\n     */\n    start_date?: string | null;\n    /**\n     * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).\n     * @type {string}\n     * @memberof EmploymentVerification\n     */\n    end_date?: string | null;\n    /**\n     * \n     * @type {EmployerVerification}\n     * @memberof EmploymentVerification\n     */\n    employer?: EmployerVerification;\n    /**\n     * Current title of employee.\n     * @type {string}\n     * @memberof EmploymentVerification\n     */\n    title?: string | null;\n    /**\n     * \n     * @type {PlatformIds}\n     * @memberof EmploymentVerification\n     */\n    platform_ids?: PlatformIds;\n}\n/**\n * EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`.\n * @export\n * @interface EmploymentVerificationGetRequest\n */\nexport interface EmploymentVerificationGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof EmploymentVerificationGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof EmploymentVerificationGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof EmploymentVerificationGetRequest\n     */\n    access_token: string;\n}\n/**\n * EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`.\n * @export\n * @interface EmploymentVerificationGetResponse\n */\nexport interface EmploymentVerificationGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A list of employment verification summaries.\n     * @type {Array<EmploymentVerification>}\n     * @memberof EmploymentVerificationGetResponse\n     */\n    employments: Array<EmploymentVerification>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof EmploymentVerificationGetResponse\n     */\n    request_id: string;\n}\n/**\n * Current employment status.\n * @export\n * @enum {string}\n */\nexport enum EmploymentVerificationStatus {\n    EmploymentStatusActive = 'EMPLOYMENT_STATUS_ACTIVE',\n    EmploymentStatusInactive = 'EMPLOYMENT_STATUS_INACTIVE',\n    Null = 'null'\n}\n\n/**\n * Additional payment options\n * @export\n * @interface ExternalPaymentOptions\n */\nexport interface ExternalPaymentOptions {\n    [key: string]: object | any;\n\n    /**\n     * When `true`, Plaid will attempt to request refund details from the payee\\'s financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response.\n     * @type {boolean}\n     * @memberof ExternalPaymentOptions\n     */\n    request_refund_details?: boolean | null;\n    /**\n     * The International Bank Account Number (IBAN) for the payer\\'s account. If provided, the end user will be able to send payments only from the specified bank account.\n     * @type {string}\n     * @memberof ExternalPaymentOptions\n     */\n    iban?: string | null;\n    /**\n     * \n     * @type {PaymentInitiationOptionalRestrictionBacs}\n     * @memberof ExternalPaymentOptions\n     */\n    bacs?: PaymentInitiationOptionalRestrictionBacs | null;\n    /**\n     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.\n     * @type {string}\n     * @memberof ExternalPaymentOptions\n     */\n    wallet_id?: string | null;\n    /**\n     * \n     * @type {PaymentScheme}\n     * @memberof ExternalPaymentOptions\n     */\n    scheme?: PaymentScheme | null;\n}\n/**\n * Details about external payment refund\n * @export\n * @interface ExternalPaymentRefundDetails\n */\nexport interface ExternalPaymentRefundDetails {\n    /**\n     * The name of the account holder.\n     * @type {string}\n     * @memberof ExternalPaymentRefundDetails\n     */\n    name: string;\n    /**\n     * The International Bank Account Number (IBAN) for the account.\n     * @type {string}\n     * @memberof ExternalPaymentRefundDetails\n     */\n    iban: string | null;\n    /**\n     * \n     * @type {RecipientBACSNullable}\n     * @memberof ExternalPaymentRefundDetails\n     */\n    bacs: RecipientBACSNullable | null;\n}\n/**\n * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.\n * @export\n * @interface ExternalPaymentScheduleBase\n */\nexport interface ExternalPaymentScheduleBase {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PaymentScheduleInterval}\n     * @memberof ExternalPaymentScheduleBase\n     */\n    interval?: PaymentScheduleInterval;\n    /**\n     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.\n     * @type {number}\n     * @memberof ExternalPaymentScheduleBase\n     */\n    interval_execution_day?: number;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleBase\n     */\n    start_date?: string;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleBase\n     */\n    end_date?: string | null;\n    /**\n     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleBase\n     */\n    adjusted_start_date?: string | null;\n}\n/**\n * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.\n * @export\n * @interface ExternalPaymentScheduleGet\n */\nexport interface ExternalPaymentScheduleGet {\n    /**\n     * \n     * @type {PaymentScheduleInterval}\n     * @memberof ExternalPaymentScheduleGet\n     */\n    interval: PaymentScheduleInterval;\n    /**\n     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.\n     * @type {number}\n     * @memberof ExternalPaymentScheduleGet\n     */\n    interval_execution_day: number;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleGet\n     */\n    start_date: string;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleGet\n     */\n    end_date: string | null;\n    /**\n     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleGet\n     */\n    adjusted_start_date: string | null;\n}\n/**\n * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.\n * @export\n * @interface ExternalPaymentScheduleRequest\n */\nexport interface ExternalPaymentScheduleRequest {\n    /**\n     * \n     * @type {PaymentScheduleInterval}\n     * @memberof ExternalPaymentScheduleRequest\n     */\n    interval: PaymentScheduleInterval;\n    /**\n     * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.\n     * @type {number}\n     * @memberof ExternalPaymentScheduleRequest\n     */\n    interval_execution_day: number;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleRequest\n     */\n    start_date: string;\n    /**\n     * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleRequest\n     */\n    end_date?: string | null;\n    /**\n     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.\n     * @type {string}\n     * @memberof ExternalPaymentScheduleRequest\n     */\n    adjusted_start_date?: string | null;\n}\n/**\n * A status health incident\n * @export\n * @interface HealthIncident\n */\nexport interface HealthIncident {\n    [key: string]: object | any;\n\n    /**\n     * The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\\\"2020-10-30T15:26:48Z\\\"`.\n     * @type {string}\n     * @memberof HealthIncident\n     */\n    start_date: string;\n    /**\n     * The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\\\"2020-10-30T15:26:48Z\\\"`.\n     * @type {string}\n     * @memberof HealthIncident\n     */\n    end_date?: string;\n    /**\n     * The title of the incident\n     * @type {string}\n     * @memberof HealthIncident\n     */\n    title: string;\n    /**\n     * Updates on the health incident.\n     * @type {Array<IncidentUpdate>}\n     * @memberof HealthIncident\n     */\n    incident_updates: Array<IncidentUpdate>;\n}\n/**\n * An object representing a balance held by an account in the past\n * @export\n * @interface HistoricalBalance\n */\nexport interface HistoricalBalance {\n    [key: string]: object | any;\n\n    /**\n     * The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)\n     * @type {string}\n     * @memberof HistoricalBalance\n     */\n    date: string;\n    /**\n     * The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.  If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.\n     * @type {number}\n     * @memberof HistoricalBalance\n     */\n    current: number;\n    /**\n     * The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.\n     * @type {string}\n     * @memberof HistoricalBalance\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof HistoricalBalance\n     */\n    unofficial_currency_code: string | null;\n}\n/**\n * Fired when an Item\\'s historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.\n * @export\n * @interface HistoricalUpdateWebhook\n */\nexport interface HistoricalUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `TRANSACTIONS`\n     * @type {string}\n     * @memberof HistoricalUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `HISTORICAL_UPDATE`\n     * @type {string}\n     * @memberof HistoricalUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof HistoricalUpdateWebhook\n     */\n    error?: PlaidError;\n    /**\n     * The number of new, unfetched transactions available\n     * @type {number}\n     * @memberof HistoricalUpdateWebhook\n     */\n    new_transactions: number;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof HistoricalUpdateWebhook\n     */\n    item_id: string;\n}\n/**\n * A securities holding at an institution.\n * @export\n * @interface Holding\n */\nexport interface Holding {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid `account_id` associated with the holding.\n     * @type {string}\n     * @memberof Holding\n     */\n    account_id: string;\n    /**\n     * The Plaid `security_id` associated with the holding.\n     * @type {string}\n     * @memberof Holding\n     */\n    security_id: string;\n    /**\n     * The last price given by the institution for this security.\n     * @type {number}\n     * @memberof Holding\n     */\n    institution_price: number;\n    /**\n     * The date at which `institution_price` was current.\n     * @type {string}\n     * @memberof Holding\n     */\n    institution_price_as_of: string | null;\n    /**\n     * The value of the holding, as reported by the institution.\n     * @type {number}\n     * @memberof Holding\n     */\n    institution_value: number;\n    /**\n     * The cost basis of the holding.\n     * @type {number}\n     * @memberof Holding\n     */\n    cost_basis: number | null;\n    /**\n     * The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.\n     * @type {number}\n     * @memberof Holding\n     */\n    quantity: number;\n    /**\n     * The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.\n     * @type {string}\n     * @memberof Holding\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. \n     * @type {string}\n     * @memberof Holding\n     */\n    unofficial_currency_code: string | null;\n}\n/**\n * Fired when new or updated holdings have been detected on an investment account. The webhook typically fires once per day, after market close, in response to any newly added holdings or price changes to existing holdings.\n * @export\n * @interface HoldingsDefaultUpdateWebhook\n */\nexport interface HoldingsDefaultUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `HOLDINGS`\n     * @type {string}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `DEFAULT_UPDATE`\n     * @type {string}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    error?: PlaidError;\n    /**\n     * The number of new holdings reported since the last time this webhook was fired.\n     * @type {number}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    new_holdings: number;\n    /**\n     * The number of updated holdings reported since the last time this webhook was fired.\n     * @type {number}\n     * @memberof HoldingsDefaultUpdateWebhook\n     */\n    updated_holdings: number;\n}\n/**\n * Specify the holdings on the account.\n * @export\n * @interface HoldingsOverride\n */\nexport interface HoldingsOverride {\n    /**\n     * The last price given by the institution for this security\n     * @type {number}\n     * @memberof HoldingsOverride\n     */\n    institution_price: number;\n    /**\n     * The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.\n     * @type {string}\n     * @memberof HoldingsOverride\n     */\n    institution_price_as_of?: string;\n    /**\n     * The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.\n     * @type {number}\n     * @memberof HoldingsOverride\n     */\n    cost_basis?: number;\n    /**\n     * The total quantity of the asset held, as reported by the financial institution.\n     * @type {number}\n     * @memberof HoldingsOverride\n     */\n    quantity: number;\n    /**\n     * Either a valid `iso_currency_code` or `unofficial_currency_code`\n     * @type {string}\n     * @memberof HoldingsOverride\n     */\n    currency: string;\n    /**\n     * \n     * @type {SecurityOverride}\n     * @memberof HoldingsOverride\n     */\n    security: SecurityOverride;\n}\n/**\n * IdentityGetRequest defines the request schema for `/identity/get`\n * @export\n * @interface IdentityGetRequest\n */\nexport interface IdentityGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IdentityGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IdentityGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IdentityGetRequest\n     */\n    access_token: string;\n    /**\n     * \n     * @type {IdentityGetRequestOptions}\n     * @memberof IdentityGetRequest\n     */\n    options?: IdentityGetRequestOptions;\n}\n/**\n * An optional object to filter `/identity/get` results.\n * @export\n * @interface IdentityGetRequestOptions\n */\nexport interface IdentityGetRequestOptions {\n    /**\n     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof IdentityGetRequestOptions\n     */\n    account_ids?: Array<string>;\n}\n/**\n * IdentityGetResponse defines the response schema for `/identity/get`\n * @export\n * @interface IdentityGetResponse\n */\nexport interface IdentityGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * The accounts for which Identity data has been requested\n     * @type {Array<AccountIdentity>}\n     * @memberof IdentityGetResponse\n     */\n    accounts: Array<AccountIdentity>;\n    /**\n     * \n     * @type {Item}\n     * @memberof IdentityGetResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IdentityGetResponse\n     */\n    request_id: string;\n}\n/**\n * An update on the health incident\n * @export\n * @interface IncidentUpdate\n */\nexport interface IncidentUpdate {\n    [key: string]: object | any;\n\n    /**\n     * The content of the update.\n     * @type {string}\n     * @memberof IncidentUpdate\n     */\n    description?: string;\n    /**\n     * The status of the incident.\n     * @type {string}\n     * @memberof IncidentUpdate\n     */\n    status?: IncidentUpdateStatusEnum;\n    /**\n     * The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\\\"2020-10-30T15:26:48Z\\\"`.\n     * @type {string}\n     * @memberof IncidentUpdate\n     */\n    updated_date?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum IncidentUpdateStatusEnum {\n    Investigating = 'INVESTIGATING',\n    Identified = 'IDENTIFIED',\n    Scheduled = 'SCHEDULED',\n    Resolved = 'RESOLVED',\n    Unknown = 'UNKNOWN'\n}\n\n/**\n * An object representing a breakdown of the different income types on the paystub.\n * @export\n * @interface IncomeBreakdown\n */\nexport interface IncomeBreakdown {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {IncomeBreakdownType}\n     * @memberof IncomeBreakdown\n     */\n    type: IncomeBreakdownType | null;\n    /**\n     * The hourly rate at which the income is paid.\n     * @type {number}\n     * @memberof IncomeBreakdown\n     */\n    rate: number | null;\n    /**\n     * The number of hours logged for this income for this pay period.\n     * @type {number}\n     * @memberof IncomeBreakdown\n     */\n    hours: number | null;\n    /**\n     * The total pay for this pay period.\n     * @type {number}\n     * @memberof IncomeBreakdown\n     */\n    total: number | null;\n}\n/**\n * The type of income. Possible values include:   `\\\"regular\\\"`: regular income   `\\\"overtime\\\"`: overtime income   `\\\"bonus\\\"`: bonus income\n * @export\n * @enum {string}\n */\nexport enum IncomeBreakdownType {\n    Bonus = 'bonus',\n    Overtime = 'overtime',\n    Regular = 'regular',\n    Null = 'null'\n}\n\n/**\n * Specify payroll data on the account.\n * @export\n * @interface IncomeOverride\n */\nexport interface IncomeOverride {\n    /**\n     * A list of paystubs associated with the account.\n     * @type {Array<PaystubOverride>}\n     * @memberof IncomeOverride\n     */\n    paystubs?: Array<PaystubOverride>;\n}\n/**\n * The verified fields from a paystub verification. All fields are provided as reported on the paystub.\n * @export\n * @interface IncomeSummary\n */\nexport interface IncomeSummary {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {EmployerIncomeSummaryFieldString}\n     * @memberof IncomeSummary\n     */\n    employer_name: EmployerIncomeSummaryFieldString;\n    /**\n     * \n     * @type {EmployeeIncomeSummaryFieldString}\n     * @memberof IncomeSummary\n     */\n    employee_name: EmployeeIncomeSummaryFieldString;\n    /**\n     * \n     * @type {YTDGrossIncomeSummaryFieldNumber}\n     * @memberof IncomeSummary\n     */\n    ytd_gross_income: YTDGrossIncomeSummaryFieldNumber;\n    /**\n     * \n     * @type {YTDNetIncomeSummaryFieldNumber}\n     * @memberof IncomeSummary\n     */\n    ytd_net_income: YTDNetIncomeSummaryFieldNumber;\n    /**\n     * \n     * @type {PayFrequency}\n     * @memberof IncomeSummary\n     */\n    pay_frequency: PayFrequency | null;\n    /**\n     * \n     * @type {ProjectedIncomeSummaryFieldNumber}\n     * @memberof IncomeSummary\n     */\n    projected_wage: ProjectedIncomeSummaryFieldNumber;\n    /**\n     * \n     * @type {TransactionData}\n     * @memberof IncomeSummary\n     */\n    verified_transaction: TransactionData | null;\n}\n/**\n * Field number for income summary\n * @export\n * @interface IncomeSummaryFieldNumber\n */\nexport interface IncomeSummaryFieldNumber {\n    [key: string]: object | any;\n\n    /**\n     * The value of the field.\n     * @type {number}\n     * @memberof IncomeSummaryFieldNumber\n     */\n    value: number;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof IncomeSummaryFieldNumber\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * Data about the income summary\n * @export\n * @interface IncomeSummaryFieldString\n */\nexport interface IncomeSummaryFieldString {\n    [key: string]: object | any;\n\n    /**\n     * The value of the field.\n     * @type {string}\n     * @memberof IncomeSummaryFieldString\n     */\n    value: string;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof IncomeSummaryFieldString\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * IncomeVerificationCreateRequest defines the request schema for `/income/verification/create`\n * @export\n * @interface IncomeVerificationCreateRequest\n */\nexport interface IncomeVerificationCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationCreateRequest\n     */\n    secret?: string;\n    /**\n     * The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process.\n     * @type {string}\n     * @memberof IncomeVerificationCreateRequest\n     */\n    webhook: string;\n    /**\n     * The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow.\n     * @type {string}\n     * @memberof IncomeVerificationCreateRequest\n     */\n    precheck_id?: string;\n    /**\n     * \n     * @type {IncomeVerificationCreateRequestOptions}\n     * @memberof IncomeVerificationCreateRequest\n     */\n    options?: IncomeVerificationCreateRequestOptions;\n}\n/**\n * Optional arguments for `/income/verification/create`\n * @export\n * @interface IncomeVerificationCreateRequestOptions\n */\nexport interface IncomeVerificationCreateRequestOptions {\n    /**\n     * An array of access tokens corresponding to the Items that will be cross-referenced with the product data. Plaid will attempt to correlate transaction history from these Items with data from the user\\'s paystub, such as date and amount. The `verification` status of the paystub as returned by `/income/verification/paystubs/get` will indicate if the verification status was successful, or, if not, why it failed. If the `transactions` product was not initialized for the Items during Link, it will be initialized after this Link session.\n     * @type {Array<string>}\n     * @memberof IncomeVerificationCreateRequestOptions\n     */\n    access_tokens?: Array<string>;\n}\n/**\n * IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`.\n * @export\n * @interface IncomeVerificationCreateResponse\n */\nexport interface IncomeVerificationCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * ID of the verification. This ID is persisted throughout the lifetime of the verification.\n     * @type {string}\n     * @memberof IncomeVerificationCreateResponse\n     */\n    income_verification_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationCreateResponse\n     */\n    request_id: string;\n}\n/**\n * IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`.\n * @export\n * @interface IncomeVerificationDocumentsDownloadRequest\n */\nexport interface IncomeVerificationDocumentsDownloadRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationDocumentsDownloadRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationDocumentsDownloadRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification.\n     * @type {string}\n     * @memberof IncomeVerificationDocumentsDownloadRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationDocumentsDownloadRequest\n     */\n    access_token?: string | null;\n    /**\n     * The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document\n     * @type {string}\n     * @memberof IncomeVerificationDocumentsDownloadRequest\n     */\n    document_id?: string | null;\n}\n/**\n * IncomeVerificationPaystubGetRequest defines the request schema for `/income/verification/paystub/get`.\n * @export\n * @interface IncomeVerificationPaystubGetRequest\n */\nexport interface IncomeVerificationPaystubGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification for which to get paystub information.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubGetRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubGetRequest\n     */\n    access_token?: string | null;\n}\n/**\n * IncomeVerificationPaystubGetResponse defines the response schema for `/income/verification/paystub/get`.\n * @export\n * @interface IncomeVerificationPaystubGetResponse\n */\nexport interface IncomeVerificationPaystubGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Paystub}\n     * @memberof IncomeVerificationPaystubGetResponse\n     */\n    paystub: Paystub;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof IncomeVerificationPaystubGetResponse\n     */\n    error?: PlaidError;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubGetResponse\n     */\n    request_id: string;\n}\n/**\n * IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`.\n * @export\n * @interface IncomeVerificationPaystubsGetRequest\n */\nexport interface IncomeVerificationPaystubsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubsGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification for which to get paystub information.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubsGetRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubsGetRequest\n     */\n    access_token?: string | null;\n}\n/**\n * IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`.\n * @export\n * @interface IncomeVerificationPaystubsGetResponse\n */\nexport interface IncomeVerificationPaystubsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * Metadata for an income document.\n     * @type {Array<DocumentMetadata>}\n     * @memberof IncomeVerificationPaystubsGetResponse\n     */\n    document_metadata?: Array<DocumentMetadata>;\n    /**\n     * \n     * @type {Array<Paystub>}\n     * @memberof IncomeVerificationPaystubsGetResponse\n     */\n    paystubs: Array<Paystub>;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof IncomeVerificationPaystubsGetResponse\n     */\n    error?: PlaidError;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationPaystubsGetResponse\n     */\n    request_id: string;\n}\n/**\n * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:  `\\\"HIGH\\\"`: It is very likely that this user can use the digital income verification flow.  \\\"`LOW`\\\": It is unlikely that this user can use the digital income verification flow.  `\\\"UNKNOWN\\\"`: It was not possible to determine if the user is supportable with the information passed.\n * @export\n * @enum {string}\n */\nexport enum IncomeVerificationPrecheckConfidence {\n    High = 'HIGH',\n    Low = 'LOW',\n    Unknown = 'UNKNOWN'\n}\n\n/**\n * Information about the end user\\'s employer\n * @export\n * @interface IncomeVerificationPrecheckEmployer\n */\nexport interface IncomeVerificationPrecheckEmployer {\n    /**\n     * The employer\\'s name\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployer\n     */\n    name?: string | null;\n    /**\n     * \n     * @type {IncomeVerificationPrecheckEmployerAddress}\n     * @memberof IncomeVerificationPrecheckEmployer\n     */\n    address?: IncomeVerificationPrecheckEmployerAddress | null;\n    /**\n     * The employer\\'s tax id\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployer\n     */\n    tax_id?: string | null;\n    /**\n     * The URL for the employer\\'s public website\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployer\n     */\n    url?: string | null;\n}\n/**\n * The address of the employer\n * @export\n * @interface IncomeVerificationPrecheckEmployerAddress\n */\nexport interface IncomeVerificationPrecheckEmployerAddress {\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddress\n     */\n    city?: string;\n    /**\n     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddress\n     */\n    region?: string;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddress\n     */\n    street?: string;\n    /**\n     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddress\n     */\n    postal_code?: string;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddress\n     */\n    country?: string;\n}\n/**\n * Data about the components comprising an address.\n * @export\n * @interface IncomeVerificationPrecheckEmployerAddressData\n */\nexport interface IncomeVerificationPrecheckEmployerAddressData {\n    [key: string]: object | any;\n\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddressData\n     */\n    city?: string;\n    /**\n     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddressData\n     */\n    region?: string;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddressData\n     */\n    street?: string;\n    /**\n     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddressData\n     */\n    postal_code?: string;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckEmployerAddressData\n     */\n    country?: string;\n}\n/**\n * Data about military info in the income verification precheck.\n * @export\n * @interface IncomeVerificationPrecheckMilitaryInfo\n */\nexport interface IncomeVerificationPrecheckMilitaryInfo {\n    /**\n     * Is the user currently active duty in the US military\n     * @type {boolean}\n     * @memberof IncomeVerificationPrecheckMilitaryInfo\n     */\n    is_active_duty?: boolean | null;\n    /**\n     * If the user is currently serving in the US military, the branch of the military they are serving in\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckMilitaryInfo\n     */\n    branch?: IncomeVerificationPrecheckMilitaryInfoBranchEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum IncomeVerificationPrecheckMilitaryInfoBranchEnum {\n    AirForce = 'AIR FORCE',\n    Army = 'ARMY',\n    CoastGuard = 'COAST GUARD',\n    Marines = 'MARINES',\n    Navy = 'NAVY',\n    Unknown = 'UNKNOWN'\n}\n\n/**\n * IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck`\n * @export\n * @interface IncomeVerificationPrecheckRequest\n */\nexport interface IncomeVerificationPrecheckRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    secret?: string;\n    /**\n     * \n     * @type {IncomeVerificationPrecheckUser}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    user?: IncomeVerificationPrecheckUser | null;\n    /**\n     * \n     * @type {IncomeVerificationPrecheckEmployer}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    employer?: IncomeVerificationPrecheckEmployer | null;\n    /**\n     * \n     * @type {string}\n     * @memberof IncomeVerificationPrecheckRequest\n     * @deprecated\n     */\n    transactions_access_token?: string;\n    /**\n     * An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.\n     * @type {Array<string>}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    transactions_access_tokens?: Array<string>;\n    /**\n     * \n     * @type {IncomeVerificationPrecheckMilitaryInfo}\n     * @memberof IncomeVerificationPrecheckRequest\n     */\n    us_military_info?: IncomeVerificationPrecheckMilitaryInfo | null;\n}\n/**\n * IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`.\n * @export\n * @interface IncomeVerificationPrecheckResponse\n */\nexport interface IncomeVerificationPrecheckResponse {\n    [key: string]: object | any;\n\n    /**\n     * ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckResponse\n     */\n    precheck_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckResponse\n     */\n    request_id: string;\n    /**\n     * \n     * @type {IncomeVerificationPrecheckConfidence}\n     * @memberof IncomeVerificationPrecheckResponse\n     */\n    confidence: IncomeVerificationPrecheckConfidence;\n}\n/**\n * Information about the user whose eligibility is being evaluated.\n * @export\n * @interface IncomeVerificationPrecheckUser\n */\nexport interface IncomeVerificationPrecheckUser {\n    /**\n     * The user\\'s first name\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckUser\n     */\n    first_name?: string | null;\n    /**\n     * The user\\'s last name\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckUser\n     */\n    last_name?: string | null;\n    /**\n     * The user\\'s email address\n     * @type {string}\n     * @memberof IncomeVerificationPrecheckUser\n     */\n    email_address?: string | null;\n    /**\n     * \n     * @type {SignalAddressData}\n     * @memberof IncomeVerificationPrecheckUser\n     */\n    home_address?: SignalAddressData | null;\n}\n/**\n * IncomeVerificationRefreshRequest defines the request schema for `/income/verification/refresh`\n * @export\n * @interface IncomeVerificationRefreshRequest\n */\nexport interface IncomeVerificationRefreshRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationRefreshRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationRefreshRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification.\n     * @type {string}\n     * @memberof IncomeVerificationRefreshRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationRefreshRequest\n     */\n    access_token?: string | null;\n}\n/**\n * IncomeVerificationRequestResponse defines the response schema for `/income/verification/refresh`\n * @export\n * @interface IncomeVerificationRefreshResponse\n */\nexport interface IncomeVerificationRefreshResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationRefreshResponse\n     */\n    request_id: string;\n    /**\n     * \n     * @type {VerificationRefreshStatus}\n     * @memberof IncomeVerificationRefreshResponse\n     */\n    verification_refresh_status: VerificationRefreshStatus;\n}\n/**\n * Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow.\n * @export\n * @interface IncomeVerificationStatusWebhook\n */\nexport interface IncomeVerificationStatusWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `\\\"INCOME\\\"`\n     * @type {string}\n     * @memberof IncomeVerificationStatusWebhook\n     */\n    webhook_type: string;\n    /**\n     * `income_verification`\n     * @type {string}\n     * @memberof IncomeVerificationStatusWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `income_verification_id` of the verification instance whose status is being reported.\n     * @type {string}\n     * @memberof IncomeVerificationStatusWebhook\n     */\n    income_verification_id: string;\n    /**\n     * The Item ID associated with the verification.\n     * @type {string}\n     * @memberof IncomeVerificationStatusWebhook\n     */\n    item_id: string;\n    /**\n     * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: The income verification has been sent to the user for review.\n     * @type {string}\n     * @memberof IncomeVerificationStatusWebhook\n     */\n    verification_status: string;\n}\n/**\n * IncomeVerificationSummaryGetRequest defines the request schema for `/income/verification/summary/get`.\n * @export\n * @interface IncomeVerificationSummaryGetRequest\n */\nexport interface IncomeVerificationSummaryGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationSummaryGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationSummaryGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification.\n     * @type {string}\n     * @memberof IncomeVerificationSummaryGetRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationSummaryGetRequest\n     */\n    access_token?: string | null;\n}\n/**\n * IncomeVerificationSummaryGetResponse defines the response schema for `/income/verification/summary/get`.\n * @export\n * @interface IncomeVerificationSummaryGetResponse\n */\nexport interface IncomeVerificationSummaryGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A list of income summaries.\n     * @type {Array<IncomeSummary>}\n     * @memberof IncomeVerificationSummaryGetResponse\n     */\n    income_summaries: Array<IncomeSummary>;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof IncomeVerificationSummaryGetResponse\n     */\n    error?: PlaidError;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationSummaryGetResponse\n     */\n    request_id: string;\n}\n/**\n * IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get`\n * @export\n * @interface IncomeVerificationTaxformsGetRequest\n */\nexport interface IncomeVerificationTaxformsGetRequest {\n    [key: string]: object | any;\n\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationTaxformsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof IncomeVerificationTaxformsGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification.\n     * @type {string}\n     * @memberof IncomeVerificationTaxformsGetRequest\n     * @deprecated\n     */\n    income_verification_id?: string | null;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof IncomeVerificationTaxformsGetRequest\n     */\n    access_token?: string | null;\n}\n/**\n * IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get`\n * @export\n * @interface IncomeVerificationTaxformsGetResponse\n */\nexport interface IncomeVerificationTaxformsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof IncomeVerificationTaxformsGetResponse\n     */\n    request_id?: string;\n    /**\n     * \n     * @type {Array<DocumentMetadata>}\n     * @memberof IncomeVerificationTaxformsGetResponse\n     */\n    document_metadata: Array<DocumentMetadata>;\n    /**\n     * A list of forms.\n     * @type {Array<Taxform>}\n     * @memberof IncomeVerificationTaxformsGetResponse\n     */\n    taxforms: Array<Taxform>;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof IncomeVerificationTaxformsGetResponse\n     */\n    error?: PlaidError;\n}\n/**\n * Status of the income verification webhook\n * @export\n * @interface IncomeVerificationWebhookStatus\n */\nexport interface IncomeVerificationWebhookStatus {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {string}\n     * @memberof IncomeVerificationWebhookStatus\n     */\n    id: string;\n}\n/**\n * The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.\n * @export\n * @interface InflowModel\n */\nexport interface InflowModel {\n    [key: string]: object | any;\n\n    /**\n     * Inflow model. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.\n     * @type {string}\n     * @memberof InflowModel\n     */\n    type: string;\n    /**\n     * Amount of income per month. This value is required if `type` is `monthly-income`.\n     * @type {number}\n     * @memberof InflowModel\n     */\n    income_amount: number;\n    /**\n     * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.\n     * @type {number}\n     * @memberof InflowModel\n     */\n    payment_day_of_month: number;\n    /**\n     * The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.\n     * @type {string}\n     * @memberof InflowModel\n     */\n    transaction_name: string;\n    /**\n     * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.\n     * @type {string}\n     * @memberof InflowModel\n     */\n    statement_day_of_month: string;\n}\n/**\n * Fired when an Item\\'s initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.\n * @export\n * @interface InitialUpdateWebhook\n */\nexport interface InitialUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `TRANSACTIONS`\n     * @type {string}\n     * @memberof InitialUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `INITIAL_UPDATE`\n     * @type {string}\n     * @memberof InitialUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * The error code associated with the webhook.\n     * @type {string}\n     * @memberof InitialUpdateWebhook\n     */\n    error?: string | null;\n    /**\n     * The number of new, unfetched transactions available.\n     * @type {number}\n     * @memberof InitialUpdateWebhook\n     */\n    new_transactions: number;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof InitialUpdateWebhook\n     */\n    item_id: string;\n}\n/**\n * Details relating to a specific financial institution\n * @export\n * @interface Institution\n */\nexport interface Institution {\n    [key: string]: object | any;\n\n    /**\n     * Unique identifier for the institution\n     * @type {string}\n     * @memberof Institution\n     */\n    institution_id: string;\n    /**\n     * The official name of the institution\n     * @type {string}\n     * @memberof Institution\n     */\n    name: string;\n    /**\n     * A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/).\n     * @type {Array<Products>}\n     * @memberof Institution\n     */\n    products: Array<Products>;\n    /**\n     * A list of the country codes supported by the institution.\n     * @type {Array<CountryCode>}\n     * @memberof Institution\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * The URL for the institution\\'s website\n     * @type {string}\n     * @memberof Institution\n     */\n    url?: string | null;\n    /**\n     * Hexadecimal representation of the primary color used by the institution\n     * @type {string}\n     * @memberof Institution\n     */\n    primary_color?: string | null;\n    /**\n     * Base64 encoded representation of the institution\\'s logo\n     * @type {string}\n     * @memberof Institution\n     */\n    logo?: string | null;\n    /**\n     * A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution.\n     * @type {Array<string>}\n     * @memberof Institution\n     */\n    routing_numbers: Array<string>;\n    /**\n     * Indicates that the institution has an OAuth login flow. This is primarily relevant to institutions with European country codes.\n     * @type {boolean}\n     * @memberof Institution\n     */\n    oauth: boolean;\n    /**\n     * \n     * @type {InstitutionStatus}\n     * @memberof Institution\n     */\n    status?: InstitutionStatus | null;\n    /**\n     * \n     * @type {PaymentInitiationMetadata}\n     * @memberof Institution\n     */\n    payment_initiation_metadata?: PaymentInitiationMetadata | null;\n    /**\n     * \n     * @type {AuthMetadata}\n     * @memberof Institution\n     */\n    auth_metadata?: AuthMetadata | null;\n}\n/**\n * The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution\\'s status, Plaid will return null rather than potentially inaccurate data.  Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment. \n * @export\n * @interface InstitutionStatus\n */\nexport interface InstitutionStatus {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    item_logins: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    transactions_updates: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    auth: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    identity: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    investments_updates: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    liabilities_updates?: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    liabilities?: ProductStatus;\n    /**\n     * \n     * @type {ProductStatus}\n     * @memberof InstitutionStatus\n     */\n    investments?: ProductStatus;\n    /**\n     * Details of recent health incidents associated with the institution.\n     * @type {Array<HealthIncident>}\n     * @memberof InstitutionStatus\n     */\n    health_incidents?: Array<HealthIncident> | null;\n}\n/**\n * InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id`\n * @export\n * @interface InstitutionsGetByIdRequest\n */\nexport interface InstitutionsGetByIdRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsGetByIdRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsGetByIdRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the institution to get details about\n     * @type {string}\n     * @memberof InstitutionsGetByIdRequest\n     */\n    institution_id: string;\n    /**\n     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. \n     * @type {Array<CountryCode>}\n     * @memberof InstitutionsGetByIdRequest\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * \n     * @type {InstitutionsGetByIdRequestOptions}\n     * @memberof InstitutionsGetByIdRequest\n     */\n    options?: InstitutionsGetByIdRequestOptions;\n}\n/**\n * Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`.\n * @export\n * @interface InstitutionsGetByIdRequestOptions\n */\nexport interface InstitutionsGetByIdRequestOptions {\n    /**\n     * When `true`, return an institution\\'s logo, brand color, and URL. When available, the bank\\'s logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.  Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.\n     * @type {boolean}\n     * @memberof InstitutionsGetByIdRequestOptions\n     */\n    include_optional_metadata?: boolean;\n    /**\n     * If `true`, the response will include status information about the institution. Default value is `false`.\n     * @type {boolean}\n     * @memberof InstitutionsGetByIdRequestOptions\n     */\n    include_status?: boolean;\n    /**\n     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.\n     * @type {boolean}\n     * @memberof InstitutionsGetByIdRequestOptions\n     */\n    include_auth_metadata?: boolean;\n    /**\n     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.\n     * @type {boolean}\n     * @memberof InstitutionsGetByIdRequestOptions\n     */\n    include_payment_initiation_metadata?: boolean;\n}\n/**\n * InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id`\n * @export\n * @interface InstitutionsGetByIdResponse\n */\nexport interface InstitutionsGetByIdResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Institution}\n     * @memberof InstitutionsGetByIdResponse\n     */\n    institution: Institution;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof InstitutionsGetByIdResponse\n     */\n    request_id: string;\n}\n/**\n * InstitutionsGetRequest defines the request schema for `/institutions/get`\n * @export\n * @interface InstitutionsGetRequest\n */\nexport interface InstitutionsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsGetRequest\n     */\n    secret?: string;\n    /**\n     * The total number of Institutions to return.\n     * @type {number}\n     * @memberof InstitutionsGetRequest\n     */\n    count: number;\n    /**\n     * The number of Institutions to skip.\n     * @type {number}\n     * @memberof InstitutionsGetRequest\n     */\n    offset: number;\n    /**\n     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard.   In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. \n     * @type {Array<CountryCode>}\n     * @memberof InstitutionsGetRequest\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * \n     * @type {InstitutionsGetRequestOptions}\n     * @memberof InstitutionsGetRequest\n     */\n    options?: InstitutionsGetRequestOptions;\n}\n/**\n * An optional object to filter `/institutions/get` results.\n * @export\n * @interface InstitutionsGetRequestOptions\n */\nexport interface InstitutionsGetRequestOptions {\n    /**\n     * Filter the Institutions based on which products they support. \n     * @type {Array<Products>}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    products?: Array<Products> | null;\n    /**\n     * Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid.\n     * @type {Array<string>}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    routing_numbers?: Array<string> | null;\n    /**\n     * Limit results to institutions with or without OAuth login flows. This is primarily relevant to institutions with European country codes.\n     * @type {boolean}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    oauth?: boolean | null;\n    /**\n     * When `true`, return the institution\\'s homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.\n     * @type {boolean}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    include_optional_metadata?: boolean;\n    /**\n     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.\n     * @type {boolean}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    include_auth_metadata?: boolean;\n    /**\n     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.\n     * @type {boolean}\n     * @memberof InstitutionsGetRequestOptions\n     */\n    include_payment_initiation_metadata?: boolean;\n}\n/**\n * InstitutionsGetResponse defines the response schema for `/institutions/get`\n * @export\n * @interface InstitutionsGetResponse\n */\nexport interface InstitutionsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A list of Plaid institutions\n     * @type {Array<Institution>}\n     * @memberof InstitutionsGetResponse\n     */\n    institutions: Array<Institution>;\n    /**\n     * The total number of institutions available via this endpoint\n     * @type {number}\n     * @memberof InstitutionsGetResponse\n     */\n    total: number;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof InstitutionsGetResponse\n     */\n    request_id: string;\n}\n/**\n * An account filter to apply to institutions search requests\n * @export\n * @interface InstitutionsSearchAccountFilter\n */\nexport interface InstitutionsSearchAccountFilter {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<AccountSubtype>}\n     * @memberof InstitutionsSearchAccountFilter\n     */\n    loan?: Array<AccountSubtype>;\n    /**\n     * \n     * @type {Array<AccountSubtype>}\n     * @memberof InstitutionsSearchAccountFilter\n     */\n    depository?: Array<AccountSubtype>;\n    /**\n     * \n     * @type {Array<AccountSubtype>}\n     * @memberof InstitutionsSearchAccountFilter\n     */\n    credit?: Array<AccountSubtype>;\n    /**\n     * \n     * @type {Array<AccountSubtype>}\n     * @memberof InstitutionsSearchAccountFilter\n     */\n    investment?: Array<AccountSubtype>;\n}\n/**\n * Additional options that will be used to filter institutions by various Payment Initiation configurations.\n * @export\n * @interface InstitutionsSearchPaymentInitiationOptions\n */\nexport interface InstitutionsSearchPaymentInitiationOptions {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the payment\n     * @type {string}\n     * @memberof InstitutionsSearchPaymentInitiationOptions\n     */\n    payment_id?: string | null;\n}\n/**\n * InstitutionsSearchRequest defines the request schema for `/institutions/search`\n * @export\n * @interface InstitutionsSearchRequest\n */\nexport interface InstitutionsSearchRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsSearchRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof InstitutionsSearchRequest\n     */\n    secret?: string;\n    /**\n     * The search query. Institutions with names matching the query are returned\n     * @type {string}\n     * @memberof InstitutionsSearchRequest\n     */\n    query: string;\n    /**\n     * Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.\n     * @type {Array<Products>}\n     * @memberof InstitutionsSearchRequest\n     */\n    products: Array<Products> | null;\n    /**\n     * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. \n     * @type {Array<CountryCode>}\n     * @memberof InstitutionsSearchRequest\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * \n     * @type {InstitutionsSearchRequestOptions}\n     * @memberof InstitutionsSearchRequest\n     */\n    options?: InstitutionsSearchRequestOptions;\n}\n/**\n * An optional object to filter `/institutions/search` results.\n * @export\n * @interface InstitutionsSearchRequestOptions\n */\nexport interface InstitutionsSearchRequestOptions {\n    /**\n     * Limit results to institutions with or without OAuth login flows. This is primarily relevant to institutions with European country codes\n     * @type {boolean}\n     * @memberof InstitutionsSearchRequestOptions\n     */\n    oauth?: boolean | null;\n    /**\n     * When true, return the institution\\'s homepage URL, logo and primary brand color.\n     * @type {boolean}\n     * @memberof InstitutionsSearchRequestOptions\n     */\n    include_optional_metadata?: boolean;\n    /**\n     * When `true`, returns metadata related to the Auth product indicating which auth methods are supported.\n     * @type {boolean}\n     * @memberof InstitutionsSearchRequestOptions\n     */\n    include_auth_metadata?: boolean | null;\n    /**\n     * When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.\n     * @type {boolean}\n     * @memberof InstitutionsSearchRequestOptions\n     */\n    include_payment_initiation_metadata?: boolean | null;\n    /**\n     * \n     * @type {InstitutionsSearchPaymentInitiationOptions}\n     * @memberof InstitutionsSearchRequestOptions\n     */\n    payment_initiation?: InstitutionsSearchPaymentInitiationOptions | null;\n}\n/**\n * InstitutionsSearchResponse defines the response schema for `/institutions/search`\n * @export\n * @interface InstitutionsSearchResponse\n */\nexport interface InstitutionsSearchResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of institutions matching the search criteria\n     * @type {Array<Institution>}\n     * @memberof InstitutionsSearchResponse\n     */\n    institutions: Array<Institution>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof InstitutionsSearchResponse\n     */\n    request_id: string;\n}\n/**\n * Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).\n * @export\n * @enum {string}\n */\nexport enum InvestmentAccountSubtype {\n    _529 = '529',\n    _401a = '401a',\n    _401k = '401k',\n    _403B = '403B',\n    _457b = '457b',\n    Brokerage = 'brokerage',\n    CashIsa = 'cash isa',\n    EducationSavingsAccount = 'education savings account',\n    FixedAnnuity = 'fixed annuity',\n    Gic = 'gic',\n    HealthReimbursementArrangement = 'health reimbursement arrangement',\n    Hsa = 'hsa',\n    Ira = 'ira',\n    Isa = 'isa',\n    Keogh = 'keogh',\n    Lif = 'lif',\n    LifeInsurance = 'life insurance',\n    Lira = 'lira',\n    Lrif = 'lrif',\n    Lrsp = 'lrsp',\n    MutualFund = 'mutual fund',\n    NonTaxableBrokerageAccount = 'non-taxable brokerage account',\n    Other = 'other',\n    OtherAnnuity = 'other annuity',\n    OtherInsurance = 'other insurance',\n    Person = 'person',\n    Prif = 'prif',\n    ProfitSharingPlan = 'profit sharing plan',\n    Qshr = 'qshr',\n    Rdsp = 'rdsp',\n    Resp = 'resp',\n    Retirement = 'retirement',\n    Rlif = 'rlif',\n    Roth = 'roth',\n    Roth401k = 'roth 401k',\n    Rrif = 'rrif',\n    Rrsp = 'rrsp',\n    Sarsep = 'sarsep',\n    SepIra = 'sep ira',\n    SimpleIra = 'simple ira',\n    Sipp = 'sipp',\n    StockPlan = 'stock plan',\n    Tfsa = 'tfsa',\n    Trust = 'trust',\n    Ugma = 'ugma',\n    Utma = 'utma',\n    VariableAnnuity = 'variable annuity',\n    All = 'all'\n}\n\n/**\n * A filter to apply to `investment`-type accounts (or `brokerage`-type acconunts for API versions 2018-05-22 and earlier).\n * @export\n * @interface InvestmentFilter\n */\nexport interface InvestmentFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<InvestmentAccountSubtype>}\n     * @memberof InvestmentFilter\n     */\n    account_subtypes: Array<InvestmentAccountSubtype>;\n}\n/**\n * An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`.\n * @export\n * @interface InvestmentHoldingsGetRequestOptions\n */\nexport interface InvestmentHoldingsGetRequestOptions {\n    /**\n     * An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof InvestmentHoldingsGetRequestOptions\n     */\n    account_ids?: Array<string>;\n}\n/**\n * A transaction within an investment account.\n * @export\n * @interface InvestmentTransaction\n */\nexport interface InvestmentTransaction {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    investment_transaction_id: string;\n    /**\n     * A legacy field formerly used internally by Plaid to identify certain canceled transactions.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     * @deprecated\n     */\n    cancel_transaction_id?: string | null;\n    /**\n     * The `account_id` of the account against which this transaction posted.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    account_id: string;\n    /**\n     * The `security_id` to which this transaction is related.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    security_id: string | null;\n    /**\n     * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    date: string;\n    /**\n     * The institutionâ€™s description of the transaction.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    name: string;\n    /**\n     * The number of units of the security involved in this transaction.\n     * @type {number}\n     * @memberof InvestmentTransaction\n     */\n    quantity: number;\n    /**\n     * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.\n     * @type {number}\n     * @memberof InvestmentTransaction\n     */\n    amount: number;\n    /**\n     * The price of the security at which this transaction occurred.\n     * @type {number}\n     * @memberof InvestmentTransaction\n     */\n    price: number;\n    /**\n     * The combined value of all fees applied to this transaction\n     * @type {number}\n     * @memberof InvestmentTransaction\n     */\n    fees: number | null;\n    /**\n     * Value is one of the following: `buy`: Buying an investment `sell`: Selling an investment `cancel`: A cancellation of a pending transaction `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    type: InvestmentTransactionTypeEnum;\n    /**\n     * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    subtype: InvestmentTransactionSubtypeEnum;\n    /**\n     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof InvestmentTransaction\n     */\n    unofficial_currency_code: string | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum InvestmentTransactionTypeEnum {\n    Buy = 'buy',\n    Sell = 'sell',\n    Cancel = 'cancel',\n    Cash = 'cash',\n    Fee = 'fee',\n    Transfer = 'transfer'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum InvestmentTransactionSubtypeEnum {\n    AccountFee = 'account fee',\n    Adjustment = 'adjustment',\n    Assignment = 'assignment',\n    Buy = 'buy',\n    BuyToCover = 'buy to cover',\n    Contribution = 'contribution',\n    Deposit = 'deposit',\n    Distribution = 'distribution',\n    Dividend = 'dividend',\n    DividendReinvestment = 'dividend reinvestment',\n    Exercise = 'exercise',\n    Expire = 'expire',\n    FundFee = 'fund fee',\n    Interest = 'interest',\n    InterestReceivable = 'interest receivable',\n    InterestReinvestment = 'interest reinvestment',\n    LegalFee = 'legal fee',\n    LoanPayment = 'loan payment',\n    LongTermCapitalGain = 'long-term capital gain',\n    LongTermCapitalGainReinvestment = 'long-term capital gain reinvestment',\n    ManagementFee = 'management fee',\n    MarginExpense = 'margin expense',\n    Merger = 'merger',\n    MiscellaneousFee = 'miscellaneous fee',\n    NonQualifiedDividend = 'non-qualified dividend',\n    NonResidentTax = 'non-resident tax',\n    PendingCredit = 'pending credit',\n    PendingDebit = 'pending debit',\n    QualifiedDividend = 'qualified dividend',\n    Rebalance = 'rebalance',\n    ReturnOfPrincipal = 'return of principal',\n    Sell = 'sell',\n    SellShort = 'sell short',\n    ShortTermCapitalGain = 'short-term capital gain',\n    ShortTermCapitalGainReinvestment = 'short-term capital gain reinvestment',\n    SpinOff = 'spin off',\n    Split = 'split',\n    StockDistribution = 'stock distribution',\n    Tax = 'tax',\n    TaxWithheld = 'tax withheld',\n    Transfer = 'transfer',\n    TransferFee = 'transfer fee',\n    TrustFee = 'trust fee',\n    UnqualifiedGain = 'unqualified gain',\n    Withdrawal = 'withdrawal'\n}\n\n/**\n * Fired when new or canceled transactions have been detected on an investment account.\n * @export\n * @interface InvestmentsDefaultUpdateWebhook\n */\nexport interface InvestmentsDefaultUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `INVESTMENTS_TRANSACTIONS`\n     * @type {string}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `DEFAULT_UPDATE`\n     * @type {string}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    error?: PlaidError;\n    /**\n     * The number of new transactions reported since the last time this webhook was fired.\n     * @type {number}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    new_investments_transactions: number;\n    /**\n     * The number of canceled transactions reported since the last time this webhook was fired.\n     * @type {number}\n     * @memberof InvestmentsDefaultUpdateWebhook\n     */\n    canceled_investments_transactions: number;\n}\n/**\n * InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get`\n * @export\n * @interface InvestmentsHoldingsGetRequest\n */\nexport interface InvestmentsHoldingsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof InvestmentsHoldingsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof InvestmentsHoldingsGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof InvestmentsHoldingsGetRequest\n     */\n    access_token: string;\n    /**\n     * \n     * @type {InvestmentHoldingsGetRequestOptions}\n     * @memberof InvestmentsHoldingsGetRequest\n     */\n    options?: InvestmentHoldingsGetRequestOptions;\n}\n/**\n * InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get`\n * @export\n * @interface InvestmentsHoldingsGetResponse\n */\nexport interface InvestmentsHoldingsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * The accounts associated with the Item\n     * @type {Array<AccountBase>}\n     * @memberof InvestmentsHoldingsGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. \n     * @type {Array<Holding>}\n     * @memberof InvestmentsHoldingsGetResponse\n     */\n    holdings: Array<Holding>;\n    /**\n     * Objects describing the securities held in the accounts associated with the Item. \n     * @type {Array<Security>}\n     * @memberof InvestmentsHoldingsGetResponse\n     */\n    securities: Array<Security>;\n    /**\n     * \n     * @type {Item}\n     * @memberof InvestmentsHoldingsGetResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof InvestmentsHoldingsGetResponse\n     */\n    request_id: string;\n}\n/**\n * InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get`\n * @export\n * @interface InvestmentsTransactionsGetRequest\n */\nexport interface InvestmentsTransactionsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    access_token: string;\n    /**\n     * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    start_date: string;\n    /**\n     * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    end_date: string;\n    /**\n     * \n     * @type {InvestmentsTransactionsGetRequestOptions}\n     * @memberof InvestmentsTransactionsGetRequest\n     */\n    options?: InvestmentsTransactionsGetRequestOptions;\n}\n/**\n * An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`.\n * @export\n * @interface InvestmentsTransactionsGetRequestOptions\n */\nexport interface InvestmentsTransactionsGetRequestOptions {\n    /**\n     * An array of `account_ids` to retrieve for the Item.\n     * @type {Array<string>}\n     * @memberof InvestmentsTransactionsGetRequestOptions\n     */\n    account_ids?: Array<string>;\n    /**\n     * The number of transactions to fetch. \n     * @type {number}\n     * @memberof InvestmentsTransactionsGetRequestOptions\n     */\n    count?: number;\n    /**\n     * The number of transactions to skip when fetching transaction history\n     * @type {number}\n     * @memberof InvestmentsTransactionsGetRequestOptions\n     */\n    offset?: number;\n}\n/**\n * InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get`\n * @export\n * @interface InvestmentsTransactionsGetResponse\n */\nexport interface InvestmentsTransactionsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Item}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    item: Item;\n    /**\n     * The accounts for which transaction history is being fetched.\n     * @type {Array<AccountBase>}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * All securities for which there is a corresponding transaction being fetched.\n     * @type {Array<Security>}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    securities: Array<Security>;\n    /**\n     * The transactions being fetched\n     * @type {Array<InvestmentTransaction>}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    investment_transactions: Array<InvestmentTransaction>;\n    /**\n     * The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.\\'\n     * @type {number}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    total_investment_transactions: number;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof InvestmentsTransactionsGetResponse\n     */\n    request_id: string;\n}\n/**\n * Specify the list of investments transactions on the account.\n * @export\n * @interface InvestmentsTransactionsOverride\n */\nexport interface InvestmentsTransactionsOverride {\n    /**\n     * Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.\n     * @type {string}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    date: string;\n    /**\n     * The institution\\'s description of the transaction.\n     * @type {string}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    name: string;\n    /**\n     * The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.\n     * @type {number}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    quantity: number;\n    /**\n     * The price of the security at which this transaction occurred.\n     * @type {number}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    price: number;\n    /**\n     * The combined value of all fees applied to this transaction.\n     * @type {number}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    fees?: number;\n    /**\n     * The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer\n     * @type {string}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    type: string;\n    /**\n     * Either a valid `iso_currency_code` or `unofficial_currency_code`\n     * @type {string}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    currency: string;\n    /**\n     * \n     * @type {SecurityOverride}\n     * @memberof InvestmentsTransactionsOverride\n     */\n    security?: SecurityOverride;\n}\n/**\n * Metadata about the Item.\n * @export\n * @interface Item\n */\nexport interface Item {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.\n     * @type {string}\n     * @memberof Item\n     */\n    item_id: string;\n    /**\n     * The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.\n     * @type {string}\n     * @memberof Item\n     */\n    institution_id?: string | null;\n    /**\n     * The URL registered to receive webhooks for the Item.\n     * @type {string}\n     * @memberof Item\n     */\n    webhook: string | null;\n    /**\n     * \n     * @type {Error}\n     * @memberof Item\n     */\n    error: Error | null;\n    /**\n     * A list of products available for the Item that have not yet been accessed.\n     * @type {Array<Products>}\n     * @memberof Item\n     */\n    available_products: Array<Products>;\n    /**\n     * A list of products that have been billed for the Item. Note - `billed_products` is populated in all environments but only requests in Production are billed. \n     * @type {Array<Products>}\n     * @memberof Item\n     */\n    billed_products: Array<Products>;\n    /**\n     * A list of authorized products for the Item. \n     * @type {Array<Products>}\n     * @memberof Item\n     */\n    products?: Array<Products>;\n    /**\n     * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. \n     * @type {string}\n     * @memberof Item\n     */\n    consent_expiration_time: string | null;\n    /**\n     * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated\n     * @type {string}\n     * @memberof Item\n     */\n    update_type: ItemUpdateTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ItemUpdateTypeEnum {\n    Background = 'background',\n    UserPresentRequired = 'user_present_required'\n}\n\n/**\n * ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate`\n * @export\n * @interface ItemAccessTokenInvalidateRequest\n */\nexport interface ItemAccessTokenInvalidateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemAccessTokenInvalidateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemAccessTokenInvalidateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemAccessTokenInvalidateRequest\n     */\n    access_token: string;\n}\n/**\n * ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate`\n * @export\n * @interface ItemAccessTokenInvalidateResponse\n */\nexport interface ItemAccessTokenInvalidateResponse {\n    [key: string]: object | any;\n\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemAccessTokenInvalidateResponse\n     */\n    new_access_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemAccessTokenInvalidateResponse\n     */\n    request_id: string;\n}\n/**\n * Request to list connected applications for a user.\n * @export\n * @interface ItemApplicationListRequest\n */\nexport interface ItemApplicationListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemApplicationListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemApplicationListRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemApplicationListRequest\n     */\n    access_token?: string | null;\n}\n/**\n * Describes the connected application for a particular end user.\n * @export\n * @interface ItemApplicationListResponse\n */\nexport interface ItemApplicationListResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemApplicationListResponse\n     */\n    request_id?: string;\n    /**\n     * A list of connected applications.\n     * @type {Array<ConnectedApplication>}\n     * @memberof ItemApplicationListResponse\n     */\n    applications: Array<ConnectedApplication>;\n}\n/**\n * User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request.\n * @export\n * @interface ItemApplicationListUserAuth\n */\nexport interface ItemApplicationListUserAuth {\n    /**\n     * Account username.\n     * @type {string}\n     * @memberof ItemApplicationListUserAuth\n     */\n    user_id?: string | null;\n    /**\n     * Account username hashed by FI.\n     * @type {string}\n     * @memberof ItemApplicationListUserAuth\n     */\n    fi_username_hash?: string | null;\n}\n/**\n * ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update`\n * @export\n * @interface ItemApplicationScopesUpdateRequest\n */\nexport interface ItemApplicationScopesUpdateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    access_token: string;\n    /**\n     * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    application_id: string;\n    /**\n     * \n     * @type {Scopes}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    scopes: Scopes;\n    /**\n     * When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    state?: string;\n    /**\n     * \n     * @type {ScopesContext}\n     * @memberof ItemApplicationScopesUpdateRequest\n     */\n    context: ScopesContext;\n}\n/**\n * ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update`\n * @export\n * @interface ItemApplicationScopesUpdateResponse\n */\nexport interface ItemApplicationScopesUpdateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemApplicationScopesUpdateResponse\n     */\n    request_id: string;\n}\n/**\n * Fired when an error is encountered with an Item. The error can be resolved by having the user go through Linkâ€™s update mode.\n * @export\n * @interface ItemErrorWebhook\n */\nexport interface ItemErrorWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ITEM`\n     * @type {string}\n     * @memberof ItemErrorWebhook\n     */\n    webhook_type: string;\n    /**\n     * `ERROR`\n     * @type {string}\n     * @memberof ItemErrorWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof ItemErrorWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof ItemErrorWebhook\n     */\n    error: PlaidError;\n}\n/**\n * ItemGetRequest defines the request schema for `/item/get`\n * @export\n * @interface ItemGetRequest\n */\nexport interface ItemGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemGetRequest\n     */\n    access_token: string;\n}\n/**\n * ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update`\n * @export\n * @interface ItemGetResponse\n */\nexport interface ItemGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Item}\n     * @memberof ItemGetResponse\n     */\n    item: Item;\n    /**\n     * \n     * @type {ItemStatusNullable}\n     * @memberof ItemGetResponse\n     */\n    status?: ItemStatusNullable | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemGetResponse\n     */\n    request_id: string;\n}\n/**\n * ItemImportRequest defines the request schema for `/item/import`\n * @export\n * @interface ItemImportRequest\n */\nexport interface ItemImportRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemImportRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemImportRequest\n     */\n    secret?: string;\n    /**\n     * Array of product strings\n     * @type {Array<Products>}\n     * @memberof ItemImportRequest\n     */\n    products: Array<Products>;\n    /**\n     * \n     * @type {ItemImportRequestUserAuth}\n     * @memberof ItemImportRequest\n     */\n    user_auth: ItemImportRequestUserAuth;\n    /**\n     * \n     * @type {ItemImportRequestOptions}\n     * @memberof ItemImportRequest\n     */\n    options?: ItemImportRequestOptions;\n}\n/**\n * An optional object to configure `/item/import` request.\n * @export\n * @interface ItemImportRequestOptions\n */\nexport interface ItemImportRequestOptions {\n    /**\n     * Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail. \n     * @type {string}\n     * @memberof ItemImportRequestOptions\n     */\n    webhook?: string;\n}\n/**\n * Object of user ID and auth token pair, permitting Plaid to aggregate a userâ€™s accounts\n * @export\n * @interface ItemImportRequestUserAuth\n */\nexport interface ItemImportRequestUserAuth {\n    /**\n     * Opaque user identifier\n     * @type {string}\n     * @memberof ItemImportRequestUserAuth\n     */\n    user_id: string;\n    /**\n     * Authorization token Plaid will use to aggregate this userâ€™s accounts\n     * @type {string}\n     * @memberof ItemImportRequestUserAuth\n     */\n    auth_token: string;\n}\n/**\n * ItemImportResponse defines the response schema for `/item/import`\n * @export\n * @interface ItemImportResponse\n */\nexport interface ItemImportResponse {\n    [key: string]: object | any;\n\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemImportResponse\n     */\n    access_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemImportResponse\n     */\n    request_id: string;\n}\n/**\n * Fired once Plaid calculates income from an Item.\n * @export\n * @interface ItemProductReadyWebhook\n */\nexport interface ItemProductReadyWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `INCOME`\n     * @type {string}\n     * @memberof ItemProductReadyWebhook\n     */\n    webhook_type: string;\n    /**\n     * `PRODUCT_READY`\n     * @type {string}\n     * @memberof ItemProductReadyWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof ItemProductReadyWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof ItemProductReadyWebhook\n     */\n    error?: PlaidError;\n}\n/**\n * ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create`\n * @export\n * @interface ItemPublicTokenCreateRequest\n */\nexport interface ItemPublicTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemPublicTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemPublicTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemPublicTokenCreateRequest\n     */\n    access_token: string;\n}\n/**\n * ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create`\n * @export\n * @interface ItemPublicTokenCreateResponse\n */\nexport interface ItemPublicTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A `public_token` for the particular Item corresponding to the specified `access_token`\n     * @type {string}\n     * @memberof ItemPublicTokenCreateResponse\n     */\n    public_token: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemPublicTokenCreateResponse\n     */\n    expiration?: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemPublicTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange`\n * @export\n * @interface ItemPublicTokenExchangeRequest\n */\nexport interface ItemPublicTokenExchangeRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeRequest\n     */\n    secret?: string;\n    /**\n     * Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`.\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeRequest\n     */\n    public_token: string;\n}\n/**\n * ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange`\n * @export\n * @interface ItemPublicTokenExchangeResponse\n */\nexport interface ItemPublicTokenExchangeResponse {\n    [key: string]: object | any;\n\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeResponse\n     */\n    access_token: string;\n    /**\n     * The `item_id` value of the Item associated with the returned `access_token`\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeResponse\n     */\n    item_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemPublicTokenExchangeResponse\n     */\n    request_id: string;\n}\n/**\n * ItemRemoveRequest defines the request schema for `/item/remove`\n * @export\n * @interface ItemRemoveRequest\n */\nexport interface ItemRemoveRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemRemoveRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemRemoveRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemRemoveRequest\n     */\n    access_token: string;\n}\n/**\n * ItemRemoveResponse defines the response schema for `/item/remove`\n * @export\n * @interface ItemRemoveResponse\n */\nexport interface ItemRemoveResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemRemoveResponse\n     */\n    request_id: string;\n}\n/**\n * An object with information about the status of the Item.\n * @export\n * @interface ItemStatus\n */\nexport interface ItemStatus {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {ItemStatusInvestments}\n     * @memberof ItemStatus\n     */\n    investments?: ItemStatusInvestments | null;\n    /**\n     * \n     * @type {ItemStatusTransactions}\n     * @memberof ItemStatus\n     */\n    transactions?: ItemStatusTransactions | null;\n    /**\n     * \n     * @type {ItemStatusLastWebhook}\n     * @memberof ItemStatus\n     */\n    last_webhook?: ItemStatusLastWebhook | null;\n}\n/**\n * Information about the last successful and failed investments update for the Item.\n * @export\n * @interface ItemStatusInvestments\n */\nexport interface ItemStatusInvestments {\n    [key: string]: object | any;\n\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.\n     * @type {string}\n     * @memberof ItemStatusInvestments\n     */\n    last_successful_update?: string | null;\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.\n     * @type {string}\n     * @memberof ItemStatusInvestments\n     */\n    last_failed_update?: string | null;\n}\n/**\n * Information about the last webhook fired for the Item.\n * @export\n * @interface ItemStatusLastWebhook\n */\nexport interface ItemStatusLastWebhook {\n    [key: string]: object | any;\n\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired. \n     * @type {string}\n     * @memberof ItemStatusLastWebhook\n     */\n    sent_at?: string | null;\n    /**\n     * The last webhook code sent.\n     * @type {string}\n     * @memberof ItemStatusLastWebhook\n     */\n    code_sent?: string | null;\n}\n/**\n * Information about the last successful and failed transactions update for the Item.\n * @export\n * @interface ItemStatusNullable\n */\nexport interface ItemStatusNullable {\n    /**\n     * \n     * @type {ItemStatusInvestments}\n     * @memberof ItemStatusNullable\n     */\n    investments?: ItemStatusInvestments | null;\n    /**\n     * \n     * @type {ItemStatusTransactions}\n     * @memberof ItemStatusNullable\n     */\n    transactions?: ItemStatusTransactions | null;\n    /**\n     * \n     * @type {ItemStatusLastWebhook}\n     * @memberof ItemStatusNullable\n     */\n    last_webhook?: ItemStatusLastWebhook | null;\n}\n/**\n * Information about the last successful and failed transactions update for the Item.\n * @export\n * @interface ItemStatusTransactions\n */\nexport interface ItemStatusTransactions {\n    [key: string]: object | any;\n\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.\n     * @type {string}\n     * @memberof ItemStatusTransactions\n     */\n    last_successful_update?: string | null;\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.\n     * @type {string}\n     * @memberof ItemStatusTransactions\n     */\n    last_failed_update?: string | null;\n}\n/**\n * ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update`\n * @export\n * @interface ItemWebhookUpdateRequest\n */\nexport interface ItemWebhookUpdateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemWebhookUpdateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ItemWebhookUpdateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ItemWebhookUpdateRequest\n     */\n    access_token: string;\n    /**\n     * The new webhook URL to associate with the Item.\n     * @type {string}\n     * @memberof ItemWebhookUpdateRequest\n     */\n    webhook?: string | null;\n}\n/**\n * ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update`\n * @export\n * @interface ItemWebhookUpdateResponse\n */\nexport interface ItemWebhookUpdateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Item}\n     * @memberof ItemWebhookUpdateResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ItemWebhookUpdateResponse\n     */\n    request_id: string;\n}\n/**\n * A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks\n * @export\n * @interface JWKPublicKey\n */\nexport interface JWKPublicKey {\n    [key: string]: object | any;\n\n    /**\n     * The alg member identifies the cryptographic algorithm family used with the key.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    alg: string;\n    /**\n     * The crv member identifies the cryptographic curve used with the key.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    crv: string;\n    /**\n     * The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    kid: string;\n    /**\n     * The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    kty: string;\n    /**\n     * The use (public key use) parameter identifies the intended use of the public key.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    use: string;\n    /**\n     * The x member contains the x coordinate for the elliptic curve point.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    x: string;\n    /**\n     * The y member contains the y coordinate for the elliptic curve point.\n     * @type {string}\n     * @memberof JWKPublicKey\n     */\n    y: string;\n    /**\n     * The timestamp when the key was created, in Unix time.\n     * @type {number}\n     * @memberof JWKPublicKey\n     */\n    created_at: number;\n    /**\n     * The timestamp when the key expired, in Unix time.\n     * @type {number}\n     * @memberof JWKPublicKey\n     */\n    expired_at: number | null;\n}\n/**\n * A JWT Header, used for webhook validation\n * @export\n * @interface JWTHeader\n */\nexport interface JWTHeader {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {string}\n     * @memberof JWTHeader\n     */\n    id: string;\n}\n/**\n * The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item.\n * @export\n * @interface LiabilitiesDefaultUpdateWebhook\n */\nexport interface LiabilitiesDefaultUpdateWebhook {\n    /**\n     * `LIABILITIES`\n     * @type {string}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `DEFAULT_UPDATE`\n     * @type {string}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    error: PlaidError;\n    /**\n     * An array of `account_id`\\'s for accounts that contain new liabilities.\\'\n     * @type {Array<string>}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    account_ids_with_new_liabilities: Array<string>;\n    /**\n     * An object with keys of `account_id`\\'s that are mapped to their respective liabilities fields that changed.  Example: `{ \\\"XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58\\\": [\\\"past_amount_due\\\"] }` \n     * @type {{ [key: string]: Array<string>; }}\n     * @memberof LiabilitiesDefaultUpdateWebhook\n     */\n    account_ids_with_updated_liabilities: { [key: string]: Array<string>; };\n}\n/**\n * LiabilitiesGetRequest defines the request schema for `/liabilities/get`\n * @export\n * @interface LiabilitiesGetRequest\n */\nexport interface LiabilitiesGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof LiabilitiesGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof LiabilitiesGetRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof LiabilitiesGetRequest\n     */\n    access_token: string;\n    /**\n     * \n     * @type {LiabilitiesGetRequestOptions}\n     * @memberof LiabilitiesGetRequest\n     */\n    options?: LiabilitiesGetRequestOptions;\n}\n/**\n * An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null.\n * @export\n * @interface LiabilitiesGetRequestOptions\n */\nexport interface LiabilitiesGetRequestOptions {\n    /**\n     * A list of accounts to retrieve for the Item.  An error will be returned if a provided `account_id` is not associated with the Item\n     * @type {Array<string>}\n     * @memberof LiabilitiesGetRequestOptions\n     */\n    account_ids?: Array<string>;\n}\n/**\n * LiabilitiesGetResponse defines the response schema for `/liabilities/get`\n * @export\n * @interface LiabilitiesGetResponse\n */\nexport interface LiabilitiesGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of accounts associated with the Item\n     * @type {Array<AccountBase>}\n     * @memberof LiabilitiesGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * \n     * @type {Item}\n     * @memberof LiabilitiesGetResponse\n     */\n    item: Item;\n    /**\n     * \n     * @type {LiabilitiesObject}\n     * @memberof LiabilitiesGetResponse\n     */\n    liabilities: LiabilitiesObject;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof LiabilitiesGetResponse\n     */\n    request_id: string;\n}\n/**\n * An object containing liability accounts\n * @export\n * @interface LiabilitiesObject\n */\nexport interface LiabilitiesObject {\n    [key: string]: object | any;\n\n    /**\n     * The credit accounts returned.\n     * @type {Array<CreditCardLiability>}\n     * @memberof LiabilitiesObject\n     */\n    credit: Array<CreditCardLiability> | null;\n    /**\n     * The mortgage accounts returned.\n     * @type {Array<MortgageLiability>}\n     * @memberof LiabilitiesObject\n     */\n    mortgage: Array<MortgageLiability> | null;\n    /**\n     * The student loan accounts returned.\n     * @type {Array<StudentLoan>}\n     * @memberof LiabilitiesObject\n     */\n    student: Array<StudentLoan> | null;\n}\n/**\n * Used to configure Sandbox test data for the Liabilities product\n * @export\n * @interface LiabilityOverride\n */\nexport interface LiabilityOverride {\n    [key: string]: object | any;\n\n    /**\n     * The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    type: string;\n    /**\n     * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    purchase_apr: number;\n    /**\n     * The cash APR percentage value. Can only be set if `type` is `credit`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    cash_apr: number;\n    /**\n     * The balance transfer APR percentage value. Can only be set if `type` is `credit`. Can only be set if `type` is `credit`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    balance_transfer_apr: number;\n    /**\n     * The special APR percentage value. Can only be set if `type` is `credit`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    special_apr: number;\n    /**\n     * Override the `last_payment_amount` field. Can only be set if `type` is `credit`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    last_payment_amount: number;\n    /**\n     * Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    minimum_payment_amount: number;\n    /**\n     * Override the `is_overdue` field\n     * @type {boolean}\n     * @memberof LiabilityOverride\n     */\n    is_overdue: boolean;\n    /**\n     * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    origination_date: string;\n    /**\n     * The original loan principal. Can only be set if `type` is `student`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    principal: number;\n    /**\n     * The interest rate on the loan as a percentage. Can only be set if `type` is `student`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    nominal_apr: number;\n    /**\n     * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.\n     * @type {number}\n     * @memberof LiabilityOverride\n     */\n    interest_capitalization_grace_period_months: number;\n    /**\n     * \n     * @type {StudentLoanRepaymentModel}\n     * @memberof LiabilityOverride\n     */\n    repayment_model: StudentLoanRepaymentModel;\n    /**\n     * Override the `expected_payoff_date` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    expected_payoff_date: string;\n    /**\n     * Override the `guarantor` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    guarantor: string;\n    /**\n     * Override the `is_federal` field. Can only be set if `type` is `student`.\n     * @type {boolean}\n     * @memberof LiabilityOverride\n     */\n    is_federal: boolean;\n    /**\n     * Override the `loan_name` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    loan_name: string;\n    /**\n     * \n     * @type {StudentLoanStatus}\n     * @memberof LiabilityOverride\n     */\n    loan_status: StudentLoanStatus;\n    /**\n     * Override the `payment_reference_number` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    payment_reference_number: string;\n    /**\n     * \n     * @type {PSLFStatus}\n     * @memberof LiabilityOverride\n     */\n    pslf_status: PSLFStatus;\n    /**\n     * Override the `repayment_plan.description` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    repayment_plan_description: string;\n    /**\n     * Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\\\"extended graduated\\\"`, `\\\"extended standard\\\"`, `\\\"graduated\\\"`, `\\\"income-contingent repayment\\\"`, `\\\"income-based repayment\\\"`, `\\\"interest only\\\"`, `\\\"other\\\"`, `\\\"pay as you earn\\\"`, `\\\"revised pay as you earn\\\"`, or `\\\"standard\\\"`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    repayment_plan_type: string;\n    /**\n     * Override the `sequence_number` field. Can only be set if `type` is `student`.\n     * @type {string}\n     * @memberof LiabilityOverride\n     */\n    sequence_number: string;\n    /**\n     * \n     * @type {Address}\n     * @memberof LiabilityOverride\n     */\n    servicer_address: Address;\n}\n/**\n * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\\\"all\\\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window. \n * @export\n * @interface LinkTokenAccountFilters\n */\nexport interface LinkTokenAccountFilters {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {DepositoryFilter}\n     * @memberof LinkTokenAccountFilters\n     */\n    depository?: DepositoryFilter;\n    /**\n     * \n     * @type {CreditFilter}\n     * @memberof LinkTokenAccountFilters\n     */\n    credit?: CreditFilter;\n    /**\n     * \n     * @type {LoanFilter}\n     * @memberof LinkTokenAccountFilters\n     */\n    loan?: LoanFilter;\n    /**\n     * \n     * @type {InvestmentFilter}\n     * @memberof LinkTokenAccountFilters\n     */\n    investment?: InvestmentFilter;\n}\n/**\n * A filter to apply to `credit`-type accounts\n * @export\n * @interface LinkTokenCreateCreditFilter\n */\nexport interface LinkTokenCreateCreditFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<CreditAccountSubtype>}\n     * @memberof LinkTokenCreateCreditFilter\n     */\n    account_subtypes?: Array<CreditAccountSubtype>;\n}\n/**\n * A filter to apply to `depository`-type accounts\n * @export\n * @interface LinkTokenCreateDepositoryFilter\n */\nexport interface LinkTokenCreateDepositoryFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<DepositoryAccountSubtype>}\n     * @memberof LinkTokenCreateDepositoryFilter\n     */\n    account_subtypes?: Array<DepositoryAccountSubtype>;\n}\n/**\n * A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).\n * @export\n * @interface LinkTokenCreateInvestmentFilter\n */\nexport interface LinkTokenCreateInvestmentFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<InvestmentAccountSubtype>}\n     * @memberof LinkTokenCreateInvestmentFilter\n     */\n    account_subtypes?: Array<InvestmentAccountSubtype>;\n}\n/**\n * A filter to apply to `loan`-type accounts\n * @export\n * @interface LinkTokenCreateLoanFilter\n */\nexport interface LinkTokenCreateLoanFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<LoanAccountSubtype>}\n     * @memberof LinkTokenCreateLoanFilter\n     */\n    account_subtypes?: Array<LoanAccountSubtype>;\n}\n/**\n * LinkTokenCreateRequest defines the request schema for `/link/token/create`\n * @export\n * @interface LinkTokenCreateRequest\n */\nexport interface LinkTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \\\"This Application\\\" instead.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    client_name: string;\n    /**\n     * The language that Link should be displayed in.  Supported languages are: - English (`\\'en\\'`) - French (`\\'fr\\'`) - Spanish (`\\'es\\'`) - Dutch (`\\'nl\\'`) - German(`\\'de\\'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    language: string;\n    /**\n     * Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: `US`, `CA`, `DE`, `ES`, `FR`, `GB`, `IE`, `NL`. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`. If both `country_codes` and a Link customization are used, the value in `country_codes` may override the value in the customization.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `[\\'US\\']`.\n     * @type {Array<CountryCode>}\n     * @memberof LinkTokenCreateRequest\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * \n     * @type {LinkTokenCreateRequestUser}\n     * @memberof LinkTokenCreateRequest\n     */\n    user: LinkTokenCreateRequestUser;\n    /**\n     * List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  Only institutions that support *all* requested products will be shown in Link; to maximize the number of institutions listed, it is recommended to initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.\n     * @type {Array<Products>}\n     * @memberof LinkTokenCreateRequest\n     */\n    products?: Array<Products>;\n    /**\n     * The destination URL to which any webhooks should be sent.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    webhook?: string;\n    /**\n     * The `access_token` associated with the Item to update, used when updating or modifying an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    access_token?: string;\n    /**\n     * The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    link_customization_name?: string;\n    /**\n     * A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. If `android_package_name` is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api).\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    redirect_uri?: string;\n    /**\n     * The name of your app\\'s Android package. Required if using the `link_token` to initialize Link on Android. When creating a `link_token` for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). \n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    android_package_name?: string;\n    /**\n     * \n     * @type {LinkTokenAccountFilters}\n     * @memberof LinkTokenCreateRequest\n     */\n    account_filters?: LinkTokenAccountFilters;\n    /**\n     * \n     * @type {LinkTokenEUConfig}\n     * @memberof LinkTokenCreateRequest\n     */\n    eu_config?: LinkTokenEUConfig;\n    /**\n     * Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.\n     * @type {string}\n     * @memberof LinkTokenCreateRequest\n     */\n    institution_id?: string;\n    /**\n     * \n     * @type {LinkTokenCreateRequestPaymentInitiation}\n     * @memberof LinkTokenCreateRequest\n     */\n    payment_initiation?: LinkTokenCreateRequestPaymentInitiation;\n    /**\n     * \n     * @type {LinkTokenCreateRequestDepositSwitch}\n     * @memberof LinkTokenCreateRequest\n     */\n    deposit_switch?: LinkTokenCreateRequestDepositSwitch;\n    /**\n     * \n     * @type {LinkTokenCreateRequestIncomeVerification}\n     * @memberof LinkTokenCreateRequest\n     */\n    income_verification?: LinkTokenCreateRequestIncomeVerification;\n    /**\n     * \n     * @type {LinkTokenCreateRequestAuth}\n     * @memberof LinkTokenCreateRequest\n     */\n    auth?: LinkTokenCreateRequestAuth;\n    /**\n     * \n     * @type {LinkTokenCreateRequestTransfer}\n     * @memberof LinkTokenCreateRequest\n     */\n    transfer?: LinkTokenCreateRequestTransfer;\n    /**\n     * \n     * @type {LinkTokenCreateRequestUpdate}\n     * @memberof LinkTokenCreateRequest\n     */\n    update?: LinkTokenCreateRequestUpdate;\n}\n/**\n * By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\\\"all\\\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.  For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window. \n * @export\n * @interface LinkTokenCreateRequestAccountSubtypes\n */\nexport interface LinkTokenCreateRequestAccountSubtypes {\n    /**\n     * \n     * @type {LinkTokenCreateDepositoryFilter}\n     * @memberof LinkTokenCreateRequestAccountSubtypes\n     */\n    depository?: LinkTokenCreateDepositoryFilter;\n    /**\n     * \n     * @type {LinkTokenCreateCreditFilter}\n     * @memberof LinkTokenCreateRequestAccountSubtypes\n     */\n    credit?: LinkTokenCreateCreditFilter;\n    /**\n     * \n     * @type {LinkTokenCreateLoanFilter}\n     * @memberof LinkTokenCreateRequestAccountSubtypes\n     */\n    loan?: LinkTokenCreateLoanFilter;\n    /**\n     * \n     * @type {LinkTokenCreateInvestmentFilter}\n     * @memberof LinkTokenCreateRequestAccountSubtypes\n     */\n    investment?: LinkTokenCreateInvestmentFilter;\n}\n/**\n * Specifies options for initializing Link for use with the Auth product. This field is currently only required if using the Flexible Auth product (currently in closed beta).\n * @export\n * @interface LinkTokenCreateRequestAuth\n */\nexport interface LinkTokenCreateRequestAuth {\n    /**\n     * The optional Auth flow to use. Currently only used to enable Flexible Auth.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestAuth\n     */\n    flow_type: LinkTokenCreateRequestAuthFlowTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum LinkTokenCreateRequestAuthFlowTypeEnum {\n    FlexibleAuth = 'FLEXIBLE_AUTH'\n}\n\n/**\n * Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array.\n * @export\n * @interface LinkTokenCreateRequestDepositSwitch\n */\nexport interface LinkTokenCreateRequestDepositSwitch {\n    /**\n     * The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestDepositSwitch\n     */\n    deposit_switch_id: string;\n}\n/**\n * Specifies options for initializing Link for use with the Income (beta) product. This field is required if `income_verification` is included in the `products` array.\n * @export\n * @interface LinkTokenCreateRequestIncomeVerification\n */\nexport interface LinkTokenCreateRequestIncomeVerification {\n    /**\n     * The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestIncomeVerification\n     * @deprecated\n     */\n    income_verification_id?: string;\n    /**\n     * The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestIncomeVerification\n     */\n    asset_report_id?: string;\n    /**\n     * The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestIncomeVerification\n     */\n    precheck_id?: string;\n    /**\n     * An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the `transactions` product was not initialized for the Items during link, it will be initialized after this Link session.\n     * @type {Array<string>}\n     * @memberof LinkTokenCreateRequestIncomeVerification\n     */\n    access_tokens?: Array<string>;\n}\n/**\n * Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array.\n * @export\n * @interface LinkTokenCreateRequestPaymentInitiation\n */\nexport interface LinkTokenCreateRequestPaymentInitiation {\n    /**\n     * The `payment_id` provided by the `/payment_initiation/payment/create` endpoint.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestPaymentInitiation\n     */\n    payment_id: string;\n}\n/**\n * Specifies options for initializing Link for use with the Transfer product.\n * @export\n * @interface LinkTokenCreateRequestTransfer\n */\nexport interface LinkTokenCreateRequestTransfer {\n    /**\n     * The `id` returned by the `/transfer/intent/create` endpoint.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestTransfer\n     */\n    intent_id?: string;\n}\n/**\n * Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode).\n * @export\n * @interface LinkTokenCreateRequestUpdate\n */\nexport interface LinkTokenCreateRequestUpdate {\n    /**\n     * If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).\n     * @type {boolean}\n     * @memberof LinkTokenCreateRequestUpdate\n     */\n    account_selection_enabled?: boolean;\n}\n/**\n * An object specifying information about the end user who will be linking their account.\n * @export\n * @interface LinkTokenCreateRequestUser\n */\nexport interface LinkTokenCreateRequestUser {\n    /**\n     * A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    client_user_id: string;\n    /**\n     * The user\\'s full legal name. This is an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user) to associate Items to the user.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    legal_name?: string;\n    /**\n     * The user\\'s phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user).\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    phone_number?: string;\n    /**\n     * The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This field is optional, but required to enable any [returning user experience](https://plaid.com/docs/link/returning-user).   Only pass a verification time for a phone number that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z` \n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    phone_number_verified_time?: string;\n    /**\n     * The user\\'s email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#enabling-the-returning-user-experience).\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    email_address?: string;\n    /**\n     * The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This is an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user).   Only pass a verification time for an email address that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z`\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    email_address_verified_time?: string;\n    /**\n     * To be provided in the format \\\"ddd-dd-dddd\\\". This field is optional and will support not-yet-implemented functionality for new products.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    ssn?: string;\n    /**\n     * To be provided in the format \\\"yyyy-mm-dd\\\". This field is optional and will support not-yet-implemented functionality for new products.\n     * @type {string}\n     * @memberof LinkTokenCreateRequestUser\n     */\n    date_of_birth?: string;\n}\n/**\n * LinkTokenCreateResponse defines the response schema for `/link/token/create`\n * @export\n * @interface LinkTokenCreateResponse\n */\nexport interface LinkTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.\n     * @type {string}\n     * @memberof LinkTokenCreateResponse\n     */\n    link_token: string;\n    /**\n     * The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.\n     * @type {string}\n     * @memberof LinkTokenCreateResponse\n     */\n    expiration: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof LinkTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Configuration parameters for EU flows\n * @export\n * @interface LinkTokenEUConfig\n */\nexport interface LinkTokenEUConfig {\n    /**\n     * If `true`, open Link without an initial UI. Defaults to `false`.\n     * @type {boolean}\n     * @memberof LinkTokenEUConfig\n     */\n    headless?: boolean;\n}\n/**\n * An object specifying the arguments originally provided to the `/link/token/create` call.\n * @export\n * @interface LinkTokenGetMetadataResponse\n */\nexport interface LinkTokenGetMetadataResponse {\n    [key: string]: object | any;\n\n    /**\n     * The `products` specified in the `/link/token/create` call.\n     * @type {Array<Products>}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    initial_products: Array<Products>;\n    /**\n     * The `webhook` specified in the `/link/token/create` call.\n     * @type {string}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    webhook: string | null;\n    /**\n     * The `country_codes` specified in the `/link/token/create` call.\n     * @type {Array<CountryCode>}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    country_codes: Array<CountryCode>;\n    /**\n     * The `language` specified in the `/link/token/create` call.\n     * @type {string}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    language: string | null;\n    /**\n     * \n     * @type {AccountFiltersResponse}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    account_filters?: AccountFiltersResponse;\n    /**\n     * The `redirect_uri` specified in the `/link/token/create` call.\n     * @type {string}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    redirect_uri: string | null;\n    /**\n     * The `client_name` specified in the `/link/token/create` call.\n     * @type {string}\n     * @memberof LinkTokenGetMetadataResponse\n     */\n    client_name: string | null;\n}\n/**\n * LinkTokenGetRequest defines the request schema for `/link/token/get`\n * @export\n * @interface LinkTokenGetRequest\n */\nexport interface LinkTokenGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof LinkTokenGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof LinkTokenGetRequest\n     */\n    secret?: string;\n    /**\n     * A `link_token` from a previous invocation of `/link/token/create`\n     * @type {string}\n     * @memberof LinkTokenGetRequest\n     */\n    link_token: string;\n}\n/**\n * LinkTokenGetResponse defines the response schema for `/link/token/get`\n * @export\n * @interface LinkTokenGetResponse\n */\nexport interface LinkTokenGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.\n     * @type {string}\n     * @memberof LinkTokenGetResponse\n     */\n    link_token: string;\n    /**\n     * The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.\n     * @type {string}\n     * @memberof LinkTokenGetResponse\n     */\n    created_at: string | null;\n    /**\n     * The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.\n     * @type {string}\n     * @memberof LinkTokenGetResponse\n     */\n    expiration: string | null;\n    /**\n     * \n     * @type {LinkTokenGetMetadataResponse}\n     * @memberof LinkTokenGetResponse\n     */\n    metadata: LinkTokenGetMetadataResponse;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof LinkTokenGetResponse\n     */\n    request_id: string;\n}\n/**\n * Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).\n * @export\n * @enum {string}\n */\nexport enum LoanAccountSubtype {\n    Auto = 'auto',\n    Business = 'business',\n    Commercial = 'commercial',\n    Construction = 'construction',\n    Consumer = 'consumer',\n    HomeEquity = 'home equity',\n    Loan = 'loan',\n    Mortgage = 'mortgage',\n    LineOfCredit = 'line of credit',\n    Student = 'student',\n    Other = 'other',\n    All = 'all'\n}\n\n/**\n * A filter to apply to `loan`-type accounts\n * @export\n * @interface LoanFilter\n */\nexport interface LoanFilter {\n    [key: string]: object | any;\n\n    /**\n     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). \n     * @type {Array<LoanAccountSubtype>}\n     * @memberof LoanFilter\n     */\n    account_subtypes: Array<LoanAccountSubtype>;\n}\n/**\n * A representation of where a transaction took place\n * @export\n * @interface Location\n */\nexport interface Location {\n    [key: string]: object | any;\n\n    /**\n     * The street address where the transaction occurred.\n     * @type {string}\n     * @memberof Location\n     */\n    address: string | null;\n    /**\n     * The city where the transaction occurred.\n     * @type {string}\n     * @memberof Location\n     */\n    city: string | null;\n    /**\n     * The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`.\n     * @type {string}\n     * @memberof Location\n     */\n    region: string | null;\n    /**\n     * The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`.\n     * @type {string}\n     * @memberof Location\n     */\n    postal_code: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code where the transaction occurred.\n     * @type {string}\n     * @memberof Location\n     */\n    country: string | null;\n    /**\n     * The latitude where the transaction occurred.\n     * @type {number}\n     * @memberof Location\n     */\n    lat: number | null;\n    /**\n     * The longitude where the transaction occurred.\n     * @type {number}\n     * @memberof Location\n     */\n    lon: number | null;\n    /**\n     * The merchant defined store number where the transaction occurred.\n     * @type {string}\n     * @memberof Location\n     */\n    store_number: string | null;\n}\n/**\n * Specifies the multi-factor authentication settings to use with this test account\n * @export\n * @interface MFA\n */\nexport interface MFA {\n    [key: string]: object | any;\n\n    /**\n     * Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.\n     * @type {string}\n     * @memberof MFA\n     */\n    type: string;\n    /**\n     * Number of rounds of questions. Required if value of `type` is `questions`. \n     * @type {number}\n     * @memberof MFA\n     */\n    question_rounds: number;\n    /**\n     * Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.\n     * @type {number}\n     * @memberof MFA\n     */\n    questions_per_round: number;\n    /**\n     * Number of rounds of selections, used if `type` is `selections`. Defaults to 1.\n     * @type {number}\n     * @memberof MFA\n     */\n    selection_rounds: number;\n    /**\n     * Number of available answers per question, used if `type` is `selection`. Defaults to 2. \n     * @type {number}\n     * @memberof MFA\n     */\n    selections_per_question: number;\n}\n/**\n * Allows specifying the metadata of the test account\n * @export\n * @interface Meta\n */\nexport interface Meta {\n    [key: string]: object | any;\n\n    /**\n     * The account\\'s name\n     * @type {string}\n     * @memberof Meta\n     */\n    name: string;\n    /**\n     * The account\\'s official name\n     * @type {string}\n     * @memberof Meta\n     */\n    official_name: string;\n    /**\n     * The account\\'s limit\n     * @type {number}\n     * @memberof Meta\n     */\n    limit: number;\n}\n/**\n * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.\n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    [key: string]: object | any;\n\n    /**\n     * A broad categorization of the error. Safe for programmatic use.\n     * @type {string}\n     * @memberof ModelError\n     */\n    error_type: ModelErrorErrorTypeEnum;\n    /**\n     * The particular error code. Safe for programmatic use.\n     * @type {string}\n     * @memberof ModelError\n     */\n    error_code: string;\n    /**\n     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.\n     * @type {string}\n     * @memberof ModelError\n     */\n    error_message: string;\n    /**\n     * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.\n     * @type {string}\n     * @memberof ModelError\n     */\n    display_message: string | null;\n    /**\n     * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.\n     * @type {string}\n     * @memberof ModelError\n     */\n    request_id?: string;\n    /**\n     * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.\n     * @type {Array<any>}\n     * @memberof ModelError\n     */\n    causes?: Array<any>;\n    /**\n     * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.\n     * @type {number}\n     * @memberof ModelError\n     */\n    status?: number | null;\n    /**\n     * The URL of a Plaid documentation page with more information about the error\n     * @type {string}\n     * @memberof ModelError\n     */\n    documentation_url?: string;\n    /**\n     * Suggested steps for resolving the error\n     * @type {string}\n     * @memberof ModelError\n     */\n    suggested_action?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ModelErrorErrorTypeEnum {\n    InvalidRequest = 'INVALID_REQUEST',\n    InvalidResult = 'INVALID_RESULT',\n    InvalidInput = 'INVALID_INPUT',\n    InstitutionError = 'INSTITUTION_ERROR',\n    RateLimitExceeded = 'RATE_LIMIT_EXCEEDED',\n    ApiError = 'API_ERROR',\n    ItemError = 'ITEM_ERROR',\n    AssetReportError = 'ASSET_REPORT_ERROR',\n    RecaptchaError = 'RECAPTCHA_ERROR',\n    OauthError = 'OAUTH_ERROR',\n    PaymentError = 'PAYMENT_ERROR',\n    BankTransferError = 'BANK_TRANSFER_ERROR',\n    IncomeVerificationError = 'INCOME_VERIFICATION_ERROR'\n}\n\n/**\n * Object containing metadata about the interest rate for the mortgage.\n * @export\n * @interface MortgageInterestRate\n */\nexport interface MortgageInterestRate {\n    [key: string]: object | any;\n\n    /**\n     * Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.\n     * @type {number}\n     * @memberof MortgageInterestRate\n     */\n    percentage: number | null;\n    /**\n     * The type of interest charged (fixed or variable).\n     * @type {string}\n     * @memberof MortgageInterestRate\n     */\n    type: string | null;\n}\n/**\n * Contains details about a mortgage account.\n * @export\n * @interface MortgageLiability\n */\nexport interface MortgageLiability {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the account that this liability belongs to.\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    account_id: string;\n    /**\n     * The account number of the loan.\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    account_number: string;\n    /**\n     * The current outstanding amount charged for late payment.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    current_late_fee: number | null;\n    /**\n     * Total amount held in escrow to pay taxes and insurance on behalf of the borrower.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    escrow_balance: number | null;\n    /**\n     * Indicates whether the borrower has private mortgage insurance in effect.\n     * @type {boolean}\n     * @memberof MortgageLiability\n     */\n    has_pmi: boolean | null;\n    /**\n     * Indicates whether the borrower will pay a penalty for early payoff of mortgage.\n     * @type {boolean}\n     * @memberof MortgageLiability\n     */\n    has_prepayment_penalty: boolean | null;\n    /**\n     * \n     * @type {MortgageInterestRate}\n     * @memberof MortgageLiability\n     */\n    interest_rate: MortgageInterestRate;\n    /**\n     * The amount of the last payment.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    last_payment_amount: number | null;\n    /**\n     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    last_payment_date: string | null;\n    /**\n     * Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    loan_type_description: string | null;\n    /**\n     * Full duration of mortgage as at origination (e.g. `10 year`).\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    loan_term: string | null;\n    /**\n     * Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    maturity_date: string | null;\n    /**\n     * The amount of the next payment.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    next_monthly_payment: number | null;\n    /**\n     * The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    next_payment_due_date: string | null;\n    /**\n     * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof MortgageLiability\n     */\n    origination_date: string | null;\n    /**\n     * The original principal balance of the mortgage.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    origination_principal_amount: number | null;\n    /**\n     * Amount of loan (principal + interest) past due for payment.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    past_due_amount: number | null;\n    /**\n     * \n     * @type {MortgagePropertyAddress}\n     * @memberof MortgageLiability\n     */\n    property_address: MortgagePropertyAddress;\n    /**\n     * The year to date (YTD) interest paid.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    ytd_interest_paid: number | null;\n    /**\n     * The YTD principal paid.\n     * @type {number}\n     * @memberof MortgageLiability\n     */\n    ytd_principal_paid: number | null;\n}\n/**\n * Object containing fields describing property address.\n * @export\n * @interface MortgagePropertyAddress\n */\nexport interface MortgagePropertyAddress {\n    [key: string]: object | any;\n\n    /**\n     * The city name.\n     * @type {string}\n     * @memberof MortgagePropertyAddress\n     */\n    city: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code.\n     * @type {string}\n     * @memberof MortgagePropertyAddress\n     */\n    country: string | null;\n    /**\n     * The five or nine digit postal code.\n     * @type {string}\n     * @memberof MortgagePropertyAddress\n     */\n    postal_code: string | null;\n    /**\n     * The region or state (example \\\"NC\\\").\n     * @type {string}\n     * @memberof MortgagePropertyAddress\n     */\n    region: string | null;\n    /**\n     * The full street address (example \\\"564 Main Street, Apt 15\\\").\n     * @type {string}\n     * @memberof MortgagePropertyAddress\n     */\n    street: string | null;\n}\n/**\n * An object representing information about the net pay amount on the paystub.\n * @export\n * @interface NetPay\n */\nexport interface NetPay {\n    [key: string]: object | any;\n\n    /**\n     * Raw amount of the net pay for the pay period\n     * @type {number}\n     * @memberof NetPay\n     */\n    current_amount?: number | null;\n    /**\n     * Description of the net pay\n     * @type {string}\n     * @memberof NetPay\n     */\n    description?: string | null;\n    /**\n     * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof NetPay\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof NetPay\n     */\n    unofficial_currency_code?: string | null;\n    /**\n     * The year-to-date amount of the net pay\n     * @type {number}\n     * @memberof NetPay\n     */\n    ytd_amount?: number | null;\n    /**\n     * \n     * @type {Total}\n     * @memberof NetPay\n     * @deprecated\n     */\n    total?: Total;\n}\n/**\n * Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).\n * @export\n * @interface NewAccountsAvailableWebhook\n */\nexport interface NewAccountsAvailableWebhook {\n    /**\n     * `ITEM`\n     * @type {string}\n     * @memberof NewAccountsAvailableWebhook\n     */\n    webhook_type?: string;\n    /**\n     * `NEW_ACCOUNTS_AVAILABLE`\n     * @type {string}\n     * @memberof NewAccountsAvailableWebhook\n     */\n    webhook_code?: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof NewAccountsAvailableWebhook\n     */\n    item_id?: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof NewAccountsAvailableWebhook\n     */\n    error?: PlaidError;\n}\n/**\n * Account and bank identifier number data used to configure the test account. All values are optional.\n * @export\n * @interface Numbers\n */\nexport interface Numbers {\n    [key: string]: object | any;\n\n    /**\n     * Will be used for the account number.\n     * @type {string}\n     * @memberof Numbers\n     */\n    account?: string;\n    /**\n     * Must be a valid ACH routing number.\n     * @type {string}\n     * @memberof Numbers\n     */\n    ach_routing?: string;\n    /**\n     * Must be a valid wire transfer routing number.\n     * @type {string}\n     * @memberof Numbers\n     */\n    ach_wire_routing?: string;\n    /**\n     * EFT institution number. Must be specified alongside `eft_branch`.\n     * @type {string}\n     * @memberof Numbers\n     */\n    eft_institution?: string;\n    /**\n     * EFT branch number. Must be specified alongside `eft_institution`.\n     * @type {string}\n     * @memberof Numbers\n     */\n    eft_branch?: string;\n    /**\n     * Bank identifier code (BIC). Must be specified alongside `international_iban`.\n     * @type {string}\n     * @memberof Numbers\n     */\n    international_bic?: string;\n    /**\n     * International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`.\n     * @type {string}\n     * @memberof Numbers\n     */\n    international_iban?: string;\n    /**\n     * BACS sort code\n     * @type {string}\n     * @memberof Numbers\n     */\n    bacs_sort_code?: string;\n}\n/**\n * Identifying information for transferring money to or from a US account via ACH or wire transfer.\n * @export\n * @interface NumbersACH\n */\nexport interface NumbersACH {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersACH\n     */\n    account_id: string;\n    /**\n     * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \\\"tokenized\\\" routing and account numbers, which are not the user\\'s actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.\n     * @type {string}\n     * @memberof NumbersACH\n     */\n    account: string;\n    /**\n     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.\n     * @type {string}\n     * @memberof NumbersACH\n     */\n    routing: string;\n    /**\n     * The wire transfer routing number for the account, if available\n     * @type {string}\n     * @memberof NumbersACH\n     */\n    wire_routing: string | null;\n}\n/**\n * Identifying information for transferring money to or from a US account via ACH or wire transfer.\n * @export\n * @interface NumbersACHNullable\n */\nexport interface NumbersACHNullable {\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersACHNullable\n     */\n    account_id: string;\n    /**\n     * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \\\"tokenized\\\" routing and account numbers, which are not the user\\'s actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.\n     * @type {string}\n     * @memberof NumbersACHNullable\n     */\n    account: string;\n    /**\n     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.\n     * @type {string}\n     * @memberof NumbersACHNullable\n     */\n    routing: string;\n    /**\n     * The wire transfer routing number for the account, if available\n     * @type {string}\n     * @memberof NumbersACHNullable\n     */\n    wire_routing: string | null;\n}\n/**\n * Identifying information for transferring money to or from a UK bank account via BACS.\n * @export\n * @interface NumbersBACS\n */\nexport interface NumbersBACS {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersBACS\n     */\n    account_id: string;\n    /**\n     * The BACS account number for the account\n     * @type {string}\n     * @memberof NumbersBACS\n     */\n    account: string;\n    /**\n     * The BACS sort code for the account\n     * @type {string}\n     * @memberof NumbersBACS\n     */\n    sort_code: string;\n}\n/**\n * Identifying information for transferring money to or from a UK bank account via BACS.\n * @export\n * @interface NumbersBACSNullable\n */\nexport interface NumbersBACSNullable {\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersBACSNullable\n     */\n    account_id: string;\n    /**\n     * The BACS account number for the account\n     * @type {string}\n     * @memberof NumbersBACSNullable\n     */\n    account: string;\n    /**\n     * The BACS sort code for the account\n     * @type {string}\n     * @memberof NumbersBACSNullable\n     */\n    sort_code: string;\n}\n/**\n * Identifying information for transferring money to or from a Canadian bank account via EFT.\n * @export\n * @interface NumbersEFT\n */\nexport interface NumbersEFT {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersEFT\n     */\n    account_id: string;\n    /**\n     * The EFT account number for the account\n     * @type {string}\n     * @memberof NumbersEFT\n     */\n    account: string;\n    /**\n     * The EFT institution number for the account\n     * @type {string}\n     * @memberof NumbersEFT\n     */\n    institution: string;\n    /**\n     * The EFT branch number for the account\n     * @type {string}\n     * @memberof NumbersEFT\n     */\n    branch: string;\n}\n/**\n * Identifying information for transferring money to or from a Canadian bank account via EFT.\n * @export\n * @interface NumbersEFTNullable\n */\nexport interface NumbersEFTNullable {\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersEFTNullable\n     */\n    account_id: string;\n    /**\n     * The EFT account number for the account\n     * @type {string}\n     * @memberof NumbersEFTNullable\n     */\n    account: string;\n    /**\n     * The EFT institution number for the account\n     * @type {string}\n     * @memberof NumbersEFTNullable\n     */\n    institution: string;\n    /**\n     * The EFT branch number for the account\n     * @type {string}\n     * @memberof NumbersEFTNullable\n     */\n    branch: string;\n}\n/**\n * Identifying information for transferring money to or from an international bank account via wire transfer.\n * @export\n * @interface NumbersInternational\n */\nexport interface NumbersInternational {\n    [key: string]: object | any;\n\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersInternational\n     */\n    account_id: string;\n    /**\n     * The International Bank Account Number (IBAN) for the account\n     * @type {string}\n     * @memberof NumbersInternational\n     */\n    iban: string;\n    /**\n     * The Bank Identifier Code (BIC) for the account\n     * @type {string}\n     * @memberof NumbersInternational\n     */\n    bic: string;\n}\n/**\n * Identifying information for transferring money to or from an international bank account via wire transfer.\n * @export\n * @interface NumbersInternationalNullable\n */\nexport interface NumbersInternationalNullable {\n    /**\n     * The Plaid account ID associated with the account numbers\n     * @type {string}\n     * @memberof NumbersInternationalNullable\n     */\n    account_id: string;\n    /**\n     * The International Bank Account Number (IBAN) for the account\n     * @type {string}\n     * @memberof NumbersInternationalNullable\n     */\n    iban: string;\n    /**\n     * The Bank Identifier Code (BIC) for the account\n     * @type {string}\n     * @memberof NumbersInternationalNullable\n     */\n    bic: string;\n}\n/**\n * `investment:` Investment account.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `payroll:` Payroll account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.\n * @export\n * @enum {string}\n */\nexport enum OverrideAccountType {\n    Investment = 'investment',\n    Credit = 'credit',\n    Depository = 'depository',\n    Loan = 'loan',\n    Payroll = 'payroll',\n    Other = 'other'\n}\n\n/**\n * Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.\n * @export\n * @interface OverrideAccounts\n */\nexport interface OverrideAccounts {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {OverrideAccountType}\n     * @memberof OverrideAccounts\n     */\n    type: OverrideAccountType;\n    /**\n     * \n     * @type {AccountSubtype}\n     * @memberof OverrideAccounts\n     */\n    subtype: AccountSubtype | null;\n    /**\n     * If provided, the account will start with this amount as the current balance. \n     * @type {number}\n     * @memberof OverrideAccounts\n     */\n    starting_balance: number;\n    /**\n     * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.\n     * @type {number}\n     * @memberof OverrideAccounts\n     */\n    force_available_balance: number;\n    /**\n     * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.\n     * @type {string}\n     * @memberof OverrideAccounts\n     */\n    currency: string;\n    /**\n     * \n     * @type {Meta}\n     * @memberof OverrideAccounts\n     */\n    meta: Meta;\n    /**\n     * \n     * @type {Numbers}\n     * @memberof OverrideAccounts\n     */\n    numbers: Numbers;\n    /**\n     * Specify the list of transactions on the account.\n     * @type {Array<TransactionOverride>}\n     * @memberof OverrideAccounts\n     */\n    transactions: Array<TransactionOverride>;\n    /**\n     * \n     * @type {HoldingsOverride}\n     * @memberof OverrideAccounts\n     */\n    holdings?: HoldingsOverride;\n    /**\n     * \n     * @type {InvestmentsTransactionsOverride}\n     * @memberof OverrideAccounts\n     */\n    investment_transactions?: InvestmentsTransactionsOverride;\n    /**\n     * \n     * @type {OwnerOverride}\n     * @memberof OverrideAccounts\n     */\n    identity: OwnerOverride;\n    /**\n     * \n     * @type {LiabilityOverride}\n     * @memberof OverrideAccounts\n     */\n    liability: LiabilityOverride;\n    /**\n     * \n     * @type {InflowModel}\n     * @memberof OverrideAccounts\n     */\n    inflow_model: InflowModel;\n    /**\n     * \n     * @type {IncomeOverride}\n     * @memberof OverrideAccounts\n     */\n    income?: IncomeOverride;\n}\n/**\n * Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty.\n * @export\n * @interface Owner\n */\nexport interface Owner {\n    [key: string]: object | any;\n\n    /**\n     * A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. If the name of a business is reported, please contact Plaid Support. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.  If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account\\'s `names` array.\n     * @type {Array<string>}\n     * @memberof Owner\n     */\n    names: Array<string>;\n    /**\n     * A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.\n     * @type {Array<PhoneNumber>}\n     * @memberof Owner\n     */\n    phone_numbers: Array<PhoneNumber>;\n    /**\n     * A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.\n     * @type {Array<Email>}\n     * @memberof Owner\n     */\n    emails: Array<Email>;\n    /**\n     * Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.\n     * @type {Array<Address>}\n     * @memberof Owner\n     */\n    addresses: Array<Address>;\n}\n/**\n * Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.\n * @export\n * @interface OwnerOverride\n */\nexport interface OwnerOverride {\n    [key: string]: object | any;\n\n    /**\n     * A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.\n     * @type {Array<string>}\n     * @memberof OwnerOverride\n     */\n    names: Array<string>;\n    /**\n     * A list of phone numbers associated with the account.\n     * @type {Array<PhoneNumber>}\n     * @memberof OwnerOverride\n     */\n    phone_numbers: Array<PhoneNumber>;\n    /**\n     * A list of email addresses associated with the account.\n     * @type {Array<Email>}\n     * @memberof OwnerOverride\n     */\n    emails: Array<Email>;\n    /**\n     * Data about the various addresses associated with the account.\n     * @type {Array<Address>}\n     * @memberof OwnerOverride\n     */\n    addresses: Array<Address>;\n}\n/**\n * Information about the student\\'s eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is Fedloan (`ins_116527`). \n * @export\n * @interface PSLFStatus\n */\nexport interface PSLFStatus {\n    [key: string]: object | any;\n\n    /**\n     * The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof PSLFStatus\n     */\n    estimated_eligibility_date: string | null;\n    /**\n     * The number of qualifying payments that have been made.\n     * @type {number}\n     * @memberof PSLFStatus\n     */\n    payments_made: number | null;\n    /**\n     * The number of qualifying payments remaining.\n     * @type {number}\n     * @memberof PSLFStatus\n     */\n    payments_remaining: number | null;\n}\n/**\n * An object representing a monetary amount.\n * @export\n * @interface Pay\n */\nexport interface Pay {\n    [key: string]: object | any;\n\n    /**\n     * A numerical amount of a specific currency.\n     * @type {number}\n     * @memberof Pay\n     */\n    amount?: number | null;\n    /**\n     * Currency code, e.g. USD\n     * @type {string}\n     * @memberof Pay\n     */\n    currency?: string | null;\n}\n/**\n * The frequency of the pay period.\n * @export\n * @interface PayFrequency\n */\nexport interface PayFrequency {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PayFrequencyValue}\n     * @memberof PayFrequency\n     */\n    value: PayFrequencyValue;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof PayFrequency\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * The frequency of the pay period.\n * @export\n * @enum {string}\n */\nexport enum PayFrequencyValue {\n    Monthly = 'monthly',\n    Semimonthly = 'semimonthly',\n    Weekly = 'weekly',\n    Biweekly = 'biweekly',\n    Unknown = 'unknown',\n    Null = 'null'\n}\n\n/**\n * Details about the pay period.\n * @export\n * @interface PayPeriodDetails\n */\nexport interface PayPeriodDetails {\n    [key: string]: object | any;\n\n    /**\n     * The amount of the paycheck.\n     * @type {number}\n     * @memberof PayPeriodDetails\n     */\n    check_amount?: number | null;\n    /**\n     * \n     * @type {Array<DistributionBreakdown>}\n     * @memberof PayPeriodDetails\n     */\n    distribution_breakdown?: Array<DistributionBreakdown>;\n    /**\n     * The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \\\"yyyy-mm-dd\\\".\n     * @type {string}\n     * @memberof PayPeriodDetails\n     */\n    end_date?: string | null;\n    /**\n     * Total earnings before tax/deductions.\n     * @type {number}\n     * @memberof PayPeriodDetails\n     */\n    gross_earnings?: number | null;\n    /**\n     * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\\\"yyyy-mm-dd\\\").\n     * @type {string}\n     * @memberof PayPeriodDetails\n     */\n    pay_date?: string | null;\n    /**\n     * The frequency at which an individual is paid.\n     * @type {string}\n     * @memberof PayPeriodDetails\n     */\n    pay_frequency?: PayPeriodDetailsPayFrequencyEnum;\n    /**\n     * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\\\"yyyy-mm-dd\\\").\n     * @type {string}\n     * @memberof PayPeriodDetails\n     * @deprecated\n     */\n    pay_day?: string | null;\n    /**\n     * The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \\\"yyyy-mm-dd\\\".\n     * @type {string}\n     * @memberof PayPeriodDetails\n     */\n    start_date?: string | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PayPeriodDetailsPayFrequencyEnum {\n    PayFrequencyUnknown = 'PAY_FREQUENCY_UNKNOWN',\n    PayFrequencyWeekly = 'PAY_FREQUENCY_WEEKLY',\n    PayFrequencyBiweekly = 'PAY_FREQUENCY_BIWEEKLY',\n    PayFrequencySemimonthly = 'PAY_FREQUENCY_SEMIMONTHLY',\n    PayFrequencyMonthly = 'PAY_FREQUENCY_MONTHLY',\n    Null = 'null'\n}\n\n/**\n * The amount and currency of a payment\n * @export\n * @interface PaymentAmount\n */\nexport interface PaymentAmount {\n    [key: string]: object | any;\n\n    /**\n     * The ISO-4217 currency code of the payment. For standing orders, `\\\"GBP\\\"` must be used.\n     * @type {string}\n     * @memberof PaymentAmount\n     */\n    currency: PaymentAmountCurrencyEnum;\n    /**\n     * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.\n     * @type {number}\n     * @memberof PaymentAmount\n     */\n    value: number;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentAmountCurrencyEnum {\n    Gbp = 'GBP',\n    Eur = 'EUR'\n}\n\n/**\n * The optional address of the payment recipient. This object is not currently required to make payments from UK institutions and should not be populated, though may be necessary for future European expansion.\n * @export\n * @interface PaymentInitiationAddress\n */\nexport interface PaymentInitiationAddress {\n    [key: string]: object | any;\n\n    /**\n     * An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.\n     * @type {Array<string>}\n     * @memberof PaymentInitiationAddress\n     */\n    street: Array<string>;\n    /**\n     * The city where the recipient is located. Maximum of 35 characters.\n     * @type {string}\n     * @memberof PaymentInitiationAddress\n     */\n    city: string;\n    /**\n     * The postal code where the recipient is located. Maximum of 16 characters.\n     * @type {string}\n     * @memberof PaymentInitiationAddress\n     */\n    postal_code: string;\n    /**\n     * The ISO 3166-1 alpha-2 country code where the recipient is located.\n     * @type {string}\n     * @memberof PaymentInitiationAddress\n     */\n    country: string;\n}\n/**\n * Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.\n * @export\n * @interface PaymentInitiationMetadata\n */\nexport interface PaymentInitiationMetadata {\n    [key: string]: object | any;\n\n    /**\n     * Indicates whether the institution supports payments from a different country.\n     * @type {boolean}\n     * @memberof PaymentInitiationMetadata\n     */\n    supports_international_payments: boolean;\n    /**\n     * A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: `{\\\"GBP\\\": \\\"10000\\\"}` \n     * @type {{ [key: string]: string; }}\n     * @memberof PaymentInitiationMetadata\n     */\n    maximum_payment_amount: { [key: string]: string; };\n    /**\n     * Indicates whether the institution supports returning refund details when initiating a payment.\n     * @type {boolean}\n     * @memberof PaymentInitiationMetadata\n     */\n    supports_refund_details: boolean;\n    /**\n     * \n     * @type {PaymentInitiationStandingOrderMetadata}\n     * @memberof PaymentInitiationMetadata\n     */\n    standing_order_metadata: PaymentInitiationStandingOrderMetadata | null;\n}\n/**\n * An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account.\n * @export\n * @interface PaymentInitiationOptionalRestrictionBacs\n */\nexport interface PaymentInitiationOptionalRestrictionBacs {\n    /**\n     * The account number of the account. Maximum of 10 characters.\n     * @type {string}\n     * @memberof PaymentInitiationOptionalRestrictionBacs\n     */\n    account?: string;\n    /**\n     * The 6-character sort code of the account.\n     * @type {string}\n     * @memberof PaymentInitiationOptionalRestrictionBacs\n     */\n    sort_code?: string;\n}\n/**\n * PaymentInitiationPayment defines a payment initiation payment\n * @export\n * @interface PaymentInitiationPayment\n */\nexport interface PaymentInitiationPayment {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    payment_id: string;\n    /**\n     * \n     * @type {PaymentAmount}\n     * @memberof PaymentInitiationPayment\n     */\n    amount: PaymentAmount;\n    /**\n     * \n     * @type {PaymentInitiationPaymentStatus}\n     * @memberof PaymentInitiationPayment\n     */\n    status: PaymentInitiationPaymentStatus;\n    /**\n     * The ID of the recipient\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    recipient_id: string;\n    /**\n     * A reference for the payment.\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    reference: string;\n    /**\n     * The value of the reference sent to the bank after adjustment to pass bank validation rules.\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    adjusted_reference?: string | null;\n    /**\n     * The date and time of the last time the `status` was updated, in IS0 8601 format\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    last_status_update: string;\n    /**\n     * \n     * @type {ExternalPaymentScheduleGet}\n     * @memberof PaymentInitiationPayment\n     */\n    schedule?: ExternalPaymentScheduleGet | null;\n    /**\n     * \n     * @type {ExternalPaymentRefundDetails}\n     * @memberof PaymentInitiationPayment\n     */\n    refund_details?: ExternalPaymentRefundDetails | null;\n    /**\n     * \n     * @type {SenderBACSNullable}\n     * @memberof PaymentInitiationPayment\n     */\n    bacs: SenderBACSNullable | null;\n    /**\n     * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    iban: string | null;\n    /**\n     * Initiated refunds associated with the payment.\n     * @type {Array<PaymentInitiationRefund>}\n     * @memberof PaymentInitiationPayment\n     */\n    initiated_refunds?: Array<PaymentInitiationRefund>;\n    /**\n     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.\n     * @type {string}\n     * @memberof PaymentInitiationPayment\n     */\n    wallet_id?: string | null;\n    /**\n     * \n     * @type {PaymentScheme}\n     * @memberof PaymentInitiationPayment\n     */\n    scheme?: PaymentScheme | null;\n    /**\n     * \n     * @type {PaymentScheme}\n     * @memberof PaymentInitiationPayment\n     */\n    adjusted_scheme?: PaymentScheme | null;\n}\n/**\n * PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create`\n * @export\n * @interface PaymentInitiationPaymentCreateRequest\n */\nexport interface PaymentInitiationPaymentCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the recipient the payment is for.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    recipient_id: string;\n    /**\n     * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    reference: string;\n    /**\n     * \n     * @type {PaymentAmount}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    amount: PaymentAmount;\n    /**\n     * \n     * @type {ExternalPaymentScheduleRequest}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    schedule?: ExternalPaymentScheduleRequest;\n    /**\n     * \n     * @type {ExternalPaymentOptions}\n     * @memberof PaymentInitiationPaymentCreateRequest\n     */\n    options?: ExternalPaymentOptions | null;\n}\n/**\n * PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create`\n * @export\n * @interface PaymentInitiationPaymentCreateResponse\n */\nexport interface PaymentInitiationPaymentCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the payment\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateResponse\n     */\n    payment_id: string;\n    /**\n     * For a payment returned by this endpoint, there is only one possible value:  `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateResponse\n     */\n    status: PaymentInitiationPaymentCreateResponseStatusEnum;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentCreateResponse\n     */\n    request_id: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentInitiationPaymentCreateResponseStatusEnum {\n    PaymentStatusInputNeeded = 'PAYMENT_STATUS_INPUT_NEEDED'\n}\n\n/**\n * PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get`\n * @export\n * @interface PaymentInitiationPaymentGetRequest\n */\nexport interface PaymentInitiationPaymentGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetRequest\n     */\n    secret?: string;\n    /**\n     * The `payment_id` returned from `/payment_initiation/payment/create`.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetRequest\n     */\n    payment_id: string;\n}\n/**\n * PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get`\n * @export\n * @interface PaymentInitiationPaymentGetResponse\n */\nexport interface PaymentInitiationPaymentGetResponse {\n    /**\n     * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    payment_id: string;\n    /**\n     * \n     * @type {PaymentAmount}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    amount: PaymentAmount;\n    /**\n     * \n     * @type {PaymentInitiationPaymentStatus}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    status: PaymentInitiationPaymentStatus;\n    /**\n     * The ID of the recipient\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    recipient_id: string;\n    /**\n     * A reference for the payment.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    reference: string;\n    /**\n     * The value of the reference sent to the bank after adjustment to pass bank validation rules.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    adjusted_reference?: string | null;\n    /**\n     * The date and time of the last time the `status` was updated, in IS0 8601 format\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    last_status_update: string;\n    /**\n     * \n     * @type {ExternalPaymentScheduleGet}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    schedule?: ExternalPaymentScheduleGet | null;\n    /**\n     * \n     * @type {ExternalPaymentRefundDetails}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    refund_details?: ExternalPaymentRefundDetails | null;\n    /**\n     * \n     * @type {SenderBACSNullable}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    bacs: SenderBACSNullable | null;\n    /**\n     * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    iban: string | null;\n    /**\n     * Initiated refunds associated with the payment.\n     * @type {Array<PaymentInitiationRefund>}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    initiated_refunds?: Array<PaymentInitiationRefund>;\n    /**\n     * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    wallet_id?: string | null;\n    /**\n     * \n     * @type {PaymentScheme}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    scheme?: PaymentScheme | null;\n    /**\n     * \n     * @type {PaymentScheme}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    adjusted_scheme?: PaymentScheme | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentGetResponse\n     */\n    request_id: string;\n}\n/**\n * PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list`\n * @export\n * @interface PaymentInitiationPaymentListRequest\n */\nexport interface PaymentInitiationPaymentListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentListRequest\n     */\n    secret?: string;\n    /**\n     * The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).\n     * @type {number}\n     * @memberof PaymentInitiationPaymentListRequest\n     */\n    count?: number | null;\n    /**\n     * A string in RFC 3339 format (i.e. \\\"2019-12-06T22:35:49Z\\\"). Only payments created before the cursor will be returned.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentListRequest\n     */\n    cursor?: string | null;\n}\n/**\n * PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list`\n * @export\n * @interface PaymentInitiationPaymentListResponse\n */\nexport interface PaymentInitiationPaymentListResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of payments that have been created, associated with the given `client_id`.\n     * @type {Array<PaymentInitiationPayment>}\n     * @memberof PaymentInitiationPaymentListResponse\n     */\n    payments: Array<PaymentInitiationPayment>;\n    /**\n     * The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentListResponse\n     */\n    next_cursor: string | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentListResponse\n     */\n    request_id: string;\n}\n/**\n * PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse`\n * @export\n * @interface PaymentInitiationPaymentReverseRequest\n */\nexport interface PaymentInitiationPaymentReverseRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the payment to reverse\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseRequest\n     */\n    payment_id: string;\n}\n/**\n * PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse`\n * @export\n * @interface PaymentInitiationPaymentReverseResponse\n */\nexport interface PaymentInitiationPaymentReverseResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the refund\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseResponse\n     */\n    refund_id: string;\n    /**\n     * The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseResponse\n     */\n    status: PaymentInitiationPaymentReverseResponseStatusEnum;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentReverseResponse\n     */\n    request_id: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentInitiationPaymentReverseResponseStatusEnum {\n    Processing = 'PROCESSING',\n    Executed = 'EXECUTED',\n    Initiated = 'INITIATED',\n    Failed = 'FAILED'\n}\n\n/**\n * The status of the payment.  `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.  `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.  `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.  `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.  `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.  `PAYMENT_STATUS_EXECUTED`: The payment has been successfully initiated and is considered complete.  `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.  `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.  Deprecated: These statuses will be removed in a future release.  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.  `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.  `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.\n * @export\n * @enum {string}\n */\nexport enum PaymentInitiationPaymentStatus {\n    InputNeeded = 'PAYMENT_STATUS_INPUT_NEEDED',\n    Processing = 'PAYMENT_STATUS_PROCESSING',\n    Initiated = 'PAYMENT_STATUS_INITIATED',\n    Completed = 'PAYMENT_STATUS_COMPLETED',\n    InsufficientFunds = 'PAYMENT_STATUS_INSUFFICIENT_FUNDS',\n    Failed = 'PAYMENT_STATUS_FAILED',\n    Blocked = 'PAYMENT_STATUS_BLOCKED',\n    Unknown = 'PAYMENT_STATUS_UNKNOWN',\n    Executed = 'PAYMENT_STATUS_EXECUTED',\n    Authorising = 'PAYMENT_STATUS_AUTHORISING',\n    Cancelled = 'PAYMENT_STATUS_CANCELLED',\n    Established = 'PAYMENT_STATUS_ESTABLISHED',\n    Rejected = 'PAYMENT_STATUS_REJECTED'\n}\n\n/**\n * PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create`\n * @export\n * @interface PaymentInitiationPaymentTokenCreateRequest\n */\nexport interface PaymentInitiationPaymentTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The `payment_id` returned from `/payment_initiation/payment/create`.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateRequest\n     */\n    payment_id: string;\n}\n/**\n * PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create`\n * @export\n * @interface PaymentInitiationPaymentTokenCreateResponse\n */\nexport interface PaymentInitiationPaymentTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A `payment_token` that can be provided to Link initialization to enter the payment initiation flow\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateResponse\n     */\n    payment_token: string;\n    /**\n     * The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateResponse\n     */\n    payment_token_expiration_time: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationPaymentTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * PaymentInitiationRecipient defines a payment initiation recipient\n * @export\n * @interface PaymentInitiationRecipient\n */\nexport interface PaymentInitiationRecipient {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipient\n     */\n    recipient_id: string;\n    /**\n     * The name of the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipient\n     */\n    name: string;\n    /**\n     * \n     * @type {PaymentInitiationAddress}\n     * @memberof PaymentInitiationRecipient\n     */\n    address?: PaymentInitiationAddress | null;\n    /**\n     * The International Bank Account Number (IBAN) for the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipient\n     */\n    iban?: string | null;\n    /**\n     * \n     * @type {RecipientBACSNullable}\n     * @memberof PaymentInitiationRecipient\n     */\n    bacs?: RecipientBACSNullable | null;\n    /**\n     * The EMI (E-Money Institution) recipient that this recipient is associated with, if any. This EMI recipient is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.\n     * @type {string}\n     * @memberof PaymentInitiationRecipient\n     */\n    emi_recipient_id?: string | null;\n}\n/**\n * PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create`\n * @export\n * @interface PaymentInitiationRecipientCreateRequest\n */\nexport interface PaymentInitiationRecipientCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    secret?: string;\n    /**\n     * The name of the recipient\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    name: string;\n    /**\n     * The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    iban?: string | null;\n    /**\n     * \n     * @type {RecipientBACSNullable}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    bacs?: RecipientBACSNullable | null;\n    /**\n     * \n     * @type {PaymentInitiationAddress}\n     * @memberof PaymentInitiationRecipientCreateRequest\n     */\n    address?: PaymentInitiationAddress | null;\n}\n/**\n * PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create`\n * @export\n * @interface PaymentInitiationRecipientCreateResponse\n */\nexport interface PaymentInitiationRecipientCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the recipient\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateResponse\n     */\n    recipient_id: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientCreateResponse\n     */\n    request_id: string;\n}\n/**\n * PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get`\n * @export\n * @interface PaymentInitiationRecipientGetRequest\n */\nexport interface PaymentInitiationRecipientGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the recipient\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetRequest\n     */\n    recipient_id: string;\n}\n/**\n * PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get`\n * @export\n * @interface PaymentInitiationRecipientGetResponse\n */\nexport interface PaymentInitiationRecipientGetResponse {\n    /**\n     * The ID of the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    recipient_id: string;\n    /**\n     * The name of the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {PaymentInitiationAddress}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    address?: PaymentInitiationAddress | null;\n    /**\n     * The International Bank Account Number (IBAN) for the recipient.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    iban?: string | null;\n    /**\n     * \n     * @type {RecipientBACSNullable}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    bacs?: RecipientBACSNullable | null;\n    /**\n     * The EMI (E-Money Institution) recipient that this recipient is associated with, if any. This EMI recipient is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    emi_recipient_id?: string | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponse\n     */\n    request_id: string;\n}\n/**\n * \n * @export\n * @interface PaymentInitiationRecipientGetResponseAllOf\n */\nexport interface PaymentInitiationRecipientGetResponseAllOf {\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientGetResponseAllOf\n     */\n    request_id?: string;\n}\n/**\n * PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list`\n * @export\n * @interface PaymentInitiationRecipientListRequest\n */\nexport interface PaymentInitiationRecipientListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientListRequest\n     */\n    secret?: string;\n}\n/**\n * PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list`\n * @export\n * @interface PaymentInitiationRecipientListResponse\n */\nexport interface PaymentInitiationRecipientListResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of payment recipients created for Payment Initiation\n     * @type {Array<PaymentInitiationRecipient>}\n     * @memberof PaymentInitiationRecipientListResponse\n     */\n    recipients: Array<PaymentInitiationRecipient>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationRecipientListResponse\n     */\n    request_id: string;\n}\n/**\n * PaymentInitiationRefund defines a payment initiation refund\n * @export\n * @interface PaymentInitiationRefund\n */\nexport interface PaymentInitiationRefund {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the refund. Like all Plaid identifiers, the `refund_id` is case sensitive.\n     * @type {string}\n     * @memberof PaymentInitiationRefund\n     */\n    refund_id: string;\n    /**\n     * \n     * @type {PaymentAmount}\n     * @memberof PaymentInitiationRefund\n     */\n    amount: PaymentAmount;\n    /**\n     * The status of the refund.  `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.  `INITIATED`: The refund has been successfully initiated.  `EXECUTED`: Indicates that the refund has been successfully executed.  `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.\n     * @type {string}\n     * @memberof PaymentInitiationRefund\n     */\n    status: PaymentInitiationRefundStatusEnum;\n    /**\n     * The date and time of the last time the `status` was updated, in IS0 8601 format\n     * @type {string}\n     * @memberof PaymentInitiationRefund\n     */\n    last_status_update: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PaymentInitiationRefundStatusEnum {\n    Processing = 'PROCESSING',\n    Initiated = 'INITIATED',\n    Executed = 'EXECUTED',\n    Failed = 'FAILED'\n}\n\n/**\n * Metadata specifically related to valid Payment Initiation standing order configurations for the institution.\n * @export\n * @interface PaymentInitiationStandingOrderMetadata\n */\nexport interface PaymentInitiationStandingOrderMetadata {\n    [key: string]: object | any;\n\n    /**\n     * Indicates whether the institution supports closed-ended standing orders by providing an end date.\n     * @type {boolean}\n     * @memberof PaymentInitiationStandingOrderMetadata\n     */\n    supports_standing_order_end_date: boolean;\n    /**\n     * This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month.\n     * @type {boolean}\n     * @memberof PaymentInitiationStandingOrderMetadata\n     */\n    supports_standing_order_negative_execution_days: boolean;\n    /**\n     * A list of the valid standing order intervals supported by the institution.\n     * @type {Array<PaymentScheduleInterval>}\n     * @memberof PaymentInitiationStandingOrderMetadata\n     */\n    valid_standing_order_intervals: Array<PaymentScheduleInterval>;\n}\n/**\n * Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n * @export\n * @interface PaymentMeta\n */\nexport interface PaymentMeta {\n    [key: string]: object | any;\n\n    /**\n     * The transaction reference number supplied by the financial institution.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    reference_number: string | null;\n    /**\n     * The ACH PPD ID for the payer.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    ppd_id: string | null;\n    /**\n     * For transfers, the party that is receiving the transaction.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    payee: string | null;\n    /**\n     * The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    by_order_of: string | null;\n    /**\n     * For transfers, the party that is paying the transaction.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    payer: string | null;\n    /**\n     * The type of transfer, e.g. \\'ACH\\'\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    payment_method: string | null;\n    /**\n     * The name of the payment processor\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    payment_processor: string | null;\n    /**\n     * The payer-supplied description of the transfer.\n     * @type {string}\n     * @memberof PaymentMeta\n     */\n    reason: string | null;\n}\n/**\n * The frequency interval of the payment.\n * @export\n * @enum {string}\n */\nexport enum PaymentScheduleInterval {\n    Weekly = 'WEEKLY',\n    Monthly = 'MONTHLY'\n}\n\n/**\n * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.  `FASTER_PAYMENTS`: Enables payments to move quickly between UK bank accounts. Default value in the UK.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.\n * @export\n * @enum {string}\n */\nexport enum PaymentScheme {\n    Null = 'null',\n    FasterPayments = 'FASTER_PAYMENTS',\n    SepaCreditTransfer = 'SEPA_CREDIT_TRANSFER',\n    SepaCreditTransferInstant = 'SEPA_CREDIT_TRANSFER_INSTANT'\n}\n\n/**\n * Fired when the status of a payment has changed.\n * @export\n * @interface PaymentStatusUpdateWebhook\n */\nexport interface PaymentStatusUpdateWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `PAYMENT_INITIATION`\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    webhook_type: string;\n    /**\n     * `PAYMENT_STATUS_UPDATE`\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `payment_id` for the payment being updated\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    payment_id: string;\n    /**\n     * \n     * @type {PaymentInitiationPaymentStatus}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    new_payment_status: PaymentInitiationPaymentStatus;\n    /**\n     * \n     * @type {PaymentInitiationPaymentStatus}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    old_payment_status: PaymentInitiationPaymentStatus;\n    /**\n     * The original value of the reference when creating the payment.\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    original_reference: string | null;\n    /**\n     * The value of the reference sent to the bank after adjustment to pass bank validation rules.\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    adjusted_reference?: string | null;\n    /**\n     * The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    original_start_date: string | null;\n    /**\n     * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    adjusted_start_date: string | null;\n    /**\n     * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\\\"2017-09-14T14:42:19.350Z\\\"`\n     * @type {string}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    timestamp: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof PaymentStatusUpdateWebhook\n     */\n    error?: PlaidError;\n}\n/**\n * An object representing data extracted from the end user\\'s paystub.\n * @export\n * @interface Paystub\n */\nexport interface Paystub {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Deductions}\n     * @memberof Paystub\n     */\n    deductions: Deductions;\n    /**\n     * An identifier of the document referenced by the document metadata.\n     * @type {string}\n     * @memberof Paystub\n     */\n    doc_id: string;\n    /**\n     * \n     * @type {Earnings}\n     * @memberof Paystub\n     */\n    earnings: Earnings;\n    /**\n     * \n     * @type {Employee}\n     * @memberof Paystub\n     */\n    employee: Employee;\n    /**\n     * \n     * @type {PaystubEmployer}\n     * @memberof Paystub\n     */\n    employer: PaystubEmployer;\n    /**\n     * \n     * @type {EmploymentDetails}\n     * @memberof Paystub\n     * @deprecated\n     */\n    employment_details?: EmploymentDetails;\n    /**\n     * \n     * @type {NetPay}\n     * @memberof Paystub\n     */\n    net_pay: NetPay;\n    /**\n     * \n     * @type {PayPeriodDetails}\n     * @memberof Paystub\n     */\n    pay_period_details: PayPeriodDetails;\n    /**\n     * \n     * @type {PaystubDetails}\n     * @memberof Paystub\n     * @deprecated\n     */\n    paystub_details?: PaystubDetails;\n    /**\n     * \n     * @type {Array<IncomeBreakdown>}\n     * @memberof Paystub\n     * @deprecated\n     */\n    income_breakdown?: Array<IncomeBreakdown>;\n    /**\n     * \n     * @type {PaystubYTDDetails}\n     * @memberof Paystub\n     * @deprecated\n     */\n    ytd_earnings?: PaystubYTDDetails;\n    /**\n     * \n     * @type {PaystubVerification}\n     * @memberof Paystub\n     */\n    verification: PaystubVerification | null;\n}\n/**\n * Address on the paystub\n * @export\n * @interface PaystubAddress\n */\nexport interface PaystubAddress {\n    [key: string]: object | any;\n\n    /**\n     * The full city name.\n     * @type {string}\n     * @memberof PaystubAddress\n     */\n    city?: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code.\n     * @type {string}\n     * @memberof PaystubAddress\n     */\n    country?: string | null;\n    /**\n     * The postal code of the address.\n     * @type {string}\n     * @memberof PaystubAddress\n     */\n    postal_code?: string | null;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof PaystubAddress\n     */\n    region?: string | null;\n    /**\n     * The full street address.\n     * @type {string}\n     * @memberof PaystubAddress\n     */\n    street?: string | null;\n    /**\n     * Street address line 1.\n     * @type {string}\n     * @memberof PaystubAddress\n     * @deprecated\n     */\n    line1?: string | null;\n    /**\n     * Street address line 2.\n     * @type {string}\n     * @memberof PaystubAddress\n     * @deprecated\n     */\n    line2?: string | null;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof PaystubAddress\n     * @deprecated\n     */\n    state_code?: string | null;\n}\n/**\n * Deduction on the paystub\n * @export\n * @interface PaystubDeduction\n */\nexport interface PaystubDeduction {\n    [key: string]: object | any;\n\n    /**\n     * The description of the deduction, as provided on the paystub. For example: `\\\"401(k)\\\"`, `\\\"FICA MED TAX\\\"`.\n     * @type {string}\n     * @memberof PaystubDeduction\n     */\n    type: string | null;\n    /**\n     * `true` if the deduction is pre-tax; `false` otherwise.\n     * @type {boolean}\n     * @memberof PaystubDeduction\n     */\n    is_pretax: boolean | null;\n    /**\n     * The amount of the deduction.\n     * @type {number}\n     * @memberof PaystubDeduction\n     */\n    total: number | null;\n}\n/**\n * An object representing details that can be found on the paystub.\n * @export\n * @interface PaystubDetails\n */\nexport interface PaystubDetails {\n    [key: string]: object | any;\n\n    /**\n     * Beginning date of the pay period on the paystub in the \\'YYYY-MM-DD\\' format.\n     * @type {string}\n     * @memberof PaystubDetails\n     */\n    pay_period_start_date?: string | null;\n    /**\n     * Ending date of the pay period on the paystub in the \\'YYYY-MM-DD\\' format.\n     * @type {string}\n     * @memberof PaystubDetails\n     */\n    pay_period_end_date?: string | null;\n    /**\n     * Pay date on the paystub in the \\'YYYY-MM-DD\\' format.\n     * @type {string}\n     * @memberof PaystubDetails\n     */\n    pay_date?: string | null;\n    /**\n     * The name of the payroll provider that generated the paystub, e.g. ADP\n     * @type {string}\n     * @memberof PaystubDetails\n     */\n    paystub_provider?: string | null;\n    /**\n     * \n     * @type {PaystubPayFrequency}\n     * @memberof PaystubDetails\n     */\n    pay_frequency?: PaystubPayFrequency | null;\n}\n/**\n * Information about the employer on the paystub\n * @export\n * @interface PaystubEmployer\n */\nexport interface PaystubEmployer {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PaystubAddress}\n     * @memberof PaystubEmployer\n     */\n    address?: PaystubAddress;\n    /**\n     * The name of the employer on the paystub.\n     * @type {string}\n     * @memberof PaystubEmployer\n     */\n    name: string | null;\n}\n/**\n * An object representing data from a paystub.\n * @export\n * @interface PaystubOverride\n */\nexport interface PaystubOverride {\n    /**\n     * \n     * @type {PaystubOverrideEmployer}\n     * @memberof PaystubOverride\n     */\n    employer?: PaystubOverrideEmployer;\n    /**\n     * \n     * @type {PaystubOverrideEmployee}\n     * @memberof PaystubOverride\n     */\n    employee?: PaystubOverrideEmployee;\n    /**\n     * \n     * @type {Array<IncomeBreakdown>}\n     * @memberof PaystubOverride\n     */\n    income_breakdown?: Array<IncomeBreakdown>;\n    /**\n     * \n     * @type {PayPeriodDetails}\n     * @memberof PaystubOverride\n     */\n    pay_period_details?: PayPeriodDetails;\n}\n/**\n * The employee on the paystub.\n * @export\n * @interface PaystubOverrideEmployee\n */\nexport interface PaystubOverrideEmployee {\n    /**\n     * The name of the employee.\n     * @type {string}\n     * @memberof PaystubOverrideEmployee\n     */\n    name?: string;\n    /**\n     * \n     * @type {PaystubOverrideEmployeeAddress}\n     * @memberof PaystubOverrideEmployee\n     */\n    address?: PaystubOverrideEmployeeAddress;\n}\n/**\n * The address of the employee.\n * @export\n * @interface PaystubOverrideEmployeeAddress\n */\nexport interface PaystubOverrideEmployeeAddress {\n    /**\n     * The full city name.\n     * @type {string}\n     * @memberof PaystubOverrideEmployeeAddress\n     */\n    city?: string;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof PaystubOverrideEmployeeAddress\n     */\n    region?: string;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof PaystubOverrideEmployeeAddress\n     */\n    street?: string;\n    /**\n     * 5 digit postal code.\n     * @type {string}\n     * @memberof PaystubOverrideEmployeeAddress\n     */\n    postal_code?: string;\n    /**\n     * The country of the address.\n     * @type {string}\n     * @memberof PaystubOverrideEmployeeAddress\n     */\n    country?: string;\n}\n/**\n * The employer on the paystub.\n * @export\n * @interface PaystubOverrideEmployer\n */\nexport interface PaystubOverrideEmployer {\n    /**\n     * The name of the employer.\n     * @type {string}\n     * @memberof PaystubOverrideEmployer\n     */\n    name?: string;\n}\n/**\n * The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.\n * @export\n * @enum {string}\n */\nexport enum PaystubPayFrequency {\n    Monthly = 'MONTHLY',\n    BiWeekly = 'BI-WEEKLY',\n    Weekly = 'WEEKLY',\n    SemiMonthly = 'SEMI-MONTHLY',\n    Null = 'null'\n}\n\n/**\n * An object containing details on the paystub\\'s verification status. This object will only be populated if the [`income_verification.access_tokens`](/docs/api/tokens/#link-token-create-request-income-verification-access-tokens) parameter was provided during the `/link/token/create` call or if a problem was detected with the information supplied by the user; otherwise it will be `null`.\n * @export\n * @interface PaystubVerification\n */\nexport interface PaystubVerification {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PaystubVerificationStatus}\n     * @memberof PaystubVerification\n     */\n    verification_status: PaystubVerificationStatus | null;\n    /**\n     * \n     * @type {Array<VerificationAttribute>}\n     * @memberof PaystubVerification\n     */\n    verification_attributes: Array<VerificationAttribute>;\n}\n/**\n * Derived verification status.\n * @export\n * @enum {string}\n */\nexport enum PaystubVerificationStatus {\n    PaystubVerificationStatusUnknown = 'PAYSTUB_VERIFICATION_STATUS_UNKNOWN',\n    PaystubVerificationStatusVerified = 'PAYSTUB_VERIFICATION_STATUS_VERIFIED',\n    PaystubVerificationStatusFraudulent = 'PAYSTUB_VERIFICATION_STATUS_FRAUDULENT',\n    Null = 'null'\n}\n\n/**\n * The amount of income earned year to date, as based on paystub data.\n * @export\n * @interface PaystubYTDDetails\n */\nexport interface PaystubYTDDetails {\n    [key: string]: object | any;\n\n    /**\n     * Year-to-date gross earnings.\n     * @type {number}\n     * @memberof PaystubYTDDetails\n     */\n    gross_earnings?: number | null;\n    /**\n     * Year-to-date net (take home) earnings.\n     * @type {number}\n     * @memberof PaystubYTDDetails\n     */\n    net_earnings?: number | null;\n}\n/**\n * Fired when an Itemâ€™s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Linkâ€™s update mode.\n * @export\n * @interface PendingExpirationWebhook\n */\nexport interface PendingExpirationWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ITEM`\n     * @type {string}\n     * @memberof PendingExpirationWebhook\n     */\n    webhook_type: string;\n    /**\n     * `PENDING_EXPIRATION`\n     * @type {string}\n     * @memberof PendingExpirationWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof PendingExpirationWebhook\n     */\n    item_id: string;\n    /**\n     * The date and time at which the Item\\'s access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format\n     * @type {string}\n     * @memberof PendingExpirationWebhook\n     */\n    consent_expiration_time: string;\n}\n/**\n * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases. The field is currently in beta.  The complete category can be generated by concatenating primary and detailed categories.  This feature is currently in beta â€“ to request access, contact transactions-feedback@plaid.com.\n * @export\n * @interface PersonalFinanceCategory\n */\nexport interface PersonalFinanceCategory {\n    [key: string]: object | any;\n\n    /**\n     * A high level category that communicates the broad category of the transaction.\n     * @type {string}\n     * @memberof PersonalFinanceCategory\n     */\n    primary: string;\n    /**\n     * Provides additional granularity to the primary categorization.\n     * @type {string}\n     * @memberof PersonalFinanceCategory\n     */\n    detailed: string;\n}\n/**\n * A phone number\n * @export\n * @interface PhoneNumber\n */\nexport interface PhoneNumber {\n    [key: string]: object | any;\n\n    /**\n     * The phone number.\n     * @type {string}\n     * @memberof PhoneNumber\n     */\n    data: string;\n    /**\n     * When `true`, identifies the phone number as the primary number on an account.\n     * @type {boolean}\n     * @memberof PhoneNumber\n     */\n    primary: boolean;\n    /**\n     * The type of phone number.\n     * @type {string}\n     * @memberof PhoneNumber\n     */\n    type: PhoneNumberTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PhoneNumberTypeEnum {\n    Home = 'home',\n    Work = 'work',\n    Office = 'office',\n    Mobile = 'mobile',\n    Mobile1 = 'mobile1',\n    Other = 'other'\n}\n\n/**\n * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.\n * @export\n * @interface PlaidError\n */\nexport interface PlaidError {\n    /**\n     * A broad categorization of the error. Safe for programmatic use.\n     * @type {string}\n     * @memberof PlaidError\n     */\n    error_type: PlaidErrorErrorTypeEnum;\n    /**\n     * The particular error code. Safe for programmatic use.\n     * @type {string}\n     * @memberof PlaidError\n     */\n    error_code: string;\n    /**\n     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.\n     * @type {string}\n     * @memberof PlaidError\n     */\n    error_message: string;\n    /**\n     * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.\n     * @type {string}\n     * @memberof PlaidError\n     */\n    display_message: string | null;\n    /**\n     * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.\n     * @type {string}\n     * @memberof PlaidError\n     */\n    request_id?: string;\n    /**\n     * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.\n     * @type {Array<any>}\n     * @memberof PlaidError\n     */\n    causes?: Array<any>;\n    /**\n     * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.\n     * @type {number}\n     * @memberof PlaidError\n     */\n    status?: number | null;\n    /**\n     * The URL of a Plaid documentation page with more information about the error\n     * @type {string}\n     * @memberof PlaidError\n     */\n    documentation_url?: string;\n    /**\n     * Suggested steps for resolving the error\n     * @type {string}\n     * @memberof PlaidError\n     */\n    suggested_action?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PlaidErrorErrorTypeEnum {\n    InvalidRequest = 'INVALID_REQUEST',\n    InvalidResult = 'INVALID_RESULT',\n    InvalidInput = 'INVALID_INPUT',\n    InstitutionError = 'INSTITUTION_ERROR',\n    RateLimitExceeded = 'RATE_LIMIT_EXCEEDED',\n    ApiError = 'API_ERROR',\n    ItemError = 'ITEM_ERROR',\n    AssetReportError = 'ASSET_REPORT_ERROR',\n    RecaptchaError = 'RECAPTCHA_ERROR',\n    OauthError = 'OAUTH_ERROR',\n    PaymentError = 'PAYMENT_ERROR',\n    BankTransferError = 'BANK_TRANSFER_ERROR',\n    IncomeVerificationError = 'INCOME_VERIFICATION_ERROR'\n}\n\n/**\n * An object containing a set of ids related to an employee\n * @export\n * @interface PlatformIds\n */\nexport interface PlatformIds {\n    [key: string]: object | any;\n\n    /**\n     * The ID of an employee as given by their employer\n     * @type {string}\n     * @memberof PlatformIds\n     */\n    employee_id?: string | null;\n    /**\n     * The ID of an employee as given by their payroll\n     * @type {string}\n     * @memberof PlatformIds\n     */\n    payroll_id?: string | null;\n    /**\n     * The ID of the position of the employee\n     * @type {string}\n     * @memberof PlatformIds\n     */\n    position_id?: string | null;\n}\n/**\n * ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create`\n * @export\n * @interface ProcessorApexProcessorTokenCreateRequest\n */\nexport interface ProcessorApexProcessorTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorApexProcessorTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorApexProcessorTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ProcessorApexProcessorTokenCreateRequest\n     */\n    access_token: string;\n    /**\n     * The `account_id` value obtained from the `onSuccess` callback in Link\n     * @type {string}\n     * @memberof ProcessorApexProcessorTokenCreateRequest\n     */\n    account_id: string;\n}\n/**\n * ProcessorAuthGetRequest defines the request schema for `/processor/auth/get`\n * @export\n * @interface ProcessorAuthGetRequest\n */\nexport interface ProcessorAuthGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorAuthGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorAuthGetRequest\n     */\n    secret?: string;\n    /**\n     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`\n     * @type {string}\n     * @memberof ProcessorAuthGetRequest\n     */\n    processor_token: string;\n}\n/**\n * ProcessorAuthGetResponse defines the response schema for `/processor/auth/get`\n * @export\n * @interface ProcessorAuthGetResponse\n */\nexport interface ProcessorAuthGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorAuthGetResponse\n     */\n    request_id: string;\n    /**\n     * \n     * @type {ProcessorNumber}\n     * @memberof ProcessorAuthGetResponse\n     */\n    numbers: ProcessorNumber;\n    /**\n     * \n     * @type {AccountBase}\n     * @memberof ProcessorAuthGetResponse\n     */\n    account: AccountBase;\n}\n/**\n * ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get`\n * @export\n * @interface ProcessorBalanceGetRequest\n */\nexport interface ProcessorBalanceGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorBalanceGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorBalanceGetRequest\n     */\n    secret?: string;\n    /**\n     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`\n     * @type {string}\n     * @memberof ProcessorBalanceGetRequest\n     */\n    processor_token: string;\n    /**\n     * \n     * @type {ProcessorBalanceGetRequestOptions}\n     * @memberof ProcessorBalanceGetRequest\n     */\n    options?: ProcessorBalanceGetRequestOptions;\n}\n/**\n * An optional object to filter `/processor/balance/get` results.\n * @export\n * @interface ProcessorBalanceGetRequestOptions\n */\nexport interface ProcessorBalanceGetRequestOptions {\n    /**\n     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.  If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.  This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.\n     * @type {string}\n     * @memberof ProcessorBalanceGetRequestOptions\n     */\n    min_last_updated_datetime?: string;\n}\n/**\n * ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get`\n * @export\n * @interface ProcessorBalanceGetResponse\n */\nexport interface ProcessorBalanceGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {AccountBase}\n     * @memberof ProcessorBalanceGetResponse\n     */\n    account: AccountBase;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorBalanceGetResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/processor/bank_transfer/create`\n * @export\n * @interface ProcessorBankTransferCreateRequest\n */\nexport interface ProcessorBankTransferCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    secret?: string;\n    /**\n     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    idempotency_key: string;\n    /**\n     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    processor_token: string;\n    /**\n     * \n     * @type {BankTransferType}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    type: BankTransferType;\n    /**\n     * \n     * @type {BankTransferNetwork}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    network: BankTransferNetwork;\n    /**\n     * The amount of the bank transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    amount: string;\n    /**\n     * The currency of the transfer amount â€“ should be set to \\\"USD\\\".\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    iso_currency_code: string;\n    /**\n     * The transfer description. Maximum of 10 characters.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    ach_class?: ACHClass;\n    /**\n     * \n     * @type {BankTransferUser}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    user: BankTransferUser;\n    /**\n     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    custom_tag?: string | null;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateRequest\n     */\n    origination_account_id?: string | null;\n}\n/**\n * Defines the response schema for `/processor/bank_transfer/create`\n * @export\n * @interface ProcessorBankTransferCreateResponse\n */\nexport interface ProcessorBankTransferCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {BankTransfer}\n     * @memberof ProcessorBankTransferCreateResponse\n     */\n    bank_transfer: BankTransfer;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorBankTransferCreateResponse\n     */\n    request_id: string;\n}\n/**\n * ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get`\n * @export\n * @interface ProcessorIdentityGetRequest\n */\nexport interface ProcessorIdentityGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorIdentityGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorIdentityGetRequest\n     */\n    secret?: string;\n    /**\n     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`\n     * @type {string}\n     * @memberof ProcessorIdentityGetRequest\n     */\n    processor_token: string;\n}\n/**\n * ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get`\n * @export\n * @interface ProcessorIdentityGetResponse\n */\nexport interface ProcessorIdentityGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {AccountIdentity}\n     * @memberof ProcessorIdentityGetResponse\n     */\n    account: AccountIdentity;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorIdentityGetResponse\n     */\n    request_id: string;\n}\n/**\n * An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned.\n * @export\n * @interface ProcessorNumber\n */\nexport interface ProcessorNumber {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {NumbersACHNullable}\n     * @memberof ProcessorNumber\n     */\n    ach?: NumbersACHNullable | null;\n    /**\n     * \n     * @type {NumbersEFTNullable}\n     * @memberof ProcessorNumber\n     */\n    eft?: NumbersEFTNullable | null;\n    /**\n     * \n     * @type {NumbersInternationalNullable}\n     * @memberof ProcessorNumber\n     */\n    international?: NumbersInternationalNullable | null;\n    /**\n     * \n     * @type {NumbersBACSNullable}\n     * @memberof ProcessorNumber\n     */\n    bacs?: NumbersBACSNullable | null;\n}\n/**\n * ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create`\n * @export\n * @interface ProcessorStripeBankAccountTokenCreateRequest\n */\nexport interface ProcessorStripeBankAccountTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateRequest\n     */\n    access_token: string;\n    /**\n     * The `account_id` value obtained from the `onSuccess` callback in Link\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateRequest\n     */\n    account_id: string;\n}\n/**\n * ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create`\n * @export\n * @interface ProcessorStripeBankAccountTokenCreateResponse\n */\nexport interface ProcessorStripeBankAccountTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A token that can be sent to Stripe for use in making API calls to Plaid\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateResponse\n     */\n    stripe_bank_account_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorStripeBankAccountTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * ProcessorTokenCreateRequest defines the request schema for `/processor/token/create`\n * @export\n * @interface ProcessorTokenCreateRequest\n */\nexport interface ProcessorTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof ProcessorTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof ProcessorTokenCreateRequest\n     */\n    access_token: string;\n    /**\n     * The `account_id` value obtained from the `onSuccess` callback in Link\n     * @type {string}\n     * @memberof ProcessorTokenCreateRequest\n     */\n    account_id: string;\n    /**\n     * The processor you are integrating with.\n     * @type {string}\n     * @memberof ProcessorTokenCreateRequest\n     */\n    processor: ProcessorTokenCreateRequestProcessorEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ProcessorTokenCreateRequestProcessorEnum {\n    Achq = 'achq',\n    Alpaca = 'alpaca',\n    Astra = 'astra',\n    Check = 'check',\n    Checkbook = 'checkbook',\n    Circle = 'circle',\n    Drivewealth = 'drivewealth',\n    Dwolla = 'dwolla',\n    Galileo = 'galileo',\n    Lithic = 'lithic',\n    ModernTreasury = 'modern_treasury',\n    Moov = 'moov',\n    Ocrolus = 'ocrolus',\n    PrimeTrust = 'prime_trust',\n    Rize = 'rize',\n    SilaMoney = 'sila_money',\n    SvbApi = 'svb_api',\n    TreasuryPrime = 'treasury_prime',\n    Unit = 'unit',\n    Vesta = 'vesta',\n    Vopay = 'vopay',\n    Wyre = 'wyre'\n}\n\n/**\n * ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create`\n * @export\n * @interface ProcessorTokenCreateResponse\n */\nexport interface ProcessorTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * The `processor_token` that can then be used by the Plaid partner to make API requests\n     * @type {string}\n     * @memberof ProcessorTokenCreateResponse\n     */\n    processor_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof ProcessorTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed.\n * @export\n * @interface ProductAccess\n */\nexport interface ProductAccess {\n    [key: string]: object | any;\n\n    /**\n     * Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof ProductAccess\n     */\n    statements?: boolean | null;\n    /**\n     * Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof ProductAccess\n     */\n    identity?: boolean | null;\n    /**\n     * Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof ProductAccess\n     */\n    auth?: boolean | null;\n    /**\n     * Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof ProductAccess\n     */\n    transactions?: boolean | null;\n}\n/**\n * A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.\n * @export\n * @interface ProductStatus\n */\nexport interface ProductStatus {\n    [key: string]: object | any;\n\n    /**\n     * This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.  `HEALTHY`: the majority of requests are successful `DEGRADED`: only some requests are successful `DOWN`: all requests are failing\n     * @type {string}\n     * @memberof ProductStatus\n     * @deprecated\n     */\n    status: ProductStatusStatusEnum;\n    /**\n     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution. \n     * @type {string}\n     * @memberof ProductStatus\n     */\n    last_status_change: string;\n    /**\n     * \n     * @type {ProductStatusBreakdown}\n     * @memberof ProductStatus\n     */\n    breakdown: ProductStatusBreakdown;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ProductStatusStatusEnum {\n    Healthy = 'HEALTHY',\n    Degraded = 'DEGRADED',\n    Down = 'DOWN'\n}\n\n/**\n * A detailed breakdown of the institution\\'s performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1.\n * @export\n * @interface ProductStatusBreakdown\n */\nexport interface ProductStatusBreakdown {\n    [key: string]: object | any;\n\n    /**\n     * The percentage of login attempts that are successful, expressed as a decimal.\n     * @type {number}\n     * @memberof ProductStatusBreakdown\n     */\n    success: number;\n    /**\n     * The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. \n     * @type {number}\n     * @memberof ProductStatusBreakdown\n     */\n    error_plaid: number;\n    /**\n     * The percentage of logins that are failing due to an issue in the institution\\'s system, expressed as a decimal.\n     * @type {number}\n     * @memberof ProductStatusBreakdown\n     */\n    error_institution: number;\n    /**\n     * The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.\n     * @type {string}\n     * @memberof ProductStatusBreakdown\n     */\n    refresh_interval?: ProductStatusBreakdownRefreshIntervalEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ProductStatusBreakdownRefreshIntervalEnum {\n    Normal = 'NORMAL',\n    Delayed = 'DELAYED',\n    Stopped = 'STOPPED'\n}\n\n/**\n * A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.\n * @export\n * @enum {string}\n */\nexport enum Products {\n    Assets = 'assets',\n    Auth = 'auth',\n    Balance = 'balance',\n    Identity = 'identity',\n    Investments = 'investments',\n    Liabilities = 'liabilities',\n    PaymentInitiation = 'payment_initiation',\n    Transactions = 'transactions',\n    CreditDetails = 'credit_details',\n    Income = 'income',\n    IncomeVerification = 'income_verification',\n    DepositSwitch = 'deposit_switch',\n    StandingOrders = 'standing_orders',\n    Transfer = 'transfer',\n    Employment = 'employment'\n}\n\n/**\n * The employee\\'s estimated annual salary, as derived from information reported on the paystub.\n * @export\n * @interface ProjectedIncomeSummaryFieldNumber\n */\nexport interface ProjectedIncomeSummaryFieldNumber {\n    /**\n     * The value of the field.\n     * @type {number}\n     * @memberof ProjectedIncomeSummaryFieldNumber\n     */\n    value: number;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof ProjectedIncomeSummaryFieldNumber\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * The request was flagged by Plaid\\'s fraud system, and requires additional verification to ensure they are not a bot.\n * @export\n * @interface RecaptchaRequiredError\n */\nexport interface RecaptchaRequiredError {\n    [key: string]: object | any;\n\n    /**\n     * RECAPTCHA_ERROR\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    error_type: string;\n    /**\n     * RECAPTCHA_REQUIRED\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    error_code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    display_message: string;\n    /**\n     * 400\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    http_code: string;\n    /**\n     * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user\\'s request is resubmitted and they are directed to the next Item creation step.\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    link_user_experience: string;\n    /**\n     * Plaid\\'s fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    common_causes: string;\n    /**\n     * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`\n     * @type {string}\n     * @memberof RecaptchaRequiredError\n     */\n    troubleshooting_steps: string;\n}\n/**\n * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.\n * @export\n * @interface RecipientBACS\n */\nexport interface RecipientBACS {\n    [key: string]: object | any;\n\n    /**\n     * The account number of the account. Maximum of 10 characters.\n     * @type {string}\n     * @memberof RecipientBACS\n     */\n    account?: string;\n    /**\n     * The 6-character sort code of the account.\n     * @type {string}\n     * @memberof RecipientBACS\n     */\n    sort_code?: string;\n}\n/**\n * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.\n * @export\n * @interface RecipientBACSNullable\n */\nexport interface RecipientBACSNullable {\n    /**\n     * The account number of the account. Maximum of 10 characters.\n     * @type {string}\n     * @memberof RecipientBACSNullable\n     */\n    account?: string;\n    /**\n     * The 6-character sort code of the account.\n     * @type {string}\n     * @memberof RecipientBACSNullable\n     */\n    sort_code?: string;\n}\n/**\n * describes the frequency of the transaction stream.\n * @export\n * @enum {string}\n */\nexport enum RecurringTransactionFrequency {\n    Unknown = 'UNKNOWN',\n    Weekly = 'WEEKLY',\n    Biweekly = 'BIWEEKLY',\n    SemiMonthly = 'SEMI_MONTHLY',\n    Monthly = 'MONTHLY'\n}\n\n/**\n * A representation of a removed transaction\n * @export\n * @interface RemovedTransaction\n */\nexport interface RemovedTransaction {\n    /**\n     * The ID of the removed transaction.\n     * @type {string}\n     * @memberof RemovedTransaction\n     */\n    transaction_id?: string;\n}\n/**\n * Scope of required and optional account features or content from a ConnectedApplication.\n * @export\n * @interface RequestedScopes\n */\nexport interface RequestedScopes {\n    /**\n     * \n     * @type {AccountFilter}\n     * @memberof RequestedScopes\n     */\n    account_filters?: AccountFilter;\n    /**\n     * \n     * @type {AccountSelectionCardinality}\n     * @memberof RequestedScopes\n     */\n    account_selection_cardinality: AccountSelectionCardinality;\n}\n/**\n * Defines the request schema for `/sandbox/bank_transfer/fire_webhook`\n * @export\n * @interface SandboxBankTransferFireWebhookRequest\n */\nexport interface SandboxBankTransferFireWebhookRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxBankTransferFireWebhookRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxBankTransferFireWebhookRequest\n     */\n    secret?: string;\n    /**\n     * The URL to which the webhook should be sent.\n     * @type {string}\n     * @memberof SandboxBankTransferFireWebhookRequest\n     */\n    webhook: string;\n}\n/**\n * Defines the response schema for `/sandbox/bank_transfer/fire_webhook`\n * @export\n * @interface SandboxBankTransferFireWebhookResponse\n */\nexport interface SandboxBankTransferFireWebhookResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxBankTransferFireWebhookResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/sandbox/bank_transfer/simulate`\n * @export\n * @interface SandboxBankTransferSimulateRequest\n */\nexport interface SandboxBankTransferSimulateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxBankTransferSimulateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxBankTransferSimulateRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a bank transfer.\n     * @type {string}\n     * @memberof SandboxBankTransferSimulateRequest\n     */\n    bank_transfer_id: string;\n    /**\n     * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:  `pending` --> `failed`  `pending` --> `posted`  `posted` --> `reversed` \n     * @type {string}\n     * @memberof SandboxBankTransferSimulateRequest\n     */\n    event_type: string;\n    /**\n     * \n     * @type {BankTransferFailure}\n     * @memberof SandboxBankTransferSimulateRequest\n     */\n    failure_reason?: BankTransferFailure | null;\n}\n/**\n * Defines the response schema for `/sandbox/bank_transfer/simulate`\n * @export\n * @interface SandboxBankTransferSimulateResponse\n */\nexport interface SandboxBankTransferSimulateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxBankTransferSimulateResponse\n     */\n    request_id: string;\n}\n/**\n * SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`\n * @export\n * @interface SandboxIncomeFireWebhookRequest\n */\nexport interface SandboxIncomeFireWebhookRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the verification.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    income_verification_id: string;\n    /**\n     * The Item ID associated with the verification.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    item_id: string;\n    /**\n     * The URL to which the webhook should be sent.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    webhook: string;\n    /**\n     * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: The income verification has been sent to the user for review.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookRequest\n     */\n    verification_status: SandboxIncomeFireWebhookRequestVerificationStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SandboxIncomeFireWebhookRequestVerificationStatusEnum {\n    ProcessingComplete = 'VERIFICATION_STATUS_PROCESSING_COMPLETE',\n    ProcessingFailed = 'VERIFICATION_STATUS_PROCESSING_FAILED',\n    PendingApproval = 'VERIFICATION_STATUS_PENDING_APPROVAL'\n}\n\n/**\n * SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook`\n * @export\n * @interface SandboxIncomeFireWebhookResponse\n */\nexport interface SandboxIncomeFireWebhookResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxIncomeFireWebhookResponse\n     */\n    request_id: string;\n}\n/**\n * SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook`\n * @export\n * @interface SandboxItemFireWebhookRequest\n */\nexport interface SandboxItemFireWebhookRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemFireWebhookRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemFireWebhookRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof SandboxItemFireWebhookRequest\n     */\n    access_token: string;\n    /**\n     * The following values for `webhook_code` are supported:  * `DEFAULT_UPDATE` * `NEW_ACCOUNTS_AVAILABLE`\n     * @type {string}\n     * @memberof SandboxItemFireWebhookRequest\n     */\n    webhook_code: SandboxItemFireWebhookRequestWebhookCodeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SandboxItemFireWebhookRequestWebhookCodeEnum {\n    DefaultUpdate = 'DEFAULT_UPDATE',\n    NewAccountsAvailable = 'NEW_ACCOUNTS_AVAILABLE'\n}\n\n/**\n * SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook`\n * @export\n * @interface SandboxItemFireWebhookResponse\n */\nexport interface SandboxItemFireWebhookResponse {\n    [key: string]: object | any;\n\n    /**\n     * Value is `true`  if the test` webhook_code`  was successfully fired.\n     * @type {boolean}\n     * @memberof SandboxItemFireWebhookResponse\n     */\n    webhook_fired: boolean;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxItemFireWebhookResponse\n     */\n    request_id: string;\n}\n/**\n * SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login`\n * @export\n * @interface SandboxItemResetLoginRequest\n */\nexport interface SandboxItemResetLoginRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemResetLoginRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemResetLoginRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof SandboxItemResetLoginRequest\n     */\n    access_token: string;\n}\n/**\n * SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login`\n * @export\n * @interface SandboxItemResetLoginResponse\n */\nexport interface SandboxItemResetLoginResponse {\n    [key: string]: object | any;\n\n    /**\n     * `true` if the call succeeded\n     * @type {boolean}\n     * @memberof SandboxItemResetLoginResponse\n     */\n    reset_login: boolean;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxItemResetLoginResponse\n     */\n    request_id: string;\n}\n/**\n * SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status`\n * @export\n * @interface SandboxItemSetVerificationStatusRequest\n */\nexport interface SandboxItemSetVerificationStatusRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusRequest\n     */\n    access_token: string;\n    /**\n     * The `account_id` of the account whose verification status is to be modified\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusRequest\n     */\n    account_id: string;\n    /**\n     * The verification status to set the account to.\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusRequest\n     */\n    verification_status: SandboxItemSetVerificationStatusRequestVerificationStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SandboxItemSetVerificationStatusRequestVerificationStatusEnum {\n    AutomaticallyVerified = 'automatically_verified',\n    VerificationExpired = 'verification_expired'\n}\n\n/**\n * SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status`\n * @export\n * @interface SandboxItemSetVerificationStatusResponse\n */\nexport interface SandboxItemSetVerificationStatusResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxItemSetVerificationStatusResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `sandbox/oauth/select_accounts`\n * @export\n * @interface SandboxOauthSelectAccountsRequest\n */\nexport interface SandboxOauthSelectAccountsRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SandboxOauthSelectAccountsRequest\n     */\n    oauth_state_id: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SandboxOauthSelectAccountsRequest\n     */\n    accounts: Array<string>;\n}\n/**\n * SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create`\n * @export\n * @interface SandboxProcessorTokenCreateRequest\n */\nexport interface SandboxProcessorTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the institution the Item will be associated with\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateRequest\n     */\n    institution_id: string;\n    /**\n     * \n     * @type {SandboxProcessorTokenCreateRequestOptions}\n     * @memberof SandboxProcessorTokenCreateRequest\n     */\n    options?: SandboxProcessorTokenCreateRequestOptions;\n}\n/**\n * An optional set of options to be used when configuring the Item. If specified, must not be `null`.\n * @export\n * @interface SandboxProcessorTokenCreateRequestOptions\n */\nexport interface SandboxProcessorTokenCreateRequestOptions {\n    /**\n     * Test username to use for the creation of the Sandbox Item. Default value is `user_good`.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateRequestOptions\n     */\n    override_username?: string | null;\n    /**\n     * Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateRequestOptions\n     */\n    override_password?: string | null;\n}\n/**\n * SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create`\n * @export\n * @interface SandboxProcessorTokenCreateResponse\n */\nexport interface SandboxProcessorTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A processor token that can be used to call the `/processor/` endpoints.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateResponse\n     */\n    processor_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxProcessorTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create`\n * @export\n * @interface SandboxPublicTokenCreateRequest\n */\nexport interface SandboxPublicTokenCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the institution the Item will be associated with\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequest\n     */\n    institution_id: string;\n    /**\n     * The products to initially pull for the Item. May be any products that the specified `institution_id`  supports. This array may not be empty.\n     * @type {Array<Products>}\n     * @memberof SandboxPublicTokenCreateRequest\n     */\n    initial_products: Array<Products>;\n    /**\n     * \n     * @type {SandboxPublicTokenCreateRequestOptions}\n     * @memberof SandboxPublicTokenCreateRequest\n     */\n    options?: SandboxPublicTokenCreateRequestOptions;\n}\n/**\n * An optional set of options to be used when configuring the Item. If specified, must not be `null`.\n * @export\n * @interface SandboxPublicTokenCreateRequestOptions\n */\nexport interface SandboxPublicTokenCreateRequestOptions {\n    /**\n     * Specify a webhook to associate with the new Item.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequestOptions\n     */\n    webhook?: string;\n    /**\n     * Test username to use for the creation of the Sandbox Item. Default value is `user_good`.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequestOptions\n     */\n    override_username?: string | null;\n    /**\n     * Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequestOptions\n     */\n    override_password?: string | null;\n    /**\n     * \n     * @type {SandboxPublicTokenCreateRequestOptionsTransactions}\n     * @memberof SandboxPublicTokenCreateRequestOptions\n     */\n    transactions?: SandboxPublicTokenCreateRequestOptionsTransactions;\n}\n/**\n * An optional set of parameters corresponding to transactions options.\n * @export\n * @interface SandboxPublicTokenCreateRequestOptionsTransactions\n */\nexport interface SandboxPublicTokenCreateRequestOptionsTransactions {\n    /**\n     * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequestOptionsTransactions\n     */\n    start_date?: string;\n    /**\n     * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateRequestOptionsTransactions\n     */\n    end_date?: string;\n}\n/**\n * SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create`\n * @export\n * @interface SandboxPublicTokenCreateResponse\n */\nexport interface SandboxPublicTokenCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A public token that can be exchanged for an access token using `/item/public_token/exchange`\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateResponse\n     */\n    public_token: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxPublicTokenCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/sandbox/transfer/repayment/simulate`\n * @export\n * @interface SandboxTransferRepaymentSimulateRequest\n */\nexport interface SandboxTransferRepaymentSimulateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferRepaymentSimulateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferRepaymentSimulateRequest\n     */\n    secret?: string;\n}\n/**\n * Defines the response schema for `/sandbox/transfer/repayment/simulate`\n * @export\n * @interface SandboxTransferRepaymentSimulateResponse\n */\nexport interface SandboxTransferRepaymentSimulateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxTransferRepaymentSimulateResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/sandbox/transfer/simulate`\n * @export\n * @interface SandboxTransferSimulateRequest\n */\nexport interface SandboxTransferSimulateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferSimulateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferSimulateRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof SandboxTransferSimulateRequest\n     */\n    transfer_id: string;\n    /**\n     * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:  `pending` --> `failed`  `pending` --> `posted`  `posted` --> `reversed` \n     * @type {string}\n     * @memberof SandboxTransferSimulateRequest\n     */\n    event_type: string;\n    /**\n     * \n     * @type {TransferFailure}\n     * @memberof SandboxTransferSimulateRequest\n     */\n    failure_reason?: TransferFailure | null;\n}\n/**\n * Defines the response schema for `/sandbox/transfer/simulate`\n * @export\n * @interface SandboxTransferSimulateResponse\n */\nexport interface SandboxTransferSimulateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxTransferSimulateResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/sandbox/transfer/sweep/simulate`\n * @export\n * @interface SandboxTransferSweepSimulateRequest\n */\nexport interface SandboxTransferSweepSimulateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferSweepSimulateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SandboxTransferSweepSimulateRequest\n     */\n    secret?: string;\n}\n/**\n * Defines the response schema for `/sandbox/transfer/sweep/simulate`\n * @export\n * @interface SandboxTransferSweepSimulateResponse\n */\nexport interface SandboxTransferSweepSimulateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {SimulatedTransferSweep}\n     * @memberof SandboxTransferSweepSimulateResponse\n     */\n    sweep?: SimulatedTransferSweep;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SandboxTransferSweepSimulateResponse\n     */\n    request_id: string;\n}\n/**\n * The scopes object\n * @export\n * @interface Scopes\n */\nexport interface Scopes {\n    /**\n     * \n     * @type {ProductAccess}\n     * @memberof Scopes\n     */\n    product_access?: ProductAccess;\n    /**\n     * \n     * @type {Array<AccountAccess>}\n     * @memberof Scopes\n     */\n    accounts?: Array<AccountAccess>;\n    /**\n     * Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof Scopes\n     */\n    new_accounts?: boolean | null;\n}\n/**\n * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.\n * @export\n * @enum {string}\n */\nexport enum ScopesContext {\n    Enrollment = 'ENROLLMENT',\n    Portal = 'PORTAL'\n}\n\n/**\n * The scopes object\n * @export\n * @interface ScopesNullable\n */\nexport interface ScopesNullable {\n    /**\n     * \n     * @type {ProductAccess}\n     * @memberof ScopesNullable\n     */\n    product_access?: ProductAccess;\n    /**\n     * \n     * @type {Array<AccountAccess>}\n     * @memberof ScopesNullable\n     */\n    accounts?: Array<AccountAccess>;\n    /**\n     * Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.\n     * @type {boolean}\n     * @memberof ScopesNullable\n     */\n    new_accounts?: boolean | null;\n}\n/**\n * Contains details about a security\n * @export\n * @interface Security\n */\nexport interface Security {\n    [key: string]: object | any;\n\n    /**\n     * A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive.\n     * @type {string}\n     * @memberof Security\n     */\n    security_id: string;\n    /**\n     * 12-character ISIN, a globally unique securities identifier.\n     * @type {string}\n     * @memberof Security\n     */\n    isin: string | null;\n    /**\n     * 9-character CUSIP, an identifier assigned to North American securities.\n     * @type {string}\n     * @memberof Security\n     */\n    cusip: string | null;\n    /**\n     * 7-character SEDOL, an identifier assigned to securities in the UK.\n     * @type {string}\n     * @memberof Security\n     */\n    sedol: string | null;\n    /**\n     * An identifier given to the security by the institution\n     * @type {string}\n     * @memberof Security\n     */\n    institution_security_id: string | null;\n    /**\n     * If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.\n     * @type {string}\n     * @memberof Security\n     */\n    institution_id: string | null;\n    /**\n     * In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.\n     * @type {string}\n     * @memberof Security\n     */\n    proxy_security_id: string | null;\n    /**\n     * A descriptive name for the security, suitable for display.\n     * @type {string}\n     * @memberof Security\n     */\n    name: string | null;\n    /**\n     * The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.\n     * @type {string}\n     * @memberof Security\n     */\n    ticker_symbol: string | null;\n    /**\n     * Indicates that a security is a highly liquid asset and can be treated like cash.\n     * @type {boolean}\n     * @memberof Security\n     */\n    is_cash_equivalent: boolean | null;\n    /**\n     * The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables.  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors.  `other`: Unknown or other investment types\n     * @type {string}\n     * @memberof Security\n     */\n    type: string | null;\n    /**\n     * Price of the security at the close of the previous trading session. `null` for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.\n     * @type {number}\n     * @memberof Security\n     */\n    close_price: number | null;\n    /**\n     * Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.\n     * @type {string}\n     * @memberof Security\n     */\n    close_price_as_of: string | null;\n    /**\n     * The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.\n     * @type {string}\n     * @memberof Security\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof Security\n     */\n    unofficial_currency_code: string | null;\n}\n/**\n * Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.\n * @export\n * @interface SecurityOverride\n */\nexport interface SecurityOverride {\n    /**\n     * 12-character ISIN, a globally unique securities identifier.\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    isin?: string;\n    /**\n     * 9-character CUSIP, an identifier assigned to North American securities.\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    cusip?: string;\n    /**\n     * 7-character SEDOL, an identifier assigned to securities in the UK.\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    sedol?: string;\n    /**\n     * A descriptive name for the security, suitable for display.\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    name?: string;\n    /**\n     * The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    ticker_symbol?: string;\n    /**\n     * Either a valid `iso_currency_code` or `unofficial_currency_code`\n     * @type {string}\n     * @memberof SecurityOverride\n     */\n    currency?: string;\n}\n/**\n * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.\n * @export\n * @interface SenderBACSNullable\n */\nexport interface SenderBACSNullable {\n    /**\n     * The account number of the account. Maximum of 10 characters.\n     * @type {string}\n     * @memberof SenderBACSNullable\n     */\n    account?: string;\n    /**\n     * The 6-character sort code of the account.\n     * @type {string}\n     * @memberof SenderBACSNullable\n     */\n    sort_code?: string;\n}\n/**\n * The address of the student loan servicer. This is generally the remittance address to which payments should be sent.\n * @export\n * @interface ServicerAddressData\n */\nexport interface ServicerAddressData {\n    [key: string]: object | any;\n\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof ServicerAddressData\n     */\n    city: string | null;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof ServicerAddressData\n     */\n    region: string | null;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof ServicerAddressData\n     */\n    street: string | null;\n    /**\n     * The postal code\n     * @type {string}\n     * @memberof ServicerAddressData\n     */\n    postal_code: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof ServicerAddressData\n     */\n    country: string | null;\n}\n/**\n * Data about the components comprising an address.\n * @export\n * @interface SignalAddressData\n */\nexport interface SignalAddressData {\n    [key: string]: object | any;\n\n    /**\n     * The full city name\n     * @type {string}\n     * @memberof SignalAddressData\n     */\n    city?: string;\n    /**\n     * The region or state Example: `\\\"NC\\\"`\n     * @type {string}\n     * @memberof SignalAddressData\n     */\n    region?: string | null;\n    /**\n     * The full street address Example: `\\\"564 Main Street, APT 15\\\"`\n     * @type {string}\n     * @memberof SignalAddressData\n     */\n    street?: string;\n    /**\n     * The postal code\n     * @type {string}\n     * @memberof SignalAddressData\n     */\n    postal_code?: string | null;\n    /**\n     * The ISO 3166-1 alpha-2 country code\n     * @type {string}\n     * @memberof SignalAddressData\n     */\n    country?: string | null;\n}\n/**\n * SignalDecisionReportRequest defines the request schema for `/signal/decision/report`\n * @export\n * @interface SignalDecisionReportRequest\n */\nexport interface SignalDecisionReportRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalDecisionReportRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalDecisionReportRequest\n     */\n    secret?: string;\n    /**\n     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`\n     * @type {string}\n     * @memberof SignalDecisionReportRequest\n     */\n    client_transaction_id: string;\n    /**\n     * `true` if the ACH transaction was initiated, `false` otherwise.\n     * @type {boolean}\n     * @memberof SignalDecisionReportRequest\n     */\n    initiated: boolean;\n    /**\n     * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate. For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.\n     * @type {number}\n     * @memberof SignalDecisionReportRequest\n     */\n    days_funds_on_hold?: number | null;\n}\n/**\n * SignalDecisionReportResponse defines the response schema for `/signal/decision/report`\n * @export\n * @interface SignalDecisionReportResponse\n */\nexport interface SignalDecisionReportResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SignalDecisionReportResponse\n     */\n    request_id: string;\n}\n/**\n * Details about the end user\\'s device\n * @export\n * @interface SignalDevice\n */\nexport interface SignalDevice {\n    /**\n     * The IP address of the device that initiated the transaction\n     * @type {string}\n     * @memberof SignalDevice\n     */\n    ip_address?: string | null;\n    /**\n     * The user agent of the device that initiated the transaction (e.g. \\\"Mozilla/5.0\\\")\n     * @type {string}\n     * @memberof SignalDevice\n     */\n    user_agent?: string | null;\n}\n/**\n * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:  `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account  For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager\n * @export\n * @interface SignalEvaluateCoreAttributes\n */\nexport interface SignalEvaluateCoreAttributes {\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    unauthorized_transactions_count_7d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    unauthorized_transactions_count_30d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    unauthorized_transactions_count_60d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    unauthorized_transactions_count_90d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    nsf_overdraft_transactions_count_7d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    nsf_overdraft_transactions_count_30d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    nsf_overdraft_transactions_count_60d?: number;\n    /**\n     * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    nsf_overdraft_transactions_count_90d?: number;\n    /**\n     * The number of days since the first time the Item was connected to an application via Plaid\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    days_since_first_plaid_connection?: number | null;\n    /**\n     * The number of times the Item has been connected to applications via Plaid over the past 7 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    plaid_connections_count_7d?: number | null;\n    /**\n     * The number of times the Item has been connected to applications via Plaid over the past 30 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    plaid_connections_count_30d?: number | null;\n    /**\n     * The total number of times the Item has been connected to applications via Plaid\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    total_plaid_connections_count?: number | null;\n    /**\n     * Indicates if the ACH transaction funding account is a savings/money market account\n     * @type {boolean}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    is_savings_or_money_market_account?: boolean;\n    /**\n     * The total credit (inflow) transaction amount over the past 10 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    total_credit_transactions_amount_10d?: number;\n    /**\n     * The total debit (outflow) transaction amount over the past 10 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    total_debit_transactions_amount_10d?: number;\n    /**\n     * The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p50_credit_transactions_amount_28d?: number | null;\n    /**\n     * The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p50_debit_transactions_amount_28d?: number | null;\n    /**\n     * The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p95_credit_transactions_amount_28d?: number | null;\n    /**\n     * The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p95_debit_transactions_amount_28d?: number | null;\n    /**\n     * The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    days_with_negative_balance_count_90d?: number | null;\n    /**\n     * The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p90_eod_balance_30d?: number | null;\n    /**\n     * The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p90_eod_balance_60d?: number | null;\n    /**\n     * The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p90_eod_balance_90d?: number | null;\n    /**\n     * The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p10_eod_balance_30d?: number | null;\n    /**\n     * The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p10_eod_balance_60d?: number | null;\n    /**\n     * The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    p10_eod_balance_90d?: number | null;\n    /**\n     * Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    available_balance?: number | null;\n    /**\n     * Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    current_balance?: number | null;\n    /**\n     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.\n     * @type {string}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    balance_last_updated?: string | null;\n    /**\n     * The number of times the account\\'s phone numbers on file have changed over the past 28 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    phone_change_count_28d?: number | null;\n    /**\n     * The number of times the account\\'s phone numbers on file have changed over the past 90 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    phone_change_count_90d?: number | null;\n    /**\n     * The number of times the account\\'s email addresses on file have changed over the past 28 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    email_change_count_28d?: number | null;\n    /**\n     * The number of times the account\\'s email addresses on file have changed over the past 90 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    email_change_count_90d?: number | null;\n    /**\n     * The number of times the account\\'s addresses on file have changed over the past 28 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    address_change_count_28d?: number | null;\n    /**\n     * The number of times the account\\'s addresses on file have changed over the past 90 days\n     * @type {number}\n     * @memberof SignalEvaluateCoreAttributes\n     */\n    address_change_count_90d?: number | null;\n}\n/**\n * SignalEvaluateRequest defines the request schema for `/signal/evaluate`\n * @export\n * @interface SignalEvaluateRequest\n */\nexport interface SignalEvaluateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    secret?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    access_token: string;\n    /**\n     * The `account_id` of the account whose verification status is to be modified\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    account_id: string;\n    /**\n     * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    client_transaction_id: string;\n    /**\n     * The transaction amount, in USD (e.g. `102.05`)\n     * @type {number}\n     * @memberof SignalEvaluateRequest\n     */\n    amount: number;\n    /**\n     * `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).\n     * @type {boolean}\n     * @memberof SignalEvaluateRequest\n     */\n    user_present?: boolean | null;\n    /**\n     * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters.\n     * @type {string}\n     * @memberof SignalEvaluateRequest\n     */\n    client_user_id?: string;\n    /**\n     * \n     * @type {SignalUser}\n     * @memberof SignalEvaluateRequest\n     */\n    user?: SignalUser;\n    /**\n     * \n     * @type {SignalDevice}\n     * @memberof SignalEvaluateRequest\n     */\n    device?: SignalDevice;\n}\n/**\n * SignalEvaluateResponse defines the response schema for `/signal/income/evaluate`\n * @export\n * @interface SignalEvaluateResponse\n */\nexport interface SignalEvaluateResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SignalEvaluateResponse\n     */\n    request_id: string;\n    /**\n     * \n     * @type {SignalScores}\n     * @memberof SignalEvaluateResponse\n     */\n    scores: SignalScores;\n    /**\n     * \n     * @type {SignalEvaluateCoreAttributes}\n     * @memberof SignalEvaluateResponse\n     */\n    core_attributes?: SignalEvaluateCoreAttributes;\n}\n/**\n * The user\\'s legal name\n * @export\n * @interface SignalPersonName\n */\nexport interface SignalPersonName {\n    /**\n     * The user\\'s name prefix (e.g. \\\"Mr.\\\")\n     * @type {string}\n     * @memberof SignalPersonName\n     */\n    prefix?: string | null;\n    /**\n     * The user\\'s given name. If the user has a one-word name, it should be provided in this field.\n     * @type {string}\n     * @memberof SignalPersonName\n     */\n    given_name?: string | null;\n    /**\n     * The user\\'s middle name\n     * @type {string}\n     * @memberof SignalPersonName\n     */\n    middle_name?: string | null;\n    /**\n     * The user\\'s family name / surname\n     * @type {string}\n     * @memberof SignalPersonName\n     */\n    family_name?: string | null;\n    /**\n     * The user\\'s name suffix (e.g. \\\"II\\\")\n     * @type {string}\n     * @memberof SignalPersonName\n     */\n    suffix?: string | null;\n}\n/**\n * SignalReturnReportRequest defines the request schema for `/signal/return/report`\n * @export\n * @interface SignalReturnReportRequest\n */\nexport interface SignalReturnReportRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalReturnReportRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof SignalReturnReportRequest\n     */\n    secret?: string;\n    /**\n     * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`\n     * @type {string}\n     * @memberof SignalReturnReportRequest\n     */\n    client_transaction_id: string;\n    /**\n     * Must be a valid ACH return code (e.g. \\\"R01\\\")\n     * @type {string}\n     * @memberof SignalReturnReportRequest\n     */\n    return_code: string;\n}\n/**\n * SignalReturnReportResponse defines the response schema for `/signal/return/report`\n * @export\n * @interface SignalReturnReportResponse\n */\nexport interface SignalReturnReportResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof SignalReturnReportResponse\n     */\n    request_id: string;\n}\n/**\n * Risk scoring details broken down by risk category.\n * @export\n * @interface SignalScores\n */\nexport interface SignalScores {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {CustomerInitiatedReturnRisk}\n     * @memberof SignalScores\n     */\n    customer_initiated_return_risk?: CustomerInitiatedReturnRisk;\n    /**\n     * \n     * @type {BankInitiatedReturnRisk}\n     * @memberof SignalScores\n     */\n    bank_initiated_return_risk?: BankInitiatedReturnRisk;\n}\n/**\n * Details about the end user initiating the transaction (i.e., the account holder).\n * @export\n * @interface SignalUser\n */\nexport interface SignalUser {\n    /**\n     * \n     * @type {SignalPersonName}\n     * @memberof SignalUser\n     */\n    name?: SignalPersonName | null;\n    /**\n     * The user\\'s phone number, in E.164 format: +{countrycode}{number}. For example: \\\"+14151234567\\\"\n     * @type {string}\n     * @memberof SignalUser\n     */\n    phone_number?: string | null;\n    /**\n     * The user\\'s email address.\n     * @type {string}\n     * @memberof SignalUser\n     */\n    email_address?: string | null;\n    /**\n     * \n     * @type {SignalAddressData}\n     * @memberof SignalUser\n     */\n    address?: SignalAddressData | null;\n}\n/**\n * A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint. Can be null if there are no transfers to include in a sweep.\n * @export\n * @interface SimulatedTransferSweep\n */\nexport interface SimulatedTransferSweep {\n    /**\n     * Identifier of the sweep.\n     * @type {string}\n     * @memberof SimulatedTransferSweep\n     */\n    id: string;\n    /**\n     * The datetime when the sweep occurred, in RFC 3339 format.\n     * @type {string}\n     * @memberof SimulatedTransferSweep\n     */\n    created: string;\n    /**\n     * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \\\"-10.00\\\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.\n     * @type {string}\n     * @memberof SimulatedTransferSweep\n     */\n    amount: string;\n    /**\n     * The currency of the sweep, e.g. \\\"USD\\\".\n     * @type {string}\n     * @memberof SimulatedTransferSweep\n     */\n    iso_currency_code: string;\n}\n/**\n * The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.\n * @export\n * @interface StandaloneAccountType\n */\nexport interface StandaloneAccountType {\n    [key: string]: object | any;\n\n    /**\n     * An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.\n     * @type {string}\n     * @memberof StandaloneAccountType\n     */\n    depository: string;\n    /**\n     * A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.\n     * @type {string}\n     * @memberof StandaloneAccountType\n     */\n    credit: string;\n    /**\n     * A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.\n     * @type {string}\n     * @memberof StandaloneAccountType\n     */\n    loan: string;\n    /**\n     * An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.\n     * @type {string}\n     * @memberof StandaloneAccountType\n     */\n    investment: string;\n    /**\n     * Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.\n     * @type {string}\n     * @memberof StandaloneAccountType\n     */\n    other: string;\n}\n/**\n * The following currency codes are supported by Plaid.\n * @export\n * @interface StandaloneCurrencyCodeList\n */\nexport interface StandaloneCurrencyCodeList {\n    [key: string]: object | any;\n\n    /**\n     * Plaid supports all ISO 4217 currency codes.\n     * @type {string}\n     * @memberof StandaloneCurrencyCodeList\n     */\n    iso_currency_code: string;\n    /**\n     * List of unofficial currency codes\n     * @type {string}\n     * @memberof StandaloneCurrencyCodeList\n     */\n    unofficial_currency_code: string;\n}\n/**\n * Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.\n * @export\n * @interface StandaloneInvestmentTransactionType\n */\nexport interface StandaloneInvestmentTransactionType {\n    [key: string]: object | any;\n\n    /**\n     * Buying an investment\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    buy: string;\n    /**\n     * Selling an investment\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    sell: string;\n    /**\n     * A cancellation of a pending transaction\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    cancel: string;\n    /**\n     * Activity that modifies a cash position\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    cash: string;\n    /**\n     * Fees on the account, e.g. commission, bookkeeping, options-related.\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    fee: string;\n    /**\n     * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer\n     * @type {string}\n     * @memberof StandaloneInvestmentTransactionType\n     */\n    transfer: string;\n}\n/**\n * Contains details about a student loan account\n * @export\n * @interface StudentLoan\n */\nexport interface StudentLoan {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the account that this liability belongs to.\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    account_id: string | null;\n    /**\n     * The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    account_number: string | null;\n    /**\n     * The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {Array<string>}\n     * @memberof StudentLoan\n     */\n    disbursement_dates: Array<string> | null;\n    /**\n     * The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    expected_payoff_date: string | null;\n    /**\n     * The guarantor of the student loan.\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    guarantor: string | null;\n    /**\n     * The interest rate on the loan as a percentage.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    interest_rate_percentage: number;\n    /**\n     * `true` if a payment is currently overdue. Availability for this field is limited.\n     * @type {boolean}\n     * @memberof StudentLoan\n     */\n    is_overdue: boolean | null;\n    /**\n     * The amount of the last payment.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    last_payment_amount: number | null;\n    /**\n     * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    last_payment_date: string | null;\n    /**\n     * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    last_statement_issue_date: string | null;\n    /**\n     * The type of loan, e.g., \\\"Consolidation Loans\\\".\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    loan_name: string | null;\n    /**\n     * \n     * @type {StudentLoanStatus}\n     * @memberof StudentLoan\n     */\n    loan_status: StudentLoanStatus;\n    /**\n     * The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    minimum_payment_amount: number | null;\n    /**\n     * The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    next_payment_due_date: string | null;\n    /**\n     * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). \n     * @type {string}\n     * @memberof StudentLoan\n     */\n    origination_date: string | null;\n    /**\n     * The original principal balance of the loan.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    origination_principal_amount: number | null;\n    /**\n     * The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    outstanding_interest_amount: number | null;\n    /**\n     * The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match a`ccount_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    payment_reference_number: string | null;\n    /**\n     * \n     * @type {PSLFStatus}\n     * @memberof StudentLoan\n     */\n    pslf_status: PSLFStatus;\n    /**\n     * \n     * @type {StudentRepaymentPlan}\n     * @memberof StudentLoan\n     */\n    repayment_plan: StudentRepaymentPlan;\n    /**\n     * The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.\n     * @type {string}\n     * @memberof StudentLoan\n     */\n    sequence_number: string | null;\n    /**\n     * \n     * @type {ServicerAddressData}\n     * @memberof StudentLoan\n     */\n    servicer_address: ServicerAddressData;\n    /**\n     * The year to date (YTD) interest paid. Availability for this field is limited.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    ytd_interest_paid: number | null;\n    /**\n     * The year to date (YTD) principal paid. Availability for this field is limited.\n     * @type {number}\n     * @memberof StudentLoan\n     */\n    ytd_principal_paid: number | null;\n}\n/**\n * Student loan repayment information used to configure Sandbox test data for the Liabilities product\n * @export\n * @interface StudentLoanRepaymentModel\n */\nexport interface StudentLoanRepaymentModel {\n    [key: string]: object | any;\n\n    /**\n     * The only currently supported value for this field is `standard`.\n     * @type {string}\n     * @memberof StudentLoanRepaymentModel\n     */\n    type: string;\n    /**\n     * Configures the number of months before repayment starts.\n     * @type {number}\n     * @memberof StudentLoanRepaymentModel\n     */\n    non_repayment_months: number;\n    /**\n     * Configures the number of months of repayments before the loan is paid off.\n     * @type {number}\n     * @memberof StudentLoanRepaymentModel\n     */\n    repayment_months: number;\n}\n/**\n * An object representing the status of the student loan\n * @export\n * @interface StudentLoanStatus\n */\nexport interface StudentLoanStatus {\n    [key: string]: object | any;\n\n    /**\n     * The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). \n     * @type {string}\n     * @memberof StudentLoanStatus\n     */\n    end_date: string | null;\n    /**\n     * The status type of the student loan\n     * @type {string}\n     * @memberof StudentLoanStatus\n     */\n    type: StudentLoanStatusTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum StudentLoanStatusTypeEnum {\n    Cancelled = 'cancelled',\n    ChargedOff = 'charged off',\n    Claim = 'claim',\n    Consolidated = 'consolidated',\n    Deferment = 'deferment',\n    Delinquent = 'delinquent',\n    Discharged = 'discharged',\n    Extension = 'extension',\n    Forbearance = 'forbearance',\n    InGrace = 'in grace',\n    InMilitary = 'in military',\n    InSchool = 'in school',\n    NotFullyDisbursed = 'not fully disbursed',\n    Other = 'other',\n    PaidInFull = 'paid in full',\n    Refunded = 'refunded',\n    Repayment = 'repayment',\n    Transferred = 'transferred'\n}\n\n/**\n * An object representing the repayment plan for the student loan\n * @export\n * @interface StudentRepaymentPlan\n */\nexport interface StudentRepaymentPlan {\n    [key: string]: object | any;\n\n    /**\n     * The description of the repayment plan as provided by the servicer.\n     * @type {string}\n     * @memberof StudentRepaymentPlan\n     */\n    description: string | null;\n    /**\n     * The type of the repayment plan.\n     * @type {string}\n     * @memberof StudentRepaymentPlan\n     */\n    type: StudentRepaymentPlanTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum StudentRepaymentPlanTypeEnum {\n    ExtendedGraduated = 'extended graduated',\n    ExtendedStandard = 'extended standard',\n    Graduated = 'graduated',\n    IncomeContingentRepayment = 'income-contingent repayment',\n    IncomeBasedRepayment = 'income-based repayment',\n    InterestOnly = 'interest-only',\n    Other = 'other',\n    PayAsYouEarn = 'pay as you earn',\n    RevisedPayAsYouEarn = 'revised pay as you earn',\n    Standard = 'standard',\n    Null = 'null'\n}\n\n/**\n * Data about an official document used to report the user\\'s income to the IRS.\n * @export\n * @interface Taxform\n */\nexport interface Taxform {\n    [key: string]: object | any;\n\n    /**\n     * An identifier of the document referenced by the document metadata.\n     * @type {string}\n     * @memberof Taxform\n     */\n    doc_id?: string;\n    /**\n     * The type of tax document. Currently, the only supported value is `w2`.\n     * @type {string}\n     * @memberof Taxform\n     */\n    document_type: string;\n    /**\n     * \n     * @type {W2}\n     * @memberof Taxform\n     */\n    w2?: W2;\n}\n/**\n * Taxpayer ID of the individual receiving the paystub.\n * @export\n * @interface TaxpayerID\n */\nexport interface TaxpayerID {\n    [key: string]: object | any;\n\n    /**\n     * Type of ID, e.g. \\'SSN\\'\n     * @type {string}\n     * @memberof TaxpayerID\n     */\n    id_type?: string | null;\n    /**\n     * ID mask; i.e. last 4 digits of the taxpayer ID\n     * @type {string}\n     * @memberof TaxpayerID\n     */\n    id_mask?: string | null;\n    /**\n     * Last 4 digits of unique number of ID.\n     * @type {string}\n     * @memberof TaxpayerID\n     * @deprecated\n     */\n    last_4_digits?: string | null;\n}\n/**\n * An object representing both the current pay period and year to date amount for a category.\n * @export\n * @interface Total\n */\nexport interface Total {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {TotalCanonicalDescription}\n     * @memberof Total\n     */\n    canonical_description?: TotalCanonicalDescription | null;\n    /**\n     * Text of the line item as printed on the paystub.\n     * @type {string}\n     * @memberof Total\n     */\n    description?: string | null;\n    /**\n     * \n     * @type {Pay}\n     * @memberof Total\n     * @deprecated\n     */\n    current_pay?: Pay;\n    /**\n     * \n     * @type {Pay}\n     * @memberof Total\n     * @deprecated\n     */\n    ytd_pay?: Pay;\n}\n/**\n * Commonly used term to describe the line item.\n * @export\n * @enum {string}\n */\nexport enum TotalCanonicalDescription {\n    Bonus = 'BONUS',\n    Commission = 'COMMISSION',\n    Overtime = 'OVERTIME',\n    PaidTimeOff = 'PAID TIME OFF',\n    RegularPay = 'REGULAR PAY',\n    Vacation = 'VACATION',\n    EmployeeMedicare = 'EMPLOYEE MEDICARE',\n    Fica = 'FICA',\n    SocialSecurityEmployeeTax = 'SOCIAL SECURITY EMPLOYEE TAX',\n    Medical = 'MEDICAL',\n    Vision = 'VISION',\n    Dental = 'DENTAL',\n    NetPay = 'NET PAY',\n    Taxes = 'TAXES',\n    NotFound = 'NOT_FOUND',\n    Other = 'OTHER',\n    Null = 'null'\n}\n\n/**\n * A representation of a transaction\n * @export\n * @interface Transaction\n */\nexport interface Transaction {\n    /**\n     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. \n     * @type {string}\n     * @memberof Transaction\n     * @deprecated\n     */\n    transaction_type?: TransactionTransactionTypeEnum;\n    /**\n     * The ID of a posted transaction\\'s associated pending transaction, where applicable.\n     * @type {string}\n     * @memberof Transaction\n     */\n    pending_transaction_id: string | null;\n    /**\n     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof Transaction\n     */\n    category_id: string | null;\n    /**\n     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {Array<string>}\n     * @memberof Transaction\n     */\n    category: Array<string> | null;\n    /**\n     * \n     * @type {Location}\n     * @memberof Transaction\n     */\n    location: Location;\n    /**\n     * \n     * @type {PaymentMeta}\n     * @memberof Transaction\n     */\n    payment_meta: PaymentMeta;\n    /**\n     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.\n     * @type {string}\n     * @memberof Transaction\n     */\n    account_owner: string | null;\n    /**\n     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof Transaction\n     */\n    name: string;\n    /**\n     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.\n     * @type {string}\n     * @memberof Transaction\n     */\n    original_description?: string | null;\n    /**\n     * The ID of the account in which this transaction occurred.\n     * @type {string}\n     * @memberof Transaction\n     */\n    account_id: string;\n    /**\n     * The settled value of the transaction, denominated in the account\\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.\n     * @type {number}\n     * @memberof Transaction\n     */\n    amount: number;\n    /**\n     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof Transaction\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof Transaction\n     */\n    unofficial_currency_code: string | null;\n    /**\n     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).\n     * @type {string}\n     * @memberof Transaction\n     */\n    date: string;\n    /**\n     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.\n     * @type {boolean}\n     * @memberof Transaction\n     */\n    pending: boolean;\n    /**\n     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.\n     * @type {string}\n     * @memberof Transaction\n     */\n    transaction_id: string;\n    /**\n     * The merchant name, as extracted by Plaid from the `name` field.\n     * @type {string}\n     * @memberof Transaction\n     */\n    merchant_name?: string | null;\n    /**\n     * The check number of the transaction. This field is only populated for check transactions.\n     * @type {string}\n     * @memberof Transaction\n     */\n    check_number?: string | null;\n    /**\n     * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. \n     * @type {string}\n     * @memberof Transaction\n     */\n    payment_channel: TransactionPaymentChannelEnum;\n    /**\n     * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). The `authorized_date` field uses machine learning to determine a transaction date for transactions where the `date_transacted` is not available. If the `date_transacted` field is present and not `null`, the `authorized_date` field will have the same value as the `date_transacted` field.\n     * @type {string}\n     * @memberof Transaction\n     */\n    authorized_date: string | null;\n    /**\n     * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).\n     * @type {string}\n     * @memberof Transaction\n     */\n    authorized_datetime: string | null;\n    /**\n     * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).\n     * @type {string}\n     * @memberof Transaction\n     */\n    datetime: string | null;\n    /**\n     * \n     * @type {TransactionCode}\n     * @memberof Transaction\n     */\n    transaction_code: TransactionCode | null;\n    /**\n     * \n     * @type {PersonalFinanceCategory & any}\n     * @memberof Transaction\n     */\n    personal_finance_category?: PersonalFinanceCategory & any | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransactionTransactionTypeEnum {\n    Digital = 'digital',\n    Place = 'place',\n    Special = 'special',\n    Unresolved = 'unresolved'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransactionPaymentChannelEnum {\n    Online = 'online',\n    InStore = 'in store',\n    Other = 'other'\n}\n\n/**\n * \n * @export\n * @interface TransactionAllOf\n */\nexport interface TransactionAllOf {\n    /**\n     * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. \n     * @type {string}\n     * @memberof TransactionAllOf\n     */\n    payment_channel: TransactionAllOfPaymentChannelEnum;\n    /**\n     * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). The `authorized_date` field uses machine learning to determine a transaction date for transactions where the `date_transacted` is not available. If the `date_transacted` field is present and not `null`, the `authorized_date` field will have the same value as the `date_transacted` field.\n     * @type {string}\n     * @memberof TransactionAllOf\n     */\n    authorized_date: string | null;\n    /**\n     * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).\n     * @type {string}\n     * @memberof TransactionAllOf\n     */\n    authorized_datetime: string | null;\n    /**\n     * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).\n     * @type {string}\n     * @memberof TransactionAllOf\n     */\n    datetime: string | null;\n    /**\n     * \n     * @type {TransactionCode}\n     * @memberof TransactionAllOf\n     */\n    transaction_code: TransactionCode | null;\n    /**\n     * \n     * @type {PersonalFinanceCategory & any}\n     * @memberof TransactionAllOf\n     */\n    personal_finance_category?: PersonalFinanceCategory & any | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransactionAllOfPaymentChannelEnum {\n    Online = 'online',\n    InStore = 'in store',\n    Other = 'other'\n}\n\n/**\n * A representation of a transaction\n * @export\n * @interface TransactionBase\n */\nexport interface TransactionBase {\n    [key: string]: object | any;\n\n    /**\n     * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. \n     * @type {string}\n     * @memberof TransactionBase\n     * @deprecated\n     */\n    transaction_type?: TransactionBaseTransactionTypeEnum;\n    /**\n     * The ID of a posted transaction\\'s associated pending transaction, where applicable.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    pending_transaction_id?: string | null;\n    /**\n     * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    category_id?: string | null;\n    /**\n     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {Array<string>}\n     * @memberof TransactionBase\n     */\n    category?: Array<string> | null;\n    /**\n     * \n     * @type {Location}\n     * @memberof TransactionBase\n     */\n    location?: Location;\n    /**\n     * \n     * @type {PaymentMeta}\n     * @memberof TransactionBase\n     */\n    payment_meta?: PaymentMeta;\n    /**\n     * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    account_owner?: string | null;\n    /**\n     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    name?: string;\n    /**\n     * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    original_description?: string | null;\n    /**\n     * The ID of the account in which this transaction occurred.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    account_id: string;\n    /**\n     * The settled value of the transaction, denominated in the account\\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.\n     * @type {number}\n     * @memberof TransactionBase\n     */\n    amount: number;\n    /**\n     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    iso_currency_code: string | null;\n    /**\n     * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    unofficial_currency_code: string | null;\n    /**\n     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    date: string;\n    /**\n     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.\n     * @type {boolean}\n     * @memberof TransactionBase\n     */\n    pending: boolean;\n    /**\n     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    transaction_id: string;\n    /**\n     * The merchant name, as extracted by Plaid from the `name` field.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    merchant_name?: string | null;\n    /**\n     * The check number of the transaction. This field is only populated for check transactions.\n     * @type {string}\n     * @memberof TransactionBase\n     */\n    check_number?: string | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransactionBaseTransactionTypeEnum {\n    Digital = 'digital',\n    Place = 'place',\n    Special = 'special',\n    Unresolved = 'unresolved'\n}\n\n/**\n * An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts\n * @export\n * @enum {string}\n */\nexport enum TransactionCode {\n    Adjustment = 'adjustment',\n    Atm = 'atm',\n    BankCharge = 'bank charge',\n    BillPayment = 'bill payment',\n    Cash = 'cash',\n    Cashback = 'cashback',\n    Cheque = 'cheque',\n    DirectDebit = 'direct debit',\n    Interest = 'interest',\n    Purchase = 'purchase',\n    StandingOrder = 'standing order',\n    Transfer = 'transfer',\n    Null = 'null'\n}\n\n/**\n * Information about the matched direct deposit transaction used to verify a user\\'s payroll information.\n * @export\n * @interface TransactionData\n */\nexport interface TransactionData {\n    [key: string]: object | any;\n\n    /**\n     * The description of the transaction.\n     * @type {string}\n     * @memberof TransactionData\n     */\n    description: string;\n    /**\n     * The amount of the transaction.\n     * @type {number}\n     * @memberof TransactionData\n     */\n    amount: number;\n    /**\n     * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\\\"yyyy-mm-dd\\\").\n     * @type {string}\n     * @memberof TransactionData\n     */\n    date: string;\n    /**\n     * A unique identifier for the end user\\'s account.\n     * @type {string}\n     * @memberof TransactionData\n     */\n    account_id: string;\n    /**\n     * A unique identifier for the transaction.\n     * @type {string}\n     * @memberof TransactionData\n     */\n    transaction_id: string;\n}\n/**\n * Data to populate as test transaction data. If not specified, random transactions will be generated instead.\n * @export\n * @interface TransactionOverride\n */\nexport interface TransactionOverride {\n    [key: string]: object | any;\n\n    /**\n     * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/#transactions-get-response-transactions-authorized-date) field.\n     * @type {string}\n     * @memberof TransactionOverride\n     */\n    date_transacted: string;\n    /**\n     * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.\n     * @type {string}\n     * @memberof TransactionOverride\n     */\n    date_posted: string;\n    /**\n     * The transaction amount. Can be negative.\n     * @type {number}\n     * @memberof TransactionOverride\n     */\n    amount: number;\n    /**\n     * The transaction description.\n     * @type {string}\n     * @memberof TransactionOverride\n     */\n    description: string;\n    /**\n     * The ISO-4217 format currency code for the transaction.\n     * @type {string}\n     * @memberof TransactionOverride\n     */\n    currency?: string;\n}\n/**\n * A grouping of related transactions\n * @export\n * @interface TransactionStream\n */\nexport interface TransactionStream {\n    [key: string]: object | any;\n\n    /**\n     * The ID of the account to which the stream belongs\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    account_id: string;\n    /**\n     * A unique id for the stream\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    stream_id: string;\n    /**\n     * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    category_id: string;\n    /**\n     * A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).\n     * @type {Array<string>}\n     * @memberof TransactionStream\n     */\n    category: Array<string>;\n    /**\n     * A description of the transaction stream.\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    description: string;\n    /**\n     * The posted date of the earliest transaction in the stream.\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    first_date: string;\n    /**\n     * The posted date of the latest transaction in the stream.\n     * @type {string}\n     * @memberof TransactionStream\n     */\n    last_date: string;\n    /**\n     * \n     * @type {RecurringTransactionFrequency}\n     * @memberof TransactionStream\n     */\n    frequency: RecurringTransactionFrequency;\n    /**\n     * An array of Plaid transaction IDs belonging to the stream, sorted by posted date.\n     * @type {Array<string>}\n     * @memberof TransactionStream\n     */\n    transaction_ids: Array<string>;\n    /**\n     * \n     * @type {TransactionStreamAmount}\n     * @memberof TransactionStream\n     */\n    average_amount: TransactionStreamAmount;\n    /**\n     * indicates whether the transaction stream is still live.\n     * @type {boolean}\n     * @memberof TransactionStream\n     */\n    is_active: boolean;\n}\n/**\n * Object with data pertaining to an amount on the transaction stream.\n * @export\n * @interface TransactionStreamAmount\n */\nexport interface TransactionStreamAmount {\n    [key: string]: object | any;\n\n    /**\n     * represents the numerical value of an amount.\n     * @type {number}\n     * @memberof TransactionStreamAmount\n     */\n    amount?: number;\n    /**\n     * The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.\n     * @type {string}\n     * @memberof TransactionStreamAmount\n     */\n    iso_currency_code?: string | null;\n    /**\n     * The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.\n     * @type {string}\n     * @memberof TransactionStreamAmount\n     */\n    unofficial_currency_code?: string | null;\n}\n/**\n * TransactionsGetRequest defines the request schema for `/transactions/get`\n * @export\n * @interface TransactionsGetRequest\n */\nexport interface TransactionsGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsGetRequest\n     */\n    client_id?: string;\n    /**\n     * \n     * @type {TransactionsGetRequestOptions}\n     * @memberof TransactionsGetRequest\n     */\n    options?: TransactionsGetRequestOptions;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof TransactionsGetRequest\n     */\n    access_token: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsGetRequest\n     */\n    secret?: string;\n    /**\n     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof TransactionsGetRequest\n     */\n    start_date: string;\n    /**\n     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.\n     * @type {string}\n     * @memberof TransactionsGetRequest\n     */\n    end_date: string;\n}\n/**\n * An optional object to be used with the request. If specified, `options` must not be `null`.\n * @export\n * @interface TransactionsGetRequestOptions\n */\nexport interface TransactionsGetRequestOptions {\n    /**\n     * A list of `account_ids` to retrieve for the Item  Note: An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof TransactionsGetRequestOptions\n     */\n    account_ids?: Array<string>;\n    /**\n     * The number of transactions to fetch.\n     * @type {number}\n     * @memberof TransactionsGetRequestOptions\n     */\n    count?: number;\n    /**\n     * The number of transactions to skip. The default value is 0.\n     * @type {number}\n     * @memberof TransactionsGetRequestOptions\n     */\n    offset?: number;\n    /**\n     * Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.\n     * @type {boolean}\n     * @memberof TransactionsGetRequestOptions\n     */\n    include_original_description?: boolean | null;\n    /**\n     * Include the `personal_finance_category` object in the response. This feature is currently in beta â€“ to request access, contact transactions-feedback@plaid.com.\n     * @type {boolean}\n     * @memberof TransactionsGetRequestOptions\n     */\n    include_personal_finance_category_beta?: boolean;\n}\n/**\n * TransactionsGetResponse defines the response schema for `/transactions/get`\n * @export\n * @interface TransactionsGetResponse\n */\nexport interface TransactionsGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.\n     * @type {Array<AccountBase>}\n     * @memberof TransactionsGetResponse\n     */\n    accounts: Array<AccountBase>;\n    /**\n     * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.\n     * @type {Array<Transaction>}\n     * @memberof TransactionsGetResponse\n     */\n    transactions: Array<Transaction>;\n    /**\n     * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.\n     * @type {number}\n     * @memberof TransactionsGetResponse\n     */\n    total_transactions: number;\n    /**\n     * \n     * @type {Item}\n     * @memberof TransactionsGetResponse\n     */\n    item: Item;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransactionsGetResponse\n     */\n    request_id: string;\n}\n/**\n * TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get`\n * @export\n * @interface TransactionsRecurringGetRequest\n */\nexport interface TransactionsRecurringGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsRecurringGetRequest\n     */\n    client_id?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof TransactionsRecurringGetRequest\n     */\n    access_token: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsRecurringGetRequest\n     */\n    secret?: string;\n    /**\n     * A list of `account_ids` to retrieve for the Item  Note: An error will be returned if a provided `account_id` is not associated with the Item.\n     * @type {Array<string>}\n     * @memberof TransactionsRecurringGetRequest\n     */\n    account_ids: Array<string>;\n}\n/**\n * TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get`\n * @export\n * @interface TransactionsRecurringGetResponse\n */\nexport interface TransactionsRecurringGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of depository transaction streams.\n     * @type {Array<TransactionStream>}\n     * @memberof TransactionsRecurringGetResponse\n     */\n    inflow_streams: Array<TransactionStream>;\n    /**\n     * An array of expense transaction streams.\n     * @type {Array<TransactionStream>}\n     * @memberof TransactionsRecurringGetResponse\n     */\n    outflow_streams: Array<TransactionStream>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransactionsRecurringGetResponse\n     */\n    request_id: string;\n}\n/**\n * TransactionsRefreshRequest defines the request schema for `/transactions/refresh`\n * @export\n * @interface TransactionsRefreshRequest\n */\nexport interface TransactionsRefreshRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsRefreshRequest\n     */\n    client_id?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof TransactionsRefreshRequest\n     */\n    access_token: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsRefreshRequest\n     */\n    secret?: string;\n}\n/**\n * TransactionsRefreshResponse defines the response schema for `/transactions/refresh`\n * @export\n * @interface TransactionsRefreshResponse\n */\nexport interface TransactionsRefreshResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransactionsRefreshResponse\n     */\n    request_id: string;\n}\n/**\n * Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.\n * @export\n * @interface TransactionsRemovedWebhook\n */\nexport interface TransactionsRemovedWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `TRANSACTIONS`\n     * @type {string}\n     * @memberof TransactionsRemovedWebhook\n     */\n    webhook_type: string;\n    /**\n     * `TRANSACTIONS_REMOVED`\n     * @type {string}\n     * @memberof TransactionsRemovedWebhook\n     */\n    webhook_code: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof TransactionsRemovedWebhook\n     */\n    error?: PlaidError;\n    /**\n     * An array of `transaction_ids` corresponding to the removed transactions\n     * @type {Array<string>}\n     * @memberof TransactionsRemovedWebhook\n     */\n    removed_transactions: Array<string>;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof TransactionsRemovedWebhook\n     */\n    item_id: string;\n}\n/**\n * TransactionsSyncRequest defines the request schema for `/transactions/sync`\n * @export\n * @interface TransactionsSyncRequest\n */\nexport interface TransactionsSyncRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsSyncRequest\n     */\n    client_id?: string;\n    /**\n     * The access token associated with the Item data is being requested for.\n     * @type {string}\n     * @memberof TransactionsSyncRequest\n     */\n    access_token: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransactionsSyncRequest\n     */\n    secret?: string;\n    /**\n     * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item. Note: The upper-bound length of this cursor is 256 characters of base64.\n     * @type {string}\n     * @memberof TransactionsSyncRequest\n     */\n    cursor?: string;\n    /**\n     * The number of transaction updates to fetch.\n     * @type {number}\n     * @memberof TransactionsSyncRequest\n     */\n    count?: number;\n}\n/**\n * TransactionsSyncResponse defines the response schema for `/transactions/sync`\n * @export\n * @interface TransactionsSyncResponse\n */\nexport interface TransactionsSyncResponse {\n    [key: string]: object | any;\n\n    /**\n     * Transactions that have been added to the item since `cursor` ordered by ascending last modified time.\n     * @type {Array<Transaction>}\n     * @memberof TransactionsSyncResponse\n     */\n    added: Array<Transaction>;\n    /**\n     * Transactions that have been modified on the item since `cursor` ordered by ascending last modified time.\n     * @type {Array<Transaction>}\n     * @memberof TransactionsSyncResponse\n     */\n    modified: Array<Transaction>;\n    /**\n     * Transactions that have been removed from the item since `cursor` ordered by ascending last modified time.\n     * @type {Array<RemovedTransaction>}\n     * @memberof TransactionsSyncResponse\n     */\n    removed: Array<RemovedTransaction>;\n    /**\n     * Cursor used for fetching any future updates after the latest update provided in this response.\n     * @type {string}\n     * @memberof TransactionsSyncResponse\n     */\n    next_cursor: string;\n    /**\n     * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`.\n     * @type {boolean}\n     * @memberof TransactionsSyncResponse\n     */\n    has_more: boolean;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransactionsSyncResponse\n     */\n    request_id: string;\n}\n/**\n * Represents a transfer within the Transfers API.\n * @export\n * @interface Transfer\n */\nexport interface Transfer {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof Transfer\n     */\n    id: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof Transfer\n     */\n    ach_class: ACHClass;\n    /**\n     * The account ID that should be credited/debited for this transfer.\n     * @type {string}\n     * @memberof Transfer\n     */\n    account_id: string;\n    /**\n     * \n     * @type {TransferType}\n     * @memberof Transfer\n     */\n    type: TransferType;\n    /**\n     * \n     * @type {TransferUserInResponse}\n     * @memberof Transfer\n     */\n    user: TransferUserInResponse;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof Transfer\n     */\n    amount: string;\n    /**\n     * The description of the transfer.\n     * @type {string}\n     * @memberof Transfer\n     */\n    description: string;\n    /**\n     * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`\n     * @type {string}\n     * @memberof Transfer\n     */\n    created: string;\n    /**\n     * \n     * @type {TransferStatus}\n     * @memberof Transfer\n     */\n    status: TransferStatus;\n    /**\n     * \n     * @type {TransferSweepStatus}\n     * @memberof Transfer\n     */\n    sweep_status?: TransferSweepStatus | null;\n    /**\n     * \n     * @type {TransferNetwork}\n     * @memberof Transfer\n     */\n    network: TransferNetwork;\n    /**\n     * When `true`, you can still cancel this transfer.\n     * @type {boolean}\n     * @memberof Transfer\n     */\n    cancellable: boolean;\n    /**\n     * \n     * @type {TransferFailure}\n     * @memberof Transfer\n     */\n    failure_reason: TransferFailure | null;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof Transfer\n     */\n    metadata: { [key: string]: string; } | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account that was used for this transfer.\n     * @type {string}\n     * @memberof Transfer\n     */\n    origination_account_id: string;\n    /**\n     * \n     * @type {TransferAuthorizationGuaranteeDecision}\n     * @memberof Transfer\n     */\n    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;\n    /**\n     * \n     * @type {TransferAuthorizationGuaranteeDecisionRationale}\n     * @memberof Transfer\n     */\n    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;\n    /**\n     * The currency of the transfer amount, e.g. \\\"USD\\\"\n     * @type {string}\n     * @memberof Transfer\n     */\n    iso_currency_code: string;\n}\n/**\n * Contains the authorization decision for a proposed transfer\n * @export\n * @interface TransferAuthorization\n */\nexport interface TransferAuthorization {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for a transfer authorization.\n     * @type {string}\n     * @memberof TransferAuthorization\n     */\n    id: string;\n    /**\n     * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.\n     * @type {string}\n     * @memberof TransferAuthorization\n     */\n    created: string;\n    /**\n     *  A decision regarding the proposed transfer.  `approved` â€“ The proposed transfer has received the end user\\'s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   `permitted` â€“ Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.\n     * @type {string}\n     * @memberof TransferAuthorization\n     */\n    decision: TransferAuthorizationDecisionEnum;\n    /**\n     * \n     * @type {TransferAuthorizationDecisionRationale}\n     * @memberof TransferAuthorization\n     */\n    decision_rationale: TransferAuthorizationDecisionRationale | null;\n    /**\n     * \n     * @type {TransferAuthorizationGuaranteeDecision}\n     * @memberof TransferAuthorization\n     */\n    guarantee_decision: TransferAuthorizationGuaranteeDecision | null;\n    /**\n     * \n     * @type {TransferAuthorizationGuaranteeDecisionRationale}\n     * @memberof TransferAuthorization\n     */\n    guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale | null;\n    /**\n     * \n     * @type {TransferAuthorizationProposedTransfer}\n     * @memberof TransferAuthorization\n     */\n    proposed_transfer: TransferAuthorizationProposedTransfer;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferAuthorizationDecisionEnum {\n    Approved = 'approved',\n    Permitted = 'permitted',\n    Declined = 'declined'\n}\n\n/**\n * Defines the request schema for `/transfer/authorization/create`\n * @export\n * @interface TransferAuthorizationCreateRequest\n */\nexport interface TransferAuthorizationCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    secret?: string;\n    /**\n     * The Plaid `access_token` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    access_token: string;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {TransferType}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    type: TransferType;\n    /**\n     * \n     * @type {TransferNetwork}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    network: TransferNetwork;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    amount: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    ach_class: ACHClass;\n    /**\n     * \n     * @type {TransferUserInRequest}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    user: TransferUserInRequest;\n    /**\n     * \n     * @type {TransferAuthorizationDevice}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    device?: TransferAuthorizationDevice;\n    /**\n     * Plaid\\'s unique identifier for the origination account for this authorization. If not specified, the default account will be used.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    origination_account_id?: string;\n    /**\n     * The currency of the transfer amount. The default value is \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferAuthorizationCreateRequest\n     */\n    iso_currency_code?: string;\n}\n/**\n * Defines the response schema for `/transfer/authorization/create`\n * @export\n * @interface TransferAuthorizationCreateResponse\n */\nexport interface TransferAuthorizationCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {TransferAuthorization}\n     * @memberof TransferAuthorizationCreateResponse\n     */\n    authorization: TransferAuthorization;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferAuthorizationCreateResponse\n     */\n    request_id: string;\n}\n/**\n * The rationale for Plaid\\'s decision regarding a proposed transfer. Will be null for `approved` decisions.\n * @export\n * @interface TransferAuthorizationDecisionRationale\n */\nexport interface TransferAuthorizationDecisionRationale {\n    [key: string]: object | any;\n\n    /**\n     * A code representing the rationale for permitting or declining the proposed transfer. Possible values are:  `NSF` â€“ Transaction likely to result in a return due to insufficient funds.  `RISK` - Transaction is high-risk.  `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid can only offer `permitted` as a transaction decision.  `LOGIN_REQUIRED` â€“ Unable to collect the account information required for an authorization decision due to Item staleness. Can be rectified using Link update mode.  `ERROR` â€“ Unable to collect the account information required for an authorization decision due to an error.\n     * @type {string}\n     * @memberof TransferAuthorizationDecisionRationale\n     */\n    code: TransferAuthorizationDecisionRationaleCodeEnum;\n    /**\n     * A human-readable description of the code associated with a permitted transfer or transfer decline.\n     * @type {string}\n     * @memberof TransferAuthorizationDecisionRationale\n     */\n    description: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferAuthorizationDecisionRationaleCodeEnum {\n    Nsf = 'NSF',\n    Risk = 'RISK',\n    ManuallyVerifiedItem = 'MANUALLY_VERIFIED_ITEM',\n    LoginRequired = 'LOGIN_REQUIRED',\n    Error = 'ERROR'\n}\n\n/**\n * Information about the device being used to initiate the authorization.\n * @export\n * @interface TransferAuthorizationDevice\n */\nexport interface TransferAuthorizationDevice {\n    [key: string]: object | any;\n\n    /**\n     * The IP address of the device being used to initiate the authorization.\n     * @type {string}\n     * @memberof TransferAuthorizationDevice\n     */\n    ip_address?: string;\n    /**\n     * The user agent of the device being used to initiate the authorization.\n     * @type {string}\n     * @memberof TransferAuthorizationDevice\n     */\n    user_agent?: string;\n}\n/**\n * Indicates whether the transfer is guaranteed by Plaid (Guaranteed ACH customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.\n * @export\n * @enum {string}\n */\nexport enum TransferAuthorizationGuaranteeDecision {\n    Guaranteed = 'GUARANTEED',\n    NotGuaranteed = 'NOT_GUARANTEED',\n    Null = 'null'\n}\n\n/**\n * The rationale for Plaid\\'s decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.\n * @export\n * @interface TransferAuthorizationGuaranteeDecisionRationale\n */\nexport interface TransferAuthorizationGuaranteeDecisionRationale {\n    [key: string]: object | any;\n\n    /**\n     * A code representing the reason Plaid declined to guarantee this transfer:  `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.  `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.  `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guaranteed ACH has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.  `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.\n     * @type {string}\n     * @memberof TransferAuthorizationGuaranteeDecisionRationale\n     */\n    code: TransferAuthorizationGuaranteeDecisionRationaleCodeEnum;\n    /**\n     * A human-readable description of why the transfer cannot be guaranteed.\n     * @type {string}\n     * @memberof TransferAuthorizationGuaranteeDecisionRationale\n     */\n    description: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferAuthorizationGuaranteeDecisionRationaleCodeEnum {\n    ReturnBank = 'RETURN_BANK',\n    ReturnCustomer = 'RETURN_CUSTOMER',\n    GuaranteeLimitReached = 'GUARANTEE_LIMIT_REACHED',\n    RiskEstimateUnavailable = 'RISK_ESTIMATE_UNAVAILABLE'\n}\n\n/**\n * Details regarding the proposed transfer.\n * @export\n * @interface TransferAuthorizationProposedTransfer\n */\nexport interface TransferAuthorizationProposedTransfer {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    ach_class: ACHClass;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    account_id: string;\n    /**\n     * \n     * @type {TransferType}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    type: TransferType;\n    /**\n     * \n     * @type {TransferUserInResponse}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    user: TransferUserInResponse;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    amount: string;\n    /**\n     * The network or rails used for the transfer.\n     * @type {string}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    network: string;\n    /**\n     * Plaid\\'s unique identifier for the origination account that was used for this transfer.\n     * @type {string}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    origination_account_id: string;\n    /**\n     * The currency of the transfer amount. The default value is \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferAuthorizationProposedTransfer\n     */\n    iso_currency_code: string;\n}\n/**\n * Defines the request schema for `/transfer/cancel`\n * @export\n * @interface TransferCancelRequest\n */\nexport interface TransferCancelRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferCancelRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferCancelRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof TransferCancelRequest\n     */\n    transfer_id: string;\n}\n/**\n * Defines the response schema for `/transfer/cancel`\n * @export\n * @interface TransferCancelResponse\n */\nexport interface TransferCancelResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferCancelResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/transfer/create`\n * @export\n * @interface TransferCreateRequest\n */\nexport interface TransferCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    secret?: string;\n    /**\n     * Deprecated. `authorization_id` is now for used idempotency instead.  A random key provided by the client, per unique transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     * @deprecated\n     */\n    idempotency_key?: string;\n    /**\n     * The Plaid `access_token` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    access_token: string;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    account_id: string;\n    /**\n     * Plaidâ€™s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    authorization_id: string;\n    /**\n     * \n     * @type {TransferType}\n     * @memberof TransferCreateRequest\n     */\n    type: TransferType;\n    /**\n     * \n     * @type {TransferNetwork}\n     * @memberof TransferCreateRequest\n     */\n    network: TransferNetwork;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    amount: string;\n    /**\n     * The transfer description. Maximum of 10 characters.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferCreateRequest\n     */\n    ach_class: ACHClass;\n    /**\n     * \n     * @type {TransferUserInRequest}\n     * @memberof TransferCreateRequest\n     */\n    user: TransferUserInRequest;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof TransferCreateRequest\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    origination_account_id?: string | null;\n    /**\n     * The currency of the transfer amount. The default value is \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferCreateRequest\n     */\n    iso_currency_code?: string;\n}\n/**\n * Defines the response schema for `/transfer/create`\n * @export\n * @interface TransferCreateResponse\n */\nexport interface TransferCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Transfer}\n     * @memberof TransferCreateResponse\n     */\n    transfer: Transfer;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Represents an event in the Transfers API.\n * @export\n * @interface TransferEvent\n */\nexport interface TransferEvent {\n    [key: string]: object | any;\n\n    /**\n     * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.\n     * @type {number}\n     * @memberof TransferEvent\n     */\n    event_id: number;\n    /**\n     * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    timestamp: string;\n    /**\n     * \n     * @type {TransferEventType}\n     * @memberof TransferEvent\n     */\n    event_type: TransferEventType;\n    /**\n     * The account ID associated with the transfer.\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    account_id: string;\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    transfer_id: string;\n    /**\n     * The ID of the origination account that this balance belongs to.\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    origination_account_id: string | null;\n    /**\n     * \n     * @type {TransferType}\n     * @memberof TransferEvent\n     */\n    transfer_type: TransferType;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    transfer_amount: string;\n    /**\n     * \n     * @type {TransferFailure}\n     * @memberof TransferEvent\n     */\n    failure_reason: TransferFailure | null;\n    /**\n     * Plaidâ€™s unique identifier for a sweep.\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    sweep_id: string | null;\n    /**\n     * A signed amount of how much was `swept` or `reverse_swept` (decimal string with two digits of precision e.g. \\\"-5.50\\\").\n     * @type {string}\n     * @memberof TransferEvent\n     */\n    sweep_amount: string | null;\n}\n/**\n * Defines the request schema for `/transfer/event/list`\n * @export\n * @interface TransferEventListRequest\n */\nexport interface TransferEventListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    end_date?: string | null;\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    transfer_id?: string | null;\n    /**\n     * The account ID to get events for all transactions to/from an account.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    account_id?: string | null;\n    /**\n     * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    transfer_type?: TransferEventListRequestTransferTypeEnum;\n    /**\n     * Filter events by event type.\n     * @type {Array<TransferEventType>}\n     * @memberof TransferEventListRequest\n     */\n    event_types?: Array<TransferEventType>;\n    /**\n     * Plaidâ€™s unique identifier for a sweep.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    sweep_id?: string;\n    /**\n     * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.\n     * @type {number}\n     * @memberof TransferEventListRequest\n     */\n    count?: number | null;\n    /**\n     * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.\n     * @type {number}\n     * @memberof TransferEventListRequest\n     */\n    offset?: number | null;\n    /**\n     * The origination account ID to get events for transfers from a specific origination account.\n     * @type {string}\n     * @memberof TransferEventListRequest\n     */\n    origination_account_id?: string | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferEventListRequestTransferTypeEnum {\n    Debit = 'debit',\n    Credit = 'credit',\n    Null = 'null'\n}\n\n/**\n * Defines the response schema for `/transfer/event/list`\n * @export\n * @interface TransferEventListResponse\n */\nexport interface TransferEventListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<TransferEvent>}\n     * @memberof TransferEventListResponse\n     */\n    transfer_events: Array<TransferEvent>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferEventListResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/transfer/event/sync`\n * @export\n * @interface TransferEventSyncRequest\n */\nexport interface TransferEventSyncRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferEventSyncRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferEventSyncRequest\n     */\n    secret?: string;\n    /**\n     * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.\n     * @type {number}\n     * @memberof TransferEventSyncRequest\n     */\n    after_id: number;\n    /**\n     * The maximum number of transfer events to return.\n     * @type {number}\n     * @memberof TransferEventSyncRequest\n     */\n    count?: number | null;\n}\n/**\n * Defines the response schema for `/transfer/event/sync`\n * @export\n * @interface TransferEventSyncResponse\n */\nexport interface TransferEventSyncResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<TransferEvent>}\n     * @memberof TransferEventSyncResponse\n     */\n    transfer_events: Array<TransferEvent>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferEventSyncResponse\n     */\n    request_id: string;\n}\n/**\n * The type of event that this transfer represents.  `pending`: A new transfer was created; it is in the pending state.  `cancelled`: The transfer was cancelled by the client.  `failed`: The transfer failed, no funds were moved.  `posted`: The transfer has been successfully submitted to the payment network.  `reversed`: A posted transfer was reversed.  `swept`: The transfer was swept to / from the sweep account.  `reverse_swept`: Due to the transfer reversing, funds were pulled from or pushed back to the sweep account.\n * @export\n * @enum {string}\n */\nexport enum TransferEventType {\n    Pending = 'pending',\n    Cancelled = 'cancelled',\n    Failed = 'failed',\n    Posted = 'posted',\n    Reversed = 'reversed',\n    Swept = 'swept',\n    ReverseSwept = 'reverse_swept'\n}\n\n/**\n * The failure reason if the event type for a transfer is `\\\"failed\\\"` or `\\\"reversed\\\"`. Null value otherwise.\n * @export\n * @interface TransferFailure\n */\nexport interface TransferFailure {\n    [key: string]: object | any;\n\n    /**\n     * The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).\n     * @type {string}\n     * @memberof TransferFailure\n     */\n    ach_return_code?: string | null;\n    /**\n     * A human-readable description of the reason for the failure or reversal.\n     * @type {string}\n     * @memberof TransferFailure\n     */\n    description?: string;\n}\n/**\n * Defines the request schema for `/transfer/get`\n * @export\n * @interface TransferGetRequest\n */\nexport interface TransferGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferGetRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a transfer.\n     * @type {string}\n     * @memberof TransferGetRequest\n     */\n    transfer_id: string;\n}\n/**\n * Defines the response schema for `/transfer/get`\n * @export\n * @interface TransferGetResponse\n */\nexport interface TransferGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Transfer}\n     * @memberof TransferGetResponse\n     */\n    transfer: Transfer;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferGetResponse\n     */\n    request_id: string;\n}\n/**\n * Represents a transfer intent within Transfer UI.\n * @export\n * @interface TransferIntentCreate\n */\nexport interface TransferIntentCreate {\n    [key: string]: object | any;\n\n    /**\n     * Plaid\\'s unique identifier for the transfer intent object.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    id: string;\n    /**\n     * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    created: string;\n    /**\n     * The status of the transfer intent.  - `PENDING` â€“Â The transfer intent is pending. - `SUCCEEDED` â€“ The transfer intent was successfully created. - `FAILED` â€“ The transfer intent was unable to be created.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    status: TransferIntentCreateStatusEnum;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    account_id?: string | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    origination_account_id: string;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    amount: string;\n    /**\n     * \n     * @type {TransferIntentCreateMode}\n     * @memberof TransferIntentCreate\n     */\n    mode: TransferIntentCreateMode;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferIntentCreate\n     */\n    ach_class: ACHClass;\n    /**\n     * \n     * @type {TransferUserInResponse}\n     * @memberof TransferIntentCreate\n     */\n    user: TransferUserInResponse;\n    /**\n     * A description for the underlying transfer. Maximum of 8 characters.\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    description: string;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof TransferIntentCreate\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * The currency of the transfer amount, e.g. \\\"USD\\\"\n     * @type {string}\n     * @memberof TransferIntentCreate\n     */\n    iso_currency_code: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferIntentCreateStatusEnum {\n    Pending = 'PENDING',\n    Succeeded = 'SUCCEEDED',\n    Failed = 'FAILED'\n}\n\n/**\n * The direction of the flow of transfer funds.  - `PAYMENT` â€“Â Transfers funds from an end user\\'s account to your business account.  - `DISBURSEMENT` â€“ Transfers funds from your business account to an end user\\'s account.\n * @export\n * @enum {string}\n */\nexport enum TransferIntentCreateMode {\n    Payment = 'PAYMENT',\n    Disbursement = 'DISBURSEMENT'\n}\n\n/**\n * Defines the request schema for `/transfer/intent/create`\n * @export\n * @interface TransferIntentCreateRequest\n */\nexport interface TransferIntentCreateRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    client_id: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    secret: string;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited.\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    account_id?: string | null;\n    /**\n     * \n     * @type {TransferIntentCreateMode}\n     * @memberof TransferIntentCreateRequest\n     */\n    mode: TransferIntentCreateMode;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    amount: string;\n    /**\n     * A description for the underlying transfer. Maximum of 8 characters.\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferIntentCreateRequest\n     */\n    ach_class: ACHClass;\n    /**\n     * Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    origination_account_id?: string | null;\n    /**\n     * \n     * @type {TransferUserInRequest}\n     * @memberof TransferIntentCreateRequest\n     */\n    user: TransferUserInRequest;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof TransferIntentCreateRequest\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * The currency of the transfer amount, e.g. \\\"USD\\\"\n     * @type {string}\n     * @memberof TransferIntentCreateRequest\n     */\n    iso_currency_code?: string;\n}\n/**\n * Defines the response schema for `/transfer/intent/create`\n * @export\n * @interface TransferIntentCreateResponse\n */\nexport interface TransferIntentCreateResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {TransferIntentCreate}\n     * @memberof TransferIntentCreateResponse\n     */\n    transfer_intent: TransferIntentCreate;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferIntentCreateResponse\n     */\n    request_id: string;\n}\n/**\n * Represents a transfer intent within Transfer UI.\n * @export\n * @interface TransferIntentGet\n */\nexport interface TransferIntentGet {\n    [key: string]: object | any;\n\n    /**\n     * Plaid\\'s unique identifier for a transfer intent object.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    id: string;\n    /**\n     * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    created: string;\n    /**\n     * The status of the transfer intent.  - `PENDING` â€“Â The transfer intent is pending. - `SUCCEEDED` â€“ The transfer intent was successfully created. - `FAILED` â€“ The transfer intent was unable to be created.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    status: TransferIntentGetStatusEnum;\n    /**\n     * Plaid\\'s unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    transfer_id: string | null;\n    /**\n     * \n     * @type {TransferIntentGetFailureReason}\n     * @memberof TransferIntentGet\n     */\n    failure_reason: TransferIntentGetFailureReason | null;\n    /**\n     *  A decision regarding the proposed transfer.  `APPROVED` â€“ The proposed transfer has received the end user\\'s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   `PERMITTED` â€“ Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  `DECLINED` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details. Null value otherwise.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    authorization_decision: TransferIntentGetAuthorizationDecisionEnum;\n    /**\n     * \n     * @type {TransferAuthorizationDecisionRationale}\n     * @memberof TransferIntentGet\n     */\n    authorization_decision_rationale: TransferAuthorizationDecisionRationale | null;\n    /**\n     * The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    account_id?: string | null;\n    /**\n     * Plaidâ€™s unique identifier for the origination account used for the transfer.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    origination_account_id: string;\n    /**\n     * The amount of the transfer (decimal string with two digits of precision e.g. \\\"10.00\\\").\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    amount: string;\n    /**\n     * \n     * @type {TransferIntentCreateMode}\n     * @memberof TransferIntentGet\n     */\n    mode: TransferIntentCreateMode;\n    /**\n     * \n     * @type {ACHClass}\n     * @memberof TransferIntentGet\n     */\n    ach_class: ACHClass;\n    /**\n     * \n     * @type {TransferUserInResponse}\n     * @memberof TransferIntentGet\n     */\n    user: TransferUserInResponse;\n    /**\n     * A description for the underlying transfer. Maximum of 8 characters.\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    description: string;\n    /**\n     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters \n     * @type {{ [key: string]: string; }}\n     * @memberof TransferIntentGet\n     */\n    metadata?: { [key: string]: string; } | null;\n    /**\n     * The currency of the transfer amount, e.g. \\\"USD\\\"\n     * @type {string}\n     * @memberof TransferIntentGet\n     */\n    iso_currency_code: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferIntentGetStatusEnum {\n    Pending = 'PENDING',\n    Succeeded = 'SUCCEEDED',\n    Failed = 'FAILED'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TransferIntentGetAuthorizationDecisionEnum {\n    Approved = 'APPROVED',\n    Permitted = 'PERMITTED',\n    Declined = 'DECLINED'\n}\n\n/**\n * The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise.\n * @export\n * @interface TransferIntentGetFailureReason\n */\nexport interface TransferIntentGetFailureReason {\n    [key: string]: object | any;\n\n    /**\n     * A broad categorization of the error.\n     * @type {string}\n     * @memberof TransferIntentGetFailureReason\n     */\n    error_type?: string;\n    /**\n     * A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined).  For a full listing of bank transfer errors, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/).\n     * @type {string}\n     * @memberof TransferIntentGetFailureReason\n     */\n    error_code?: string;\n    /**\n     * A human-readable description of the code associated with a failed transfer intent.\n     * @type {string}\n     * @memberof TransferIntentGetFailureReason\n     */\n    error_message?: string;\n}\n/**\n * Defines the request schema for `/transfer/intent/get`\n * @export\n * @interface TransferIntentGetRequest\n */\nexport interface TransferIntentGetRequest {\n    [key: string]: object | any;\n\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferIntentGetRequest\n     */\n    client_id: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferIntentGetRequest\n     */\n    secret: string;\n    /**\n     * Plaid\\'s unique identifier for a transfer intent object.\n     * @type {string}\n     * @memberof TransferIntentGetRequest\n     */\n    transfer_intent_id: string;\n}\n/**\n * Defines the response schema for `/transfer/intent/get`\n * @export\n * @interface TransferIntentGetResponse\n */\nexport interface TransferIntentGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {TransferIntentGet}\n     * @memberof TransferIntentGetResponse\n     */\n    transfer_intent: TransferIntentGet;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferIntentGetResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/transfer/list`\n * @export\n * @interface TransferListRequest\n */\nexport interface TransferListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof TransferListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)\n     * @type {string}\n     * @memberof TransferListRequest\n     */\n    end_date?: string | null;\n    /**\n     * The maximum number of transfers to return.\n     * @type {number}\n     * @memberof TransferListRequest\n     */\n    count?: number;\n    /**\n     * The number of transfers to skip before returning results.\n     * @type {number}\n     * @memberof TransferListRequest\n     */\n    offset?: number;\n    /**\n     * Filter transfers to only those originated through the specified origination account.\n     * @type {string}\n     * @memberof TransferListRequest\n     */\n    origination_account_id?: string | null;\n}\n/**\n * Defines the response schema for `/transfer/list`\n * @export\n * @interface TransferListResponse\n */\nexport interface TransferListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<Transfer>}\n     * @memberof TransferListResponse\n     */\n    transfers: Array<Transfer>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferListResponse\n     */\n    request_id: string;\n}\n/**\n * The network or rails used for the transfer. Valid options are `ach` or `same-day-ach`.\n * @export\n * @enum {string}\n */\nexport enum TransferNetwork {\n    Ach = 'ach',\n    SameDayAch = 'same-day-ach'\n}\n\n/**\n * A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.  Repayments are sent over ACH, with funds typically available on the next banking day.\n * @export\n * @interface TransferRepayment\n */\nexport interface TransferRepayment {\n    [key: string]: object | any;\n\n    /**\n     * Identifier of the repayment.\n     * @type {string}\n     * @memberof TransferRepayment\n     */\n    repayment_id: string;\n    /**\n     * The datetime when the repayment occurred, in RFC 3339 format.\n     * @type {string}\n     * @memberof TransferRepayment\n     */\n    created: string;\n    /**\n     * Decimal amount of the repayment as it appears on your account ledger.\n     * @type {string}\n     * @memberof TransferRepayment\n     */\n    amount: string;\n    /**\n     * The currency of the repayment, e.g. \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferRepayment\n     */\n    iso_currency_code: string;\n}\n/**\n * Defines the request schema for `/transfer/repayment/list`\n * @export\n * @interface TransferRepaymentListRequest\n */\nexport interface TransferRepaymentListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferRepaymentListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferRepaymentListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of repayments to return (RFC 3339 format).\n     * @type {string}\n     * @memberof TransferRepaymentListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of repayments to return (RFC 3339 format).\n     * @type {string}\n     * @memberof TransferRepaymentListRequest\n     */\n    end_date?: string | null;\n    /**\n     * The maximum number of repayments to return.\n     * @type {number}\n     * @memberof TransferRepaymentListRequest\n     */\n    count?: number | null;\n    /**\n     * The number of repayments to skip before returning results.\n     * @type {number}\n     * @memberof TransferRepaymentListRequest\n     */\n    offset?: number;\n}\n/**\n * Defines the response schema for `/transfer/repayments/list`\n * @export\n * @interface TransferRepaymentListResponse\n */\nexport interface TransferRepaymentListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<TransferRepayment>}\n     * @memberof TransferRepaymentListResponse\n     */\n    repayments: Array<TransferRepayment>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferRepaymentListResponse\n     */\n    request_id: string;\n}\n/**\n * Represents a return on a Guaranteed ACH transfer that is included in the specified repayment.\n * @export\n * @interface TransferRepaymentReturn\n */\nexport interface TransferRepaymentReturn {\n    [key: string]: object | any;\n\n    /**\n     * The unique identifier of the guaranteed transfer that was returned.\n     * @type {string}\n     * @memberof TransferRepaymentReturn\n     */\n    transfer_id: string;\n    /**\n     * The unique identifier of the corresponding `reversed` transfer event.\n     * @type {number}\n     * @memberof TransferRepaymentReturn\n     */\n    event_id: number;\n    /**\n     * The value of the returned transfer.\n     * @type {string}\n     * @memberof TransferRepaymentReturn\n     */\n    amount: string;\n    /**\n     * The currency of the repayment, e.g. \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferRepaymentReturn\n     */\n    iso_currency_code: string;\n}\n/**\n * Defines the request schema for `/transfer/repayment/return/list`\n * @export\n * @interface TransferRepaymentReturnListRequest\n */\nexport interface TransferRepaymentReturnListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferRepaymentReturnListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferRepaymentReturnListRequest\n     */\n    secret?: string;\n    /**\n     * Identifier of the repayment to query.\n     * @type {string}\n     * @memberof TransferRepaymentReturnListRequest\n     */\n    repayment_id: string;\n    /**\n     * The maximum number of repayments to return.\n     * @type {number}\n     * @memberof TransferRepaymentReturnListRequest\n     */\n    count?: number | null;\n    /**\n     * The number of repayments to skip before returning results.\n     * @type {number}\n     * @memberof TransferRepaymentReturnListRequest\n     */\n    offset?: number;\n}\n/**\n * Defines the response schema for `/transfer/repayments/return/list`\n * @export\n * @interface TransferRepaymentReturnListResponse\n */\nexport interface TransferRepaymentReturnListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<TransferRepaymentReturn>}\n     * @memberof TransferRepaymentReturnListResponse\n     */\n    repayment_returns: Array<TransferRepaymentReturn>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferRepaymentReturnListResponse\n     */\n    request_id: string;\n}\n/**\n * The status of the transfer.\n * @export\n * @enum {string}\n */\nexport enum TransferStatus {\n    Pending = 'pending',\n    Posted = 'posted',\n    Cancelled = 'cancelled',\n    Failed = 'failed',\n    Reversed = 'reversed'\n}\n\n/**\n * Describes a sweep of funds to / from the sweep account.  A sweep is associated with many sweep events (events of type `swept` or `reverse_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.  `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `reverse_swept` events occur when a transfer is reversed and Plaid undoes the credit or debit.  The total sum of the `swept` and `reverse_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.\n * @export\n * @interface TransferSweep\n */\nexport interface TransferSweep {\n    [key: string]: object | any;\n\n    /**\n     * Identifier of the sweep.\n     * @type {string}\n     * @memberof TransferSweep\n     */\n    id: string;\n    /**\n     * The datetime when the sweep occurred, in RFC 3339 format.\n     * @type {string}\n     * @memberof TransferSweep\n     */\n    created: string;\n    /**\n     * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \\\"-10.00\\\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.\n     * @type {string}\n     * @memberof TransferSweep\n     */\n    amount: string;\n    /**\n     * The currency of the sweep, e.g. \\\"USD\\\".\n     * @type {string}\n     * @memberof TransferSweep\n     */\n    iso_currency_code: string;\n}\n/**\n * Defines the request schema for `/transfer/sweep/get`\n * @export\n * @interface TransferSweepGetRequest\n */\nexport interface TransferSweepGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferSweepGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferSweepGetRequest\n     */\n    secret?: string;\n    /**\n     * Plaidâ€™s unique identifier for a sweep.\n     * @type {string}\n     * @memberof TransferSweepGetRequest\n     */\n    sweep_id: string;\n}\n/**\n * Defines the response schema for `/transfer/sweep/get`\n * @export\n * @interface TransferSweepGetResponse\n */\nexport interface TransferSweepGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {TransferSweep}\n     * @memberof TransferSweepGetResponse\n     */\n    sweep: TransferSweep;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferSweepGetResponse\n     */\n    request_id: string;\n}\n/**\n * Defines the request schema for `/transfer/sweep/list`\n * @export\n * @interface TransferSweepListRequest\n */\nexport interface TransferSweepListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferSweepListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof TransferSweepListRequest\n     */\n    secret?: string;\n    /**\n     * The start datetime of sweeps to return (RFC 3339 format).\n     * @type {string}\n     * @memberof TransferSweepListRequest\n     */\n    start_date?: string | null;\n    /**\n     * The end datetime of sweeps to return (RFC 3339 format).\n     * @type {string}\n     * @memberof TransferSweepListRequest\n     */\n    end_date?: string | null;\n    /**\n     * The maximum number of sweeps to return.\n     * @type {number}\n     * @memberof TransferSweepListRequest\n     */\n    count?: number | null;\n    /**\n     * The number of sweeps to skip before returning results.\n     * @type {number}\n     * @memberof TransferSweepListRequest\n     */\n    offset?: number;\n}\n/**\n * Defines the response schema for `/transfer/sweep/list`\n * @export\n * @interface TransferSweepListResponse\n */\nexport interface TransferSweepListResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {Array<TransferSweep>}\n     * @memberof TransferSweepListResponse\n     */\n    sweeps: Array<TransferSweep>;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof TransferSweepListResponse\n     */\n    request_id: string;\n}\n/**\n * The status of the sweep for the transfer. `unswept`: The transfer hasn\\'t been swept yet. `swept`: The transfer was swept to the sweep account. `reverse_swept`: The transfer was reversed, funds were pulled back or pushed back to the sweep account. `null`: The transfer will never be swept (e.g. if the transfer is cancelled or reversed before being swept)\n * @export\n * @enum {string}\n */\nexport enum TransferSweepStatus {\n    Null = 'null',\n    Unswept = 'unswept',\n    Swept = 'swept',\n    ReverseSwept = 'reverse_swept'\n}\n\n/**\n * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.\n * @export\n * @enum {string}\n */\nexport enum TransferType {\n    Debit = 'debit',\n    Credit = 'credit'\n}\n\n/**\n * The address associated with the account holder.\n * @export\n * @interface TransferUserAddressInRequest\n */\nexport interface TransferUserAddressInRequest {\n    [key: string]: object | any;\n\n    /**\n     * The street number and name (i.e., \\\"100 Market St.\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInRequest\n     */\n    street?: string;\n    /**\n     * Ex. \\\"San Francisco\\\"\n     * @type {string}\n     * @memberof TransferUserAddressInRequest\n     */\n    city?: string;\n    /**\n     * The state or province (e.g., \\\"California\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInRequest\n     */\n    region?: string;\n    /**\n     * The postal code (e.g., \\\"94103\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInRequest\n     */\n    postal_code?: string;\n    /**\n     * A two-letter country code (e.g., \\\"US\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInRequest\n     */\n    country?: string;\n}\n/**\n * The address associated with the account holder.\n * @export\n * @interface TransferUserAddressInResponse\n */\nexport interface TransferUserAddressInResponse {\n    [key: string]: object | any;\n\n    /**\n     * The street number and name (i.e., \\\"100 Market St.\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInResponse\n     */\n    street: string | null;\n    /**\n     * Ex. \\\"San Francisco\\\"\n     * @type {string}\n     * @memberof TransferUserAddressInResponse\n     */\n    city: string | null;\n    /**\n     * The state or province (e.g., \\\"California\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInResponse\n     */\n    region: string | null;\n    /**\n     * The postal code (e.g., \\\"94103\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInResponse\n     */\n    postal_code: string | null;\n    /**\n     * A two-letter country code (e.g., \\\"US\\\").\n     * @type {string}\n     * @memberof TransferUserAddressInResponse\n     */\n    country: string | null;\n}\n/**\n * The legal name and other information for the account holder.\n * @export\n * @interface TransferUserInRequest\n */\nexport interface TransferUserInRequest {\n    [key: string]: object | any;\n\n    /**\n     * The user\\'s legal name.\n     * @type {string}\n     * @memberof TransferUserInRequest\n     */\n    legal_name: string;\n    /**\n     * The user\\'s phone number.\n     * @type {string}\n     * @memberof TransferUserInRequest\n     */\n    phone_number?: string;\n    /**\n     * The user\\'s email address.\n     * @type {string}\n     * @memberof TransferUserInRequest\n     */\n    email_address?: string;\n    /**\n     * \n     * @type {TransferUserAddressInRequest}\n     * @memberof TransferUserInRequest\n     */\n    address?: TransferUserAddressInRequest;\n}\n/**\n * The legal name and other information for the account holder.\n * @export\n * @interface TransferUserInResponse\n */\nexport interface TransferUserInResponse {\n    [key: string]: object | any;\n\n    /**\n     * The user\\'s legal name.\n     * @type {string}\n     * @memberof TransferUserInResponse\n     */\n    legal_name: string;\n    /**\n     * The user\\'s phone number.\n     * @type {string}\n     * @memberof TransferUserInResponse\n     */\n    phone_number: string | null;\n    /**\n     * The user\\'s email address.\n     * @type {string}\n     * @memberof TransferUserInResponse\n     */\n    email_address: string | null;\n    /**\n     * \n     * @type {TransferUserAddressInResponse}\n     * @memberof TransferUserInResponse\n     */\n    address: TransferUserAddressInResponse | null;\n}\n/**\n * Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.\n * @export\n * @interface UserCustomPassword\n */\nexport interface UserCustomPassword {\n    [key: string]: object | any;\n\n    /**\n     * The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.\n     * @type {string}\n     * @memberof UserCustomPassword\n     */\n    version?: string | null;\n    /**\n     * A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item\\'s creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.\n     * @type {string}\n     * @memberof UserCustomPassword\n     */\n    seed: string;\n    /**\n     * An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.\n     * @type {Array<OverrideAccounts>}\n     * @memberof UserCustomPassword\n     */\n    override_accounts: Array<OverrideAccounts>;\n    /**\n     * \n     * @type {MFA}\n     * @memberof UserCustomPassword\n     */\n    mfa: MFA;\n    /**\n     * You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.\n     * @type {string}\n     * @memberof UserCustomPassword\n     */\n    recaptcha: string;\n    /**\n     * An error code to force on Item creation. Possible values are:  `\\\"INSTITUTION_NOT_RESPONDING\\\"` `\\\"INSTITUTION_NO_LONGER_SUPPORTED\\\"` `\\\"INVALID_CREDENTIALS\\\"` `\\\"INVALID_MFA\\\"` `\\\"ITEM_LOCKED\\\"` `\\\"ITEM_LOGIN_REQUIRED\\\"` `\\\"ITEM_NOT_SUPPORTED\\\"` `\\\"INVALID_LINK_TOKEN\\\"` `\\\"MFA_NOT_SUPPORTED\\\"` `\\\"NO_ACCOUNTS\\\"` `\\\"PLAID_ERROR\\\"` `\\\"PRODUCTS_NOT_SUPPORTED\\\"` `\\\"USER_SETUP_REQUIRED\\\"`\n     * @type {string}\n     * @memberof UserCustomPassword\n     */\n    force_error: string;\n}\n/**\n * The `USER_PERMISSION_REVOKED` webhook is fired to when an end user has used the [my.plaid.com portal](https://my.plaid.com) to revoke the permission that they previously granted to access an Item. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user.\n * @export\n * @interface UserPermissionRevokedWebhook\n */\nexport interface UserPermissionRevokedWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ITEM`\n     * @type {string}\n     * @memberof UserPermissionRevokedWebhook\n     */\n    webhook_type: string;\n    /**\n     * `USER_PERMISSION_REVOKED`\n     * @type {string}\n     * @memberof UserPermissionRevokedWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof UserPermissionRevokedWebhook\n     */\n    item_id: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof UserPermissionRevokedWebhook\n     */\n    error?: PlaidError;\n}\n/**\n * Details about a certain reason as to why a document could potentially be fraudulent\n * @export\n * @interface VerificationAttribute\n */\nexport interface VerificationAttribute {\n    [key: string]: object | any;\n\n    /**\n     * Message indicating the reason as to why the verification failed\n     * @type {string}\n     * @memberof VerificationAttribute\n     */\n    type: VerificationAttributeTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum VerificationAttributeTypeEnum {\n    VerificationAttributeTypeUnknown = 'VERIFICATION_ATTRIBUTE_TYPE_UNKNOWN',\n    VerificationAttributeTypeAmountMatch = 'VERIFICATION_ATTRIBUTE_TYPE_AMOUNT_MATCH',\n    VerificationAttributeTypeDateMatch = 'VERIFICATION_ATTRIBUTE_TYPE_DATE_MATCH',\n    VerificationAttributeTypeDateMismatch = 'VERIFICATION_ATTRIBUTE_TYPE_DATE_MISMATCH',\n    VerificationAttributeTypeFileTampering = 'VERIFICATION_ATTRIBUTE_TYPE_FILE_TAMPERING',\n    VerificationAttributeTypeDescriptionMatch = 'VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MATCH',\n    VerificationAttributeTypeDescriptionMismatch = 'VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MISMATCH',\n    VerificationAttributeTypeFirstNameMatch = 'VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MATCH',\n    VerificationAttributeTypeFirstNameMismatch = 'VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MISMATCH',\n    VerificationAttributeTypeLastNameMatch = 'VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MATCH',\n    VerificationAttributeTypeLastNameMismatch = 'VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MISMATCH',\n    Null = 'null'\n}\n\n/**\n * Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made.\n * @export\n * @interface VerificationExpiredWebhook\n */\nexport interface VerificationExpiredWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `AUTH`\n     * @type {string}\n     * @memberof VerificationExpiredWebhook\n     */\n    webhook_type: string;\n    /**\n     * `VERIFICATION_EXPIRED`\n     * @type {string}\n     * @memberof VerificationExpiredWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof VerificationExpiredWebhook\n     */\n    item_id: string;\n    /**\n     * The `account_id` of the account associated with the webhook\n     * @type {string}\n     * @memberof VerificationExpiredWebhook\n     */\n    account_id: string;\n}\n/**\n * The verification refresh status. One of the following:  `\\\"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED\\\"` User presence is required to refresh an income verification. `\\\"VERIFICATION_REFRESH_SUCCESSFUL\\\"` The income verification refresh was successful. `\\\"VERIFICATION_REFRESH_NOT_FOUND\\\"` No new data was found after the income verification refresh.\n * @export\n * @enum {string}\n */\nexport enum VerificationRefreshStatus {\n    StatusUserPresenceRequired = 'VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED',\n    Successful = 'VERIFICATION_REFRESH_SUCCESSFUL',\n    NotFound = 'VERIFICATION_REFRESH_NOT_FOUND'\n}\n\n/**\n * The verification status. One of the following:  `\\\"VERIFIED\\\"`: The information was successfully verified.  `\\\"UNVERIFIED\\\"`: The verification has not yet been performed.  `\\\"NEEDS_INFO\\\"`: The verification was attempted but could not be completed due to missing information.  \\\"`UNABLE_TO_VERIFY`\\\": The verification was performed and the information could not be verified.  `\\\"UNKNOWN\\\"`: The verification status is unknown.\n * @export\n * @enum {string}\n */\nexport enum VerificationStatus {\n    Verified = 'VERIFIED',\n    Unverified = 'UNVERIFIED',\n    NeedsInfo = 'NEEDS_INFO',\n    UnableToVerify = 'UNABLE_TO_VERIFY',\n    Unknown = 'UNKNOWN'\n}\n\n/**\n * W2 is an object that represents income data taken from a W2 tax document.\n * @export\n * @interface W2\n */\nexport interface W2 {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {PaystubEmployer}\n     * @memberof W2\n     */\n    employer?: PaystubEmployer;\n    /**\n     * \n     * @type {Employee}\n     * @memberof W2\n     */\n    employee?: Employee;\n    /**\n     * The tax year of the W2 document.\n     * @type {string}\n     * @memberof W2\n     */\n    tax_year?: string | null;\n    /**\n     * An employee identification number or EIN.\n     * @type {string}\n     * @memberof W2\n     */\n    employer_id_number?: string | null;\n    /**\n     * Wages from tips and other compensation.\n     * @type {string}\n     * @memberof W2\n     */\n    wages_tips_other_comp?: string | null;\n    /**\n     * Federal income tax withheld for the tax year.\n     * @type {string}\n     * @memberof W2\n     */\n    federal_income_tax_withheld?: string | null;\n    /**\n     * Wages from social security.\n     * @type {string}\n     * @memberof W2\n     */\n    social_security_wages?: string | null;\n    /**\n     * Social security tax withheld for the tax year.\n     * @type {string}\n     * @memberof W2\n     */\n    social_security_tax_withheld?: string | null;\n    /**\n     * Wages and tips from medicare.\n     * @type {string}\n     * @memberof W2\n     */\n    medicare_wages_and_tips?: string | null;\n    /**\n     * Medicare tax withheld for the tax year.\n     * @type {string}\n     * @memberof W2\n     */\n    medicare_tax_withheld?: string | null;\n    /**\n     * Tips from social security.\n     * @type {string}\n     * @memberof W2\n     */\n    social_security_tips?: string | null;\n    /**\n     * Allocated tips.\n     * @type {string}\n     * @memberof W2\n     */\n    allocated_tips?: string | null;\n    /**\n     * Contents from box 9 on the W2.\n     * @type {string}\n     * @memberof W2\n     */\n    box_9?: string | null;\n    /**\n     * Dependent care benefits.\n     * @type {string}\n     * @memberof W2\n     */\n    dependent_care_benefits?: string | null;\n    /**\n     * Nonqualified plans.\n     * @type {string}\n     * @memberof W2\n     */\n    nonqualified_plans?: string | null;\n    /**\n     * \n     * @type {Array<W2Box12>}\n     * @memberof W2\n     */\n    box_12?: Array<W2Box12>;\n    /**\n     * Statutory employee.\n     * @type {string}\n     * @memberof W2\n     */\n    statutory_employee?: string | null;\n    /**\n     * Retirement plan.\n     * @type {string}\n     * @memberof W2\n     */\n    retirement_plan?: string | null;\n    /**\n     * Third party sick pay.\n     * @type {string}\n     * @memberof W2\n     */\n    third_party_sick_pay?: string | null;\n    /**\n     * Other.\n     * @type {string}\n     * @memberof W2\n     */\n    other?: string | null;\n    /**\n     * \n     * @type {Array<W2StateAndLocalWages>}\n     * @memberof W2\n     */\n    state_and_local_wages?: Array<W2StateAndLocalWages>;\n}\n/**\n * Data on the W2 Box 12\n * @export\n * @interface W2Box12\n */\nexport interface W2Box12 {\n    [key: string]: object | any;\n\n    /**\n     * W2 Box 12 code.\n     * @type {string}\n     * @memberof W2Box12\n     */\n    code?: string | null;\n    /**\n     * W2 Box 12 amount.\n     * @type {string}\n     * @memberof W2Box12\n     */\n    amount?: string | null;\n}\n/**\n * W2 state and local wages\n * @export\n * @interface W2StateAndLocalWages\n */\nexport interface W2StateAndLocalWages {\n    [key: string]: object | any;\n\n    /**\n     * State associated with the wage.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    state?: string | null;\n    /**\n     * State identification number of the employer.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    employer_state_id_number?: string | null;\n    /**\n     * Wages and tips from the specified state.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    state_wages_tips?: string | null;\n    /**\n     * Income tax from the specified state.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    state_income_tax?: string | null;\n    /**\n     * Wages and tips from the locality.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    local_wages_tips?: string | null;\n    /**\n     * Income tax from the locality.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    local_income_tax?: string | null;\n    /**\n     * Name of the locality.\n     * @type {string}\n     * @memberof W2StateAndLocalWages\n     */\n    locality_name?: string | null;\n}\n/**\n * An object representing the e-wallet balance\n * @export\n * @interface WalletBalance\n */\nexport interface WalletBalance {\n    [key: string]: object | any;\n\n    /**\n     * The ISO-4217 currency code of the balance\n     * @type {string}\n     * @memberof WalletBalance\n     */\n    iso_currency_code: string;\n    /**\n     * The total amount of funds in the account\n     * @type {number}\n     * @memberof WalletBalance\n     */\n    current: number;\n}\n/**\n * WalletGetRequest defines the request schema for `/wallet/get`\n * @export\n * @interface WalletGetRequest\n */\nexport interface WalletGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletGetRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the e-wallet\n     * @type {string}\n     * @memberof WalletGetRequest\n     */\n    wallet_id: string;\n}\n/**\n * WalletGetResponse defines the response schema for `/wallet/get`\n * @export\n * @interface WalletGetResponse\n */\nexport interface WalletGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the e-wallet\n     * @type {string}\n     * @memberof WalletGetResponse\n     */\n    wallet_id: string;\n    /**\n     * \n     * @type {WalletBalance}\n     * @memberof WalletGetResponse\n     */\n    balance: WalletBalance | null;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof WalletGetResponse\n     */\n    request_id: string;\n}\n/**\n * The transaction details\n * @export\n * @interface WalletTransaction\n */\nexport interface WalletTransaction {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the transaction\n     * @type {string}\n     * @memberof WalletTransaction\n     */\n    transaction_id: string;\n    /**\n     * A reference for the transaction\n     * @type {string}\n     * @memberof WalletTransaction\n     */\n    reference: string;\n    /**\n     * The type of of the transaction. Currently, only `\\\"PAYOUT\\\"` is supported.\n     * @type {string}\n     * @memberof WalletTransaction\n     */\n    type: WalletTransactionTypeEnum;\n    /**\n     * \n     * @type {WalletTransactionAmount}\n     * @memberof WalletTransaction\n     */\n    amount: WalletTransactionAmount;\n    /**\n     * \n     * @type {WalletTransactionCounterparty}\n     * @memberof WalletTransaction\n     */\n    counterparty: WalletTransactionCounterparty;\n    /**\n     * \n     * @type {WalletTransactionStatus}\n     * @memberof WalletTransaction\n     */\n    status: WalletTransactionStatus;\n    /**\n     * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.\n     * @type {string}\n     * @memberof WalletTransaction\n     */\n    created_at: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WalletTransactionTypeEnum {\n    Payout = 'PAYOUT'\n}\n\n/**\n * The amount and currency of a transaction\n * @export\n * @interface WalletTransactionAmount\n */\nexport interface WalletTransactionAmount {\n    [key: string]: object | any;\n\n    /**\n     * The ISO-4217 currency code of the transaction. Currently, only `\\\"GBP\\\"` is supported.\n     * @type {string}\n     * @memberof WalletTransactionAmount\n     */\n    iso_currency_code: WalletTransactionAmountIsoCurrencyCodeEnum;\n    /**\n     * The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.\n     * @type {number}\n     * @memberof WalletTransactionAmount\n     */\n    value: number;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WalletTransactionAmountIsoCurrencyCodeEnum {\n    Gbp = 'GBP'\n}\n\n/**\n * An object representing the e-wallet transaction\\'s counterparty\n * @export\n * @interface WalletTransactionCounterparty\n */\nexport interface WalletTransactionCounterparty {\n    [key: string]: object | any;\n\n    /**\n     * The name of the counterparty\n     * @type {string}\n     * @memberof WalletTransactionCounterparty\n     */\n    name: string;\n    /**\n     * \n     * @type {WalletTransactionCounterpartyNumbers}\n     * @memberof WalletTransactionCounterparty\n     */\n    numbers: WalletTransactionCounterpartyNumbers;\n}\n/**\n * The account number and sort code of the counterparty\\'s account\n * @export\n * @interface WalletTransactionCounterpartyBACS\n */\nexport interface WalletTransactionCounterpartyBACS {\n    /**\n     * The account number of the account. Maximum of 10 characters.\n     * @type {string}\n     * @memberof WalletTransactionCounterpartyBACS\n     */\n    account?: string;\n    /**\n     * The 6-character sort code of the account.\n     * @type {string}\n     * @memberof WalletTransactionCounterpartyBACS\n     */\n    sort_code?: string;\n}\n/**\n * The counterparty\\'s bank account numbers\n * @export\n * @interface WalletTransactionCounterpartyNumbers\n */\nexport interface WalletTransactionCounterpartyNumbers {\n    /**\n     * \n     * @type {WalletTransactionCounterpartyBACS}\n     * @memberof WalletTransactionCounterpartyNumbers\n     */\n    bacs: WalletTransactionCounterpartyBACS;\n}\n/**\n * WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute`\n * @export\n * @interface WalletTransactionExecuteRequest\n */\nexport interface WalletTransactionExecuteRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    secret?: string;\n    /**\n     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.\n     * @type {string}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    idempotency_key: string;\n    /**\n     * The ID of the e-wallet to debit from\n     * @type {string}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    wallet_id: string;\n    /**\n     * \n     * @type {WalletTransactionCounterparty}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    counterparty: WalletTransactionCounterparty;\n    /**\n     * \n     * @type {WalletTransactionAmount}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    amount: WalletTransactionAmount;\n    /**\n     * A reference for the transaction. This must be an alphanumeric string with at most 18 characters and must not contain any special characters or spaces.\n     * @type {string}\n     * @memberof WalletTransactionExecuteRequest\n     */\n    reference: string;\n}\n/**\n * WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute`\n * @export\n * @interface WalletTransactionExecuteResponse\n */\nexport interface WalletTransactionExecuteResponse {\n    [key: string]: object | any;\n\n    /**\n     * A unique ID identifying the transaction\n     * @type {string}\n     * @memberof WalletTransactionExecuteResponse\n     */\n    transaction_id: string;\n    /**\n     * \n     * @type {WalletTransactionStatus}\n     * @memberof WalletTransactionExecuteResponse\n     */\n    status: WalletTransactionStatus;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof WalletTransactionExecuteResponse\n     */\n    request_id: string;\n}\n/**\n * The status of the transaction.  `INITIATED`: This is the initial state of all transactions. It indicates that the transaction has been initiated and is currently being processed.  `EXECUTED`: The transaction has been successfully executed.  `FAILED`: The transaction failed to process successfully. This is a terminal status.  `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.\n * @export\n * @enum {string}\n */\nexport enum WalletTransactionStatus {\n    Initiated = 'INITIATED',\n    Executed = 'EXECUTED',\n    Blocked = 'BLOCKED',\n    Failed = 'FAILED'\n}\n\n/**\n * WalletTransactionsListRequest defines the request schema for `/wallet/transactions/list`\n * @export\n * @interface WalletTransactionsListRequest\n */\nexport interface WalletTransactionsListRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletTransactionsListRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof WalletTransactionsListRequest\n     */\n    secret?: string;\n    /**\n     * The ID of the e-wallet to fetch transactions from\n     * @type {string}\n     * @memberof WalletTransactionsListRequest\n     */\n    wallet_id: string;\n    /**\n     * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transactions/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.\n     * @type {string}\n     * @memberof WalletTransactionsListRequest\n     */\n    cursor?: string;\n    /**\n     * The number of transactions to fetch\n     * @type {number}\n     * @memberof WalletTransactionsListRequest\n     */\n    count?: number;\n}\n/**\n * WalletTransactionsListResponse defines the response schema for `/wallet/transactions/list`\n * @export\n * @interface WalletTransactionsListResponse\n */\nexport interface WalletTransactionsListResponse {\n    [key: string]: object | any;\n\n    /**\n     * An array of transactions of an e-wallet, associated with the given `wallet_id`\n     * @type {Array<WalletTransaction>}\n     * @memberof WalletTransactionsListResponse\n     */\n    transactions: Array<WalletTransaction>;\n    /**\n     * Cursor used for fetching transactions created before the latest transaction provided in this response\n     * @type {string}\n     * @memberof WalletTransactionsListResponse\n     */\n    next_cursor?: string;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof WalletTransactionsListResponse\n     */\n    request_id: string;\n}\n/**\n * It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.\n * @export\n * @interface Warning\n */\nexport interface Warning {\n    [key: string]: object | any;\n\n    /**\n     * The warning type, which will always be `ASSET_REPORT_WARNING`\n     * @type {string}\n     * @memberof Warning\n     */\n    warning_type: string;\n    /**\n     * The warning code identifies a specific kind of warning. Currently, the only possible warning code is `OWNERS_UNAVAILABLE`, which indicates that account-owner information is not available.\n     * @type {string}\n     * @memberof Warning\n     */\n    warning_code: WarningWarningCodeEnum;\n    /**\n     * \n     * @type {Cause}\n     * @memberof Warning\n     */\n    cause: Cause;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WarningWarningCodeEnum {\n    OwnersUnavailable = 'OWNERS_UNAVAILABLE'\n}\n\n/**\n * Fired when an Item\\'s webhook is updated. This will be sent to the newly specified webhook.\n * @export\n * @interface WebhookUpdateAcknowledgedWebhook\n */\nexport interface WebhookUpdateAcknowledgedWebhook {\n    [key: string]: object | any;\n\n    /**\n     * `ITEM`\n     * @type {string}\n     * @memberof WebhookUpdateAcknowledgedWebhook\n     */\n    webhook_type: string;\n    /**\n     * `WEBHOOK_UPDATE_ACKNOWLEDGED`\n     * @type {string}\n     * @memberof WebhookUpdateAcknowledgedWebhook\n     */\n    webhook_code: string;\n    /**\n     * The `item_id` of the Item associated with this webhook, warning, or error\n     * @type {string}\n     * @memberof WebhookUpdateAcknowledgedWebhook\n     */\n    item_id: string;\n    /**\n     * The new webhook URL\n     * @type {string}\n     * @memberof WebhookUpdateAcknowledgedWebhook\n     */\n    new_webhook_url: string;\n    /**\n     * \n     * @type {PlaidError}\n     * @memberof WebhookUpdateAcknowledgedWebhook\n     */\n    error?: PlaidError;\n}\n/**\n * WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get`\n * @export\n * @interface WebhookVerificationKeyGetRequest\n */\nexport interface WebhookVerificationKeyGetRequest {\n    /**\n     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.\n     * @type {string}\n     * @memberof WebhookVerificationKeyGetRequest\n     */\n    client_id?: string;\n    /**\n     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.\n     * @type {string}\n     * @memberof WebhookVerificationKeyGetRequest\n     */\n    secret?: string;\n    /**\n     * The key ID ( `kid` ) from the JWT header.\n     * @type {string}\n     * @memberof WebhookVerificationKeyGetRequest\n     */\n    key_id: string;\n}\n/**\n * WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get`\n * @export\n * @interface WebhookVerificationKeyGetResponse\n */\nexport interface WebhookVerificationKeyGetResponse {\n    [key: string]: object | any;\n\n    /**\n     * \n     * @type {JWKPublicKey}\n     * @memberof WebhookVerificationKeyGetResponse\n     */\n    key: JWKPublicKey;\n    /**\n     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.\n     * @type {string}\n     * @memberof WebhookVerificationKeyGetResponse\n     */\n    request_id: string;\n}\n/**\n * Year-to-date pre-tax earnings, as reported on the paystub.\n * @export\n * @interface YTDGrossIncomeSummaryFieldNumber\n */\nexport interface YTDGrossIncomeSummaryFieldNumber {\n    /**\n     * The value of the field.\n     * @type {number}\n     * @memberof YTDGrossIncomeSummaryFieldNumber\n     */\n    value: number;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof YTDGrossIncomeSummaryFieldNumber\n     */\n    verification_status: VerificationStatus;\n}\n/**\n * Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub.\n * @export\n * @interface YTDNetIncomeSummaryFieldNumber\n */\nexport interface YTDNetIncomeSummaryFieldNumber {\n    /**\n     * The value of the field.\n     * @type {number}\n     * @memberof YTDNetIncomeSummaryFieldNumber\n     */\n    value: number;\n    /**\n     * \n     * @type {VerificationStatus}\n     * @memberof YTDNetIncomeSummaryFieldNumber\n     */\n    verification_status: VerificationStatus;\n}\n\n/**\n * PlaidApi - axios parameter creator\n * @export\n */\nexport const PlaidApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n         * @summary Retrieve real-time balance data\n         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountsBalanceGet: async (accountsBalanceGetRequest: AccountsBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountsBalanceGetRequest' is not null or undefined\n            assertParamExists('accountsBalanceGet', 'accountsBalanceGetRequest', accountsBalanceGetRequest)\n            const localVarPath = `/accounts/balance/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n         * @summary Retrieve accounts\n         * @param {AccountsGetRequest} accountsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountsGet: async (accountsGetRequest: AccountsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountsGetRequest' is not null or undefined\n            assertParamExists('accountsGet', 'accountsGetRequest', accountsGetRequest)\n            const localVarPath = `/accounts/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n         * @summary Retrieve information about a Plaid application\n         * @param {ApplicationGetRequest} applicationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        applicationGet: async (applicationGetRequest: ApplicationGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'applicationGetRequest' is not null or undefined\n            assertParamExists('applicationGet', 'applicationGetRequest', applicationGetRequest)\n            const localVarPath = `/application/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n         * @summary Create Asset Report Audit Copy\n         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyCreate: async (assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportAuditCopyCreateRequest' is not null or undefined\n            assertParamExists('assetReportAuditCopyCreate', 'assetReportAuditCopyCreateRequest', assetReportAuditCopyCreateRequest)\n            const localVarPath = `/asset_report/audit_copy/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n         * @summary Retrieve an Asset Report Audit Copy\n         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyGet: async (assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportAuditCopyGetRequest' is not null or undefined\n            assertParamExists('assetReportAuditCopyGet', 'assetReportAuditCopyGetRequest', assetReportAuditCopyGetRequest)\n            const localVarPath = `/asset_report/audit_copy/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n         * @summary Remove Asset Report Audit Copy\n         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyRemove: async (assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportAuditCopyRemoveRequest' is not null or undefined\n            assertParamExists('assetReportAuditCopyRemove', 'assetReportAuditCopyRemoveRequest', assetReportAuditCopyRemoveRequest)\n            const localVarPath = `/asset_report/audit_copy/remove`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n         * @summary Create an Asset Report\n         * @param {AssetReportCreateRequest} assetReportCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportCreate: async (assetReportCreateRequest: AssetReportCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportCreateRequest' is not null or undefined\n            assertParamExists('assetReportCreate', 'assetReportCreateRequest', assetReportCreateRequest)\n            const localVarPath = `/asset_report/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n         * @summary Filter Asset Report\n         * @param {AssetReportFilterRequest} assetReportFilterRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportFilter: async (assetReportFilterRequest: AssetReportFilterRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportFilterRequest' is not null or undefined\n            assertParamExists('assetReportFilter', 'assetReportFilterRequest', assetReportFilterRequest)\n            const localVarPath = `/asset_report/filter`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n         * @summary Retrieve an Asset Report\n         * @param {AssetReportGetRequest} assetReportGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportGet: async (assetReportGetRequest: AssetReportGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportGetRequest' is not null or undefined\n            assertParamExists('assetReportGet', 'assetReportGetRequest', assetReportGetRequest)\n            const localVarPath = `/asset_report/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n         * @summary Retrieve a PDF Asset Report\n         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportPdfGet: async (assetReportPDFGetRequest: AssetReportPDFGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportPDFGetRequest' is not null or undefined\n            assertParamExists('assetReportPdfGet', 'assetReportPDFGetRequest', assetReportPDFGetRequest)\n            const localVarPath = `/asset_report/pdf/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n         * @summary Refresh an Asset Report\n         * @param {AssetReportRefreshRequest} assetReportRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportRefresh: async (assetReportRefreshRequest: AssetReportRefreshRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportRefreshRequest' is not null or undefined\n            assertParamExists('assetReportRefresh', 'assetReportRefreshRequest', assetReportRefreshRequest)\n            const localVarPath = `/asset_report/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n         * @summary Delete an Asset Report\n         * @param {AssetReportRemoveRequest} assetReportRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportRemove: async (assetReportRemoveRequest: AssetReportRemoveRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'assetReportRemoveRequest' is not null or undefined\n            assertParamExists('assetReportRemove', 'assetReportRemoveRequest', assetReportRemoveRequest)\n            const localVarPath = `/asset_report/remove`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n         * @summary Retrieve auth data\n         * @param {AuthGetRequest} authGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authGet: async (authGetRequest: AuthGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authGetRequest' is not null or undefined\n            assertParamExists('authGet', 'authGetRequest', authGetRequest)\n            const localVarPath = `/auth/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n         * @summary Get balance of your Bank Transfer account\n         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferBalanceGet: async (bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferBalanceGetRequest' is not null or undefined\n            assertParamExists('bankTransferBalanceGet', 'bankTransferBalanceGetRequest', bankTransferBalanceGetRequest)\n            const localVarPath = `/bank_transfer/balance/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n         * @summary Cancel a bank transfer\n         * @param {BankTransferCancelRequest} bankTransferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferCancel: async (bankTransferCancelRequest: BankTransferCancelRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferCancelRequest' is not null or undefined\n            assertParamExists('bankTransferCancel', 'bankTransferCancelRequest', bankTransferCancelRequest)\n            const localVarPath = `/bank_transfer/cancel`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n         * @summary Create a bank transfer\n         * @param {BankTransferCreateRequest} bankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferCreate: async (bankTransferCreateRequest: BankTransferCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferCreateRequest' is not null or undefined\n            assertParamExists('bankTransferCreate', 'bankTransferCreateRequest', bankTransferCreateRequest)\n            const localVarPath = `/bank_transfer/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n         * @summary List bank transfer events\n         * @param {BankTransferEventListRequest} bankTransferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferEventList: async (bankTransferEventListRequest: BankTransferEventListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferEventListRequest' is not null or undefined\n            assertParamExists('bankTransferEventList', 'bankTransferEventListRequest', bankTransferEventListRequest)\n            const localVarPath = `/bank_transfer/event/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n         * @summary Sync bank transfer events\n         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferEventSync: async (bankTransferEventSyncRequest: BankTransferEventSyncRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferEventSyncRequest' is not null or undefined\n            assertParamExists('bankTransferEventSync', 'bankTransferEventSyncRequest', bankTransferEventSyncRequest)\n            const localVarPath = `/bank_transfer/event/sync`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n         * @summary Retrieve a bank transfer\n         * @param {BankTransferGetRequest} bankTransferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferGet: async (bankTransferGetRequest: BankTransferGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferGetRequest' is not null or undefined\n            assertParamExists('bankTransferGet', 'bankTransferGetRequest', bankTransferGetRequest)\n            const localVarPath = `/bank_transfer/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. \n         * @summary List bank transfers\n         * @param {BankTransferListRequest} bankTransferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferList: async (bankTransferListRequest: BankTransferListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferListRequest' is not null or undefined\n            assertParamExists('bankTransferList', 'bankTransferListRequest', bankTransferListRequest)\n            const localVarPath = `/bank_transfer/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n         * @summary Migrate account into Bank Transfers\n         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferMigrateAccount: async (bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferMigrateAccountRequest' is not null or undefined\n            assertParamExists('bankTransferMigrateAccount', 'bankTransferMigrateAccountRequest', bankTransferMigrateAccountRequest)\n            const localVarPath = `/bank_transfer/migrate_account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferSweepGet: async (bankTransferSweepGetRequest: BankTransferSweepGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferSweepGetRequest' is not null or undefined\n            assertParamExists('bankTransferSweepGet', 'bankTransferSweepGetRequest', bankTransferSweepGetRequest)\n            const localVarPath = `/bank_transfer/sweep/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferSweepList: async (bankTransferSweepListRequest: BankTransferSweepListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bankTransferSweepListRequest' is not null or undefined\n            assertParamExists('bankTransferSweepList', 'bankTransferSweepListRequest', bankTransferSweepListRequest)\n            const localVarPath = `/bank_transfer/sweep/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n         * @summary Get Categories\n         * @param {object} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        categoriesGet: async (body: object, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('categoriesGet', 'body', body)\n            const localVarPath = `/categories/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n         * @summary Create payment token\n         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPaymentToken: async (paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationPaymentTokenCreateRequest' is not null or undefined\n            assertParamExists('createPaymentToken', 'paymentInitiationPaymentTokenCreateRequest', paymentInitiationPaymentTokenCreateRequest)\n            const localVarPath = `/payment_initiation/payment/token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch without using Plaid Exchange\n         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchAltCreate: async (depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'depositSwitchAltCreateRequest' is not null or undefined\n            assertParamExists('depositSwitchAltCreate', 'depositSwitchAltCreateRequest', depositSwitchAltCreateRequest)\n            const localVarPath = `/deposit_switch/alt/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch\n         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchCreate: async (depositSwitchCreateRequest: DepositSwitchCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'depositSwitchCreateRequest' is not null or undefined\n            assertParamExists('depositSwitchCreate', 'depositSwitchCreateRequest', depositSwitchCreateRequest)\n            const localVarPath = `/deposit_switch/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n         * @summary Retrieve a deposit switch\n         * @param {DepositSwitchGetRequest} depositSwitchGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchGet: async (depositSwitchGetRequest: DepositSwitchGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'depositSwitchGetRequest' is not null or undefined\n            assertParamExists('depositSwitchGet', 'depositSwitchGetRequest', depositSwitchGetRequest)\n            const localVarPath = `/deposit_switch/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. \n         * @summary Create a deposit switch token\n         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchTokenCreate: async (depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'depositSwitchTokenCreateRequest' is not null or undefined\n            assertParamExists('depositSwitchTokenCreate', 'depositSwitchTokenCreateRequest', depositSwitchTokenCreateRequest)\n            const localVarPath = `/deposit_switch/token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n         * @summary Search employer database\n         * @param {EmployersSearchRequest} employersSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        employersSearch: async (employersSearchRequest: EmployersSearchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'employersSearchRequest' is not null or undefined\n            assertParamExists('employersSearch', 'employersSearchRequest', employersSearchRequest)\n            const localVarPath = `/employers/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n         * @summary Retrieve a summary of an individual\\'s employment information\n         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        employmentVerificationGet: async (employmentVerificationGetRequest: EmploymentVerificationGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'employmentVerificationGetRequest' is not null or undefined\n            assertParamExists('employmentVerificationGet', 'employmentVerificationGetRequest', employmentVerificationGetRequest)\n            const localVarPath = `/employment/verification/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n         * @summary Retrieve identity data\n         * @param {IdentityGetRequest} identityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        identityGet: async (identityGetRequest: IdentityGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'identityGetRequest' is not null or undefined\n            assertParamExists('identityGet', 'identityGetRequest', identityGetRequest)\n            const localVarPath = `/identity/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. \n         * @summary (Deprecated) Create an income verification instance\n         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationCreate: async (incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationCreateRequest' is not null or undefined\n            assertParamExists('incomeVerificationCreate', 'incomeVerificationCreateRequest', incomeVerificationCreateRequest)\n            const localVarPath = `/income/verification/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n         * @summary Download the original documents used for income verification\n         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationDocumentsDownload: async (incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationDocumentsDownloadRequest' is not null or undefined\n            assertParamExists('incomeVerificationDocumentsDownload', 'incomeVerificationDocumentsDownloadRequest', incomeVerificationDocumentsDownloadRequest)\n            const localVarPath = `/income/verification/documents/download`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * /income/verification/paystub/get returns information from a single paystub used for income verification\n         * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n         * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPaystubGet: async (incomeVerificationPaystubGetRequest: IncomeVerificationPaystubGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationPaystubGetRequest' is not null or undefined\n            assertParamExists('incomeVerificationPaystubGet', 'incomeVerificationPaystubGetRequest', incomeVerificationPaystubGetRequest)\n            const localVarPath = `/income/verification/paystub/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationPaystubGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the paystubs used for income verification\n         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPaystubsGet: async (incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationPaystubsGetRequest' is not null or undefined\n            assertParamExists('incomeVerificationPaystubsGet', 'incomeVerificationPaystubsGetRequest', incomeVerificationPaystubsGetRequest)\n            const localVarPath = `/income/verification/paystubs/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n         * @summary Check digital income verification eligibility and optimize conversion\n         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPrecheck: async (incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationPrecheckRequest' is not null or undefined\n            assertParamExists('incomeVerificationPrecheck', 'incomeVerificationPrecheckRequest', incomeVerificationPrecheckRequest)\n            const localVarPath = `/income/verification/precheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/refresh` refreshes a given income verification.\n         * @summary Refresh an income verification\n         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationRefresh: async (incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationRefreshRequest' is not null or undefined\n            assertParamExists('incomeVerificationRefresh', 'incomeVerificationRefreshRequest', incomeVerificationRefreshRequest)\n            const localVarPath = `/income/verification/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationRefreshRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary (Deprecated) Retrieve a summary of information derived from income verification\n         * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationSummaryGet: async (incomeVerificationSummaryGetRequest: IncomeVerificationSummaryGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'incomeVerificationSummaryGetRequest' is not null or undefined\n            assertParamExists('incomeVerificationSummaryGet', 'incomeVerificationSummaryGetRequest', incomeVerificationSummaryGetRequest)\n            const localVarPath = `/income/verification/summary/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(incomeVerificationSummaryGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the tax documents used for income verification\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationTaxformsGet: async (requestBody: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'requestBody' is not null or undefined\n            assertParamExists('incomeVerificationTaxformsGet', 'requestBody', requestBody)\n            const localVarPath = `/income/verification/taxforms/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n         * @summary Get details of all supported institutions\n         * @param {InstitutionsGetRequest} institutionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsGet: async (institutionsGetRequest: InstitutionsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'institutionsGetRequest' is not null or undefined\n            assertParamExists('institutionsGet', 'institutionsGetRequest', institutionsGetRequest)\n            const localVarPath = `/institutions/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Get details of an institution\n         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsGetById: async (institutionsGetByIdRequest: InstitutionsGetByIdRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'institutionsGetByIdRequest' is not null or undefined\n            assertParamExists('institutionsGetById', 'institutionsGetByIdRequest', institutionsGetByIdRequest)\n            const localVarPath = `/institutions/get_by_id`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Search institutions\n         * @param {InstitutionsSearchRequest} institutionsSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsSearch: async (institutionsSearchRequest: InstitutionsSearchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'institutionsSearchRequest' is not null or undefined\n            assertParamExists('institutionsSearch', 'institutionsSearchRequest', institutionsSearchRequest)\n            const localVarPath = `/institutions/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n         * @summary Get Investment holdings\n         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        investmentsHoldingsGet: async (investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'investmentsHoldingsGetRequest' is not null or undefined\n            assertParamExists('investmentsHoldingsGet', 'investmentsHoldingsGetRequest', investmentsHoldingsGetRequest)\n            const localVarPath = `/investments/holdings/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n         * @summary Get investment transactions\n         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        investmentsTransactionsGet: async (investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'investmentsTransactionsGetRequest' is not null or undefined\n            assertParamExists('investmentsTransactionsGet', 'investmentsTransactionsGetRequest', investmentsTransactionsGetRequest)\n            const localVarPath = `/investments/transactions/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. \n         * @summary Invalidate access_token\n         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemAccessTokenInvalidate: async (itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemAccessTokenInvalidateRequest' is not null or undefined\n            assertParamExists('itemAccessTokenInvalidate', 'itemAccessTokenInvalidateRequest', itemAccessTokenInvalidateRequest)\n            const localVarPath = `/item/access_token/invalidate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List a userâ€™s connected applications\n         * @summary List a userâ€™s connected applications\n         * @param {ItemApplicationListRequest} itemApplicationListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemApplicationList: async (itemApplicationListRequest: ItemApplicationListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemApplicationListRequest' is not null or undefined\n            assertParamExists('itemApplicationList', 'itemApplicationListRequest', itemApplicationListRequest)\n            const localVarPath = `/item/application/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Enable consumers to update product access on selected accounts for an application.\n         * @summary Update the scopes of access for a particular application\n         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemApplicationScopesUpdate: async (itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemApplicationScopesUpdateRequest' is not null or undefined\n            assertParamExists('itemApplicationScopesUpdate', 'itemApplicationScopesUpdateRequest', itemApplicationScopesUpdateRequest)\n            const localVarPath = `/item/application/scopes/update`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n         * @summary Create public token\n         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemCreatePublicToken: async (itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemPublicTokenCreateRequest' is not null or undefined\n            assertParamExists('itemCreatePublicToken', 'itemPublicTokenCreateRequest', itemPublicTokenCreateRequest)\n            const localVarPath = `/item/public_token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the status of an Item.\n         * @summary Retrieve an Item\n         * @param {ItemGetRequest} itemGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemGet: async (itemGetRequest: ItemGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemGetRequest' is not null or undefined\n            assertParamExists('itemGet', 'itemGetRequest', itemGetRequest)\n            const localVarPath = `/item/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n         * @summary Import Item\n         * @param {ItemImportRequest} itemImportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemImport: async (itemImportRequest: ItemImportRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemImportRequest' is not null or undefined\n            assertParamExists('itemImport', 'itemImportRequest', itemImportRequest)\n            const localVarPath = `/item/import`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n         * @summary Exchange public token for an access token\n         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemPublicTokenExchange: async (itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined\n            assertParamExists('itemPublicTokenExchange', 'itemPublicTokenExchangeRequest', itemPublicTokenExchangeRequest)\n            const localVarPath = `/item/public_token/exchange`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n         * @summary Remove an Item\n         * @param {ItemRemoveRequest} itemRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemRemove: async (itemRemoveRequest: ItemRemoveRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemRemoveRequest' is not null or undefined\n            assertParamExists('itemRemove', 'itemRemoveRequest', itemRemoveRequest)\n            const localVarPath = `/item/remove`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n         * @summary Update Webhook URL\n         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemWebhookUpdate: async (itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'itemWebhookUpdateRequest' is not null or undefined\n            assertParamExists('itemWebhookUpdate', 'itemWebhookUpdateRequest', itemWebhookUpdateRequest)\n            const localVarPath = `/item/webhook/update`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n         * @summary Retrieve Liabilities data\n         * @param {LiabilitiesGetRequest} liabilitiesGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        liabilitiesGet: async (liabilitiesGetRequest: LiabilitiesGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'liabilitiesGetRequest' is not null or undefined\n            assertParamExists('liabilitiesGet', 'liabilitiesGetRequest', liabilitiesGetRequest)\n            const localVarPath = `/liabilities/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n         * @summary Create Link Token\n         * @param {LinkTokenCreateRequest} linkTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTokenCreate: async (linkTokenCreateRequest: LinkTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'linkTokenCreateRequest' is not null or undefined\n            assertParamExists('linkTokenCreate', 'linkTokenCreateRequest', linkTokenCreateRequest)\n            const localVarPath = `/link/token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n         * @summary Get Link Token\n         * @param {LinkTokenGetRequest} linkTokenGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTokenGet: async (linkTokenGetRequest: LinkTokenGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'linkTokenGetRequest' is not null or undefined\n            assertParamExists('linkTokenGet', 'linkTokenGetRequest', linkTokenGetRequest)\n            const localVarPath = `/link/token/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n         * @summary Create a payment\n         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentCreate: async (paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationPaymentCreateRequest' is not null or undefined\n            assertParamExists('paymentInitiationPaymentCreate', 'paymentInitiationPaymentCreateRequest', paymentInitiationPaymentCreateRequest)\n            const localVarPath = `/payment_initiation/payment/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n         * @summary Get payment details\n         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentGet: async (paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationPaymentGetRequest' is not null or undefined\n            assertParamExists('paymentInitiationPaymentGet', 'paymentInitiationPaymentGetRequest', paymentInitiationPaymentGetRequest)\n            const localVarPath = `/payment_initiation/payment/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n         * @summary List payments\n         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentList: async (paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationPaymentListRequest' is not null or undefined\n            assertParamExists('paymentInitiationPaymentList', 'paymentInitiationPaymentListRequest', paymentInitiationPaymentListRequest)\n            const localVarPath = `/payment_initiation/payment/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account. \n         * @summary Reverse an existing payment\n         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentReverse: async (paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationPaymentReverseRequest' is not null or undefined\n            assertParamExists('paymentInitiationPaymentReverse', 'paymentInitiationPaymentReverseRequest', paymentInitiationPaymentReverseRequest)\n            const localVarPath = `/payment_initiation/payment/reverse`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. \n         * @summary Create payment recipient\n         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientCreate: async (paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationRecipientCreateRequest' is not null or undefined\n            assertParamExists('paymentInitiationRecipientCreate', 'paymentInitiationRecipientCreateRequest', paymentInitiationRecipientCreateRequest)\n            const localVarPath = `/payment_initiation/recipient/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get details about a payment recipient you have previously created.\n         * @summary Get payment recipient\n         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientGet: async (paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationRecipientGetRequest' is not null or undefined\n            assertParamExists('paymentInitiationRecipientGet', 'paymentInitiationRecipientGetRequest', paymentInitiationRecipientGetRequest)\n            const localVarPath = `/payment_initiation/recipient/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n         * @summary List payment recipients\n         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientList: async (paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'paymentInitiationRecipientListRequest' is not null or undefined\n            assertParamExists('paymentInitiationRecipientList', 'paymentInitiationRecipientListRequest', paymentInitiationRecipientListRequest)\n            const localVarPath = `/payment_initiation/recipient/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n         * @summary Create Apex bank account token\n         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorApexProcessorTokenCreate: async (processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorApexProcessorTokenCreateRequest' is not null or undefined\n            assertParamExists('processorApexProcessorTokenCreate', 'processorApexProcessorTokenCreateRequest', processorApexProcessorTokenCreateRequest)\n            const localVarPath = `/processor/apex/processor_token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). \n         * @summary Retrieve Auth data\n         * @param {ProcessorAuthGetRequest} processorAuthGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorAuthGet: async (processorAuthGetRequest: ProcessorAuthGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorAuthGetRequest' is not null or undefined\n            assertParamExists('processorAuthGet', 'processorAuthGetRequest', processorAuthGetRequest)\n            const localVarPath = `/processor/auth/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. \n         * @summary Retrieve Balance data\n         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorBalanceGet: async (processorBalanceGetRequest: ProcessorBalanceGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorBalanceGetRequest' is not null or undefined\n            assertParamExists('processorBalanceGet', 'processorBalanceGetRequest', processorBalanceGetRequest)\n            const localVarPath = `/processor/balance/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n         * @summary Create a bank transfer as a processor\n         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorBankTransferCreate: async (processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorBankTransferCreateRequest' is not null or undefined\n            assertParamExists('processorBankTransferCreate', 'processorBankTransferCreateRequest', processorBankTransferCreateRequest)\n            const localVarPath = `/processor/bank_transfer/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n         * @summary Retrieve Identity data\n         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorIdentityGet: async (processorIdentityGetRequest: ProcessorIdentityGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorIdentityGetRequest' is not null or undefined\n            assertParamExists('processorIdentityGet', 'processorIdentityGetRequest', processorIdentityGetRequest)\n            const localVarPath = `/processor/identity/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n         * @summary Create Stripe bank account token\n         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorStripeBankAccountTokenCreate: async (processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorStripeBankAccountTokenCreateRequest' is not null or undefined\n            assertParamExists('processorStripeBankAccountTokenCreate', 'processorStripeBankAccountTokenCreateRequest', processorStripeBankAccountTokenCreateRequest)\n            const localVarPath = `/processor/stripe/bank_account_token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n         * @summary Create processor token\n         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorTokenCreate: async (processorTokenCreateRequest: ProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'processorTokenCreateRequest' is not null or undefined\n            assertParamExists('processorTokenCreate', 'processorTokenCreateRequest', processorTokenCreateRequest)\n            const localVarPath = `/processor/token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n         * @summary Manually fire a Bank Transfer webhook\n         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxBankTransferFireWebhook: async (sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxBankTransferFireWebhookRequest' is not null or undefined\n            assertParamExists('sandboxBankTransferFireWebhook', 'sandboxBankTransferFireWebhookRequest', sandboxBankTransferFireWebhookRequest)\n            const localVarPath = `/sandbox/bank_transfer/fire_webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a bank transfer event in Sandbox\n         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxBankTransferSimulate: async (sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxBankTransferSimulateRequest' is not null or undefined\n            assertParamExists('sandboxBankTransferSimulate', 'sandboxBankTransferSimulateRequest', sandboxBankTransferSimulateRequest)\n            const localVarPath = `/sandbox/bank_transfer/simulate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n         * @summary Manually fire an Income webhook\n         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxIncomeFireWebhook: async (sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxIncomeFireWebhookRequest' is not null or undefined\n            assertParamExists('sandboxIncomeFireWebhook', 'sandboxIncomeFireWebhookRequest', sandboxIncomeFireWebhookRequest)\n            const localVarPath = `/sandbox/income/fire_webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n         * @summary Fire a test webhook\n         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemFireWebhook: async (sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxItemFireWebhookRequest' is not null or undefined\n            assertParamExists('sandboxItemFireWebhook', 'sandboxItemFireWebhookRequest', sandboxItemFireWebhookRequest)\n            const localVarPath = `/sandbox/item/fire_webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n         * @summary Force a Sandbox Item into an error state\n         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemResetLogin: async (sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxItemResetLoginRequest' is not null or undefined\n            assertParamExists('sandboxItemResetLogin', 'sandboxItemResetLoginRequest', sandboxItemResetLoginRequest)\n            const localVarPath = `/sandbox/item/reset_login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n         * @summary Set verification status for Sandbox account\n         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemSetVerificationStatus: async (sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxItemSetVerificationStatusRequest' is not null or undefined\n            assertParamExists('sandboxItemSetVerificationStatus', 'sandboxItemSetVerificationStatusRequest', sandboxItemSetVerificationStatusRequest)\n            const localVarPath = `/sandbox/item/set_verification_status`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Save the selected accounts when connecting to the Platypus Oauth institution\n         * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxOauthSelectAccounts: async (sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxOauthSelectAccountsRequest' is not null or undefined\n            assertParamExists('sandboxOauthSelectAccounts', 'sandboxOauthSelectAccountsRequest', sandboxOauthSelectAccountsRequest)\n            const localVarPath = `/sandbox/oauth/select_accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n         * @summary Create a test Item and processor token\n         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxProcessorTokenCreate: async (sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxProcessorTokenCreateRequest' is not null or undefined\n            assertParamExists('sandboxProcessorTokenCreate', 'sandboxProcessorTokenCreateRequest', sandboxProcessorTokenCreateRequest)\n            const localVarPath = `/sandbox/processor_token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n         * @summary Create a test Item\n         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxPublicTokenCreate: async (sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxPublicTokenCreateRequest' is not null or undefined\n            assertParamExists('sandboxPublicTokenCreate', 'sandboxPublicTokenCreateRequest', sandboxPublicTokenCreateRequest)\n            const localVarPath = `/sandbox/public_token/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n         * @summary Trigger the creation of a repayment\n         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferRepaymentSimulate: async (sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxTransferRepaymentSimulateRequest' is not null or undefined\n            assertParamExists('sandboxTransferRepaymentSimulate', 'sandboxTransferRepaymentSimulateRequest', sandboxTransferRepaymentSimulateRequest)\n            const localVarPath = `/sandbox/transfer/repayment/simulate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a transfer event in Sandbox\n         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferSimulate: async (sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxTransferSimulateRequest' is not null or undefined\n            assertParamExists('sandboxTransferSimulate', 'sandboxTransferSimulateRequest', sandboxTransferSimulateRequest)\n            const localVarPath = `/sandbox/transfer/simulate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n         * @summary Simulate creating a sweep\n         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferSweepSimulate: async (sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'sandboxTransferSweepSimulateRequest' is not null or undefined\n            assertParamExists('sandboxTransferSweepSimulate', 'sandboxTransferSweepSimulateRequest', sandboxTransferSweepSimulateRequest)\n            const localVarPath = `/sandbox/transfer/sweep/simulate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n         * @summary Report whether you initiated an ACH transaction\n         * @param {SignalDecisionReportRequest} signalDecisionReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalDecisionReport: async (signalDecisionReportRequest: SignalDecisionReportRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'signalDecisionReportRequest' is not null or undefined\n            assertParamExists('signalDecisionReport', 'signalDecisionReportRequest', signalDecisionReportRequest)\n            const localVarPath = `/signal/decision/report`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n         * @summary Evaluate a planned ACH transaction\n         * @param {SignalEvaluateRequest} signalEvaluateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalEvaluate: async (signalEvaluateRequest: SignalEvaluateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'signalEvaluateRequest' is not null or undefined\n            assertParamExists('signalEvaluate', 'signalEvaluateRequest', signalEvaluateRequest)\n            const localVarPath = `/signal/evaluate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n         * @summary Report a return for an ACH transaction\n         * @param {SignalReturnReportRequest} signalReturnReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalReturnReport: async (signalReturnReportRequest: SignalReturnReportRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'signalReturnReportRequest' is not null or undefined\n            assertParamExists('signalReturnReport', 'signalReturnReportRequest', signalReturnReportRequest)\n            const localVarPath = `/signal/return/report`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n         * @summary Get transaction data\n         * @param {TransactionsGetRequest} transactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsGet: async (transactionsGetRequest: TransactionsGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transactionsGetRequest' is not null or undefined\n            assertParamExists('transactionsGet', 'transactionsGetRequest', transactionsGetRequest)\n            const localVarPath = `/transactions/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get streams of recurring transactions\n         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsRecurringGet: async (transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transactionsRecurringGetRequest' is not null or undefined\n            assertParamExists('transactionsRecurringGet', 'transactionsRecurringGetRequest', transactionsRecurringGetRequest)\n            const localVarPath = `/transactions/recurring/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n         * @summary Refresh transaction data\n         * @param {TransactionsRefreshRequest} transactionsRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsRefresh: async (transactionsRefreshRequest: TransactionsRefreshRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transactionsRefreshRequest' is not null or undefined\n            assertParamExists('transactionsRefresh', 'transactionsRefreshRequest', transactionsRefreshRequest)\n            const localVarPath = `/transactions/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get incremental transaction updates on an Item\n         * @param {TransactionsSyncRequest} transactionsSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsSync: async (transactionsSyncRequest: TransactionsSyncRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transactionsSyncRequest' is not null or undefined\n            assertParamExists('transactionsSync', 'transactionsSyncRequest', transactionsSyncRequest)\n            const localVarPath = `/transactions/sync`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n         * @summary Create a transfer authorization\n         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferAuthorizationCreate: async (transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferAuthorizationCreateRequest' is not null or undefined\n            assertParamExists('transferAuthorizationCreate', 'transferAuthorizationCreateRequest', transferAuthorizationCreateRequest)\n            const localVarPath = `/transfer/authorization/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n         * @summary Cancel a transfer\n         * @param {TransferCancelRequest} transferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferCancel: async (transferCancelRequest: TransferCancelRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferCancelRequest' is not null or undefined\n            assertParamExists('transferCancel', 'transferCancelRequest', transferCancelRequest)\n            const localVarPath = `/transfer/cancel`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/create` endpoint to initiate a new transfer.\n         * @summary Create a transfer\n         * @param {TransferCreateRequest} transferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferCreate: async (transferCreateRequest: TransferCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferCreateRequest' is not null or undefined\n            assertParamExists('transferCreate', 'transferCreateRequest', transferCreateRequest)\n            const localVarPath = `/transfer/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n         * @summary List transfer events\n         * @param {TransferEventListRequest} transferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferEventList: async (transferEventListRequest: TransferEventListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferEventListRequest' is not null or undefined\n            assertParamExists('transferEventList', 'transferEventListRequest', transferEventListRequest)\n            const localVarPath = `/transfer/event/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n         * @summary Sync transfer events\n         * @param {TransferEventSyncRequest} transferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferEventSync: async (transferEventSyncRequest: TransferEventSyncRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferEventSyncRequest' is not null or undefined\n            assertParamExists('transferEventSync', 'transferEventSyncRequest', transferEventSyncRequest)\n            const localVarPath = `/transfer/event/sync`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n         * @summary Retrieve a transfer\n         * @param {TransferGetRequest} transferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferGet: async (transferGetRequest: TransferGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferGetRequest' is not null or undefined\n            assertParamExists('transferGet', 'transferGetRequest', transferGetRequest)\n            const localVarPath = `/transfer/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n         * @summary Create a transfer intent object to invoke the Transfer UI\n         * @param {TransferIntentCreateRequest} transferIntentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferIntentCreate: async (transferIntentCreateRequest: TransferIntentCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferIntentCreateRequest' is not null or undefined\n            assertParamExists('transferIntentCreate', 'transferIntentCreateRequest', transferIntentCreateRequest)\n            const localVarPath = `/transfer/intent/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n         * @summary Retrieve more information about a transfer intent\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferIntentGet: async (requestBody: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'requestBody' is not null or undefined\n            assertParamExists('transferIntentGet', 'requestBody', requestBody)\n            const localVarPath = `/transfer/intent/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. \n         * @summary List transfers\n         * @param {TransferListRequest} transferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferList: async (transferListRequest: TransferListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferListRequest' is not null or undefined\n            assertParamExists('transferList', 'transferListRequest', transferListRequest)\n            const localVarPath = `/transfer/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n         * @summary Lists historical repayments\n         * @param {TransferRepaymentListRequest} transferRepaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferRepaymentList: async (transferRepaymentListRequest: TransferRepaymentListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferRepaymentListRequest' is not null or undefined\n            assertParamExists('transferRepaymentList', 'transferRepaymentListRequest', transferRepaymentListRequest)\n            const localVarPath = `/transfer/repayment/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n         * @summary List the returns included in a repayment\n         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferRepaymentReturnList: async (transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferRepaymentReturnListRequest' is not null or undefined\n            assertParamExists('transferRepaymentReturnList', 'transferRepaymentReturnListRequest', transferRepaymentReturnListRequest)\n            const localVarPath = `/transfer/repayment/return/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {TransferSweepGetRequest} transferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferSweepGet: async (transferSweepGetRequest: TransferSweepGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferSweepGetRequest' is not null or undefined\n            assertParamExists('transferSweepGet', 'transferSweepGetRequest', transferSweepGetRequest)\n            const localVarPath = `/transfer/sweep/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {TransferSweepListRequest} transferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferSweepList: async (transferSweepListRequest: TransferSweepListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'transferSweepListRequest' is not null or undefined\n            assertParamExists('transferSweepList', 'transferSweepListRequest', transferSweepListRequest)\n            const localVarPath = `/transfer/sweep/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch an e-wallet. The response includes the current balance. \n         * @summary Fetch an e-wallet\n         * @param {WalletGetRequest} walletGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletGet: async (walletGetRequest: WalletGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletGetRequest' is not null or undefined\n            assertParamExists('walletGet', 'walletGetRequest', walletGetRequest)\n            const localVarPath = `/wallet/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. \n         * @summary Execute a transaction using an e-wallet\n         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletTransactionExecute: async (walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletTransactionExecuteRequest' is not null or undefined\n            assertParamExists('walletTransactionExecute', 'walletTransactionExecuteRequest', walletTransactionExecuteRequest)\n            const localVarPath = `/wallet/transaction/execute`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. \n         * @summary List e-wallet transactions\n         * @param {WalletTransactionsListRequest} walletTransactionsListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletTransactionsList: async (walletTransactionsListRequest: WalletTransactionsListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletTransactionsListRequest' is not null or undefined\n            assertParamExists('walletTransactionsList', 'walletTransactionsListRequest', walletTransactionsListRequest)\n            const localVarPath = `/wallet/transactions/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(walletTransactionsListRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n         * @summary Get webhook verification key\n         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        webhookVerificationKeyGet: async (webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'webhookVerificationKeyGetRequest' is not null or undefined\n            assertParamExists('webhookVerificationKeyGet', 'webhookVerificationKeyGetRequest', webhookVerificationKeyGetRequest)\n            const localVarPath = `/webhook_verification_key/get`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication clientId required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-CLIENT-ID\", configuration)\n\n            // authentication plaidVersion required\n            await setApiKeyToObject(localVarHeaderParameter, \"Plaid-Version\", configuration)\n\n            // authentication secret required\n            await setApiKeyToObject(localVarHeaderParameter, \"PLAID-SECRET\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PlaidApi - functional programming interface\n * @export\n */\nexport const PlaidApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PlaidApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n         * @summary Retrieve real-time balance data\n         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n         * @summary Retrieve accounts\n         * @param {AccountsGetRequest} accountsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async accountsGet(accountsGetRequest: AccountsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n         * @summary Retrieve information about a Plaid application\n         * @param {ApplicationGetRequest} applicationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n         * @summary Create Asset Report Audit Copy\n         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportAuditCopyCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n         * @summary Retrieve an Asset Report Audit Copy\n         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n         * @summary Remove Asset Report Audit Copy\n         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportAuditCopyRemoveResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n         * @summary Create an Asset Report\n         * @param {AssetReportCreateRequest} assetReportCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n         * @summary Filter Asset Report\n         * @param {AssetReportFilterRequest} assetReportFilterRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportFilterResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n         * @summary Retrieve an Asset Report\n         * @param {AssetReportGetRequest} assetReportGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n         * @summary Retrieve a PDF Asset Report\n         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n         * @summary Refresh an Asset Report\n         * @param {AssetReportRefreshRequest} assetReportRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportRefreshResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n         * @summary Delete an Asset Report\n         * @param {AssetReportRemoveRequest} assetReportRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportRemoveResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n         * @summary Retrieve auth data\n         * @param {AuthGetRequest} authGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async authGet(authGetRequest: AuthGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.authGet(authGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n         * @summary Get balance of your Bank Transfer account\n         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferBalanceGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n         * @summary Cancel a bank transfer\n         * @param {BankTransferCancelRequest} bankTransferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferCancelResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n         * @summary Create a bank transfer\n         * @param {BankTransferCreateRequest} bankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n         * @summary List bank transfer events\n         * @param {BankTransferEventListRequest} bankTransferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferEventListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n         * @summary Sync bank transfer events\n         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferEventSyncResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n         * @summary Retrieve a bank transfer\n         * @param {BankTransferGetRequest} bankTransferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. \n         * @summary List bank transfers\n         * @param {BankTransferListRequest} bankTransferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n         * @summary Migrate account into Bank Transfers\n         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferMigrateAccountResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferSweepGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransferSweepListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n         * @summary Get Categories\n         * @param {object} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async categoriesGet(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n         * @summary Create payment token\n         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch without using Plaid Exchange\n         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchAltCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch\n         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n         * @summary Retrieve a deposit switch\n         * @param {DepositSwitchGetRequest} depositSwitchGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. \n         * @summary Create a deposit switch token\n         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepositSwitchTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n         * @summary Search employer database\n         * @param {EmployersSearchRequest} employersSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployersSearchResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n         * @summary Retrieve a summary of an individual\\'s employment information\n         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentVerificationGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n         * @summary Retrieve identity data\n         * @param {IdentityGetRequest} identityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async identityGet(identityGetRequest: IdentityGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.identityGet(identityGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. \n         * @summary (Deprecated) Create an income verification instance\n         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n         * @summary Download the original documents used for income verification\n         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * /income/verification/paystub/get returns information from a single paystub used for income verification\n         * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n         * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest: IncomeVerificationPaystubGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationPaystubGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the paystubs used for income verification\n         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationPaystubsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n         * @summary Check digital income verification eligibility and optimize conversion\n         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationPrecheckResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/refresh` refreshes a given income verification.\n         * @summary Refresh an income verification\n         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationRefresh(incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationRefreshResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationRefresh(incomeVerificationRefreshRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary (Deprecated) Retrieve a summary of information derived from income verification\n         * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest: IncomeVerificationSummaryGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationSummaryGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the tax documents used for income verification\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async incomeVerificationTaxformsGet(requestBody: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeVerificationTaxformsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeVerificationTaxformsGet(requestBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n         * @summary Get details of all supported institutions\n         * @param {InstitutionsGetRequest} institutionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Get details of an institution\n         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsGetByIdResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Search institutions\n         * @param {InstitutionsSearchRequest} institutionsSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsSearchResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n         * @summary Get Investment holdings\n         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsHoldingsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n         * @summary Get investment transactions\n         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentsTransactionsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. \n         * @summary Invalidate access_token\n         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemAccessTokenInvalidateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List a userâ€™s connected applications\n         * @summary List a userâ€™s connected applications\n         * @param {ItemApplicationListRequest} itemApplicationListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemApplicationListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Enable consumers to update product access on selected accounts for an application.\n         * @summary Update the scopes of access for a particular application\n         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemApplicationScopesUpdateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n         * @summary Create public token\n         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPublicTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the status of an Item.\n         * @summary Retrieve an Item\n         * @param {ItemGetRequest} itemGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemGet(itemGetRequest: ItemGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemGet(itemGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n         * @summary Import Item\n         * @param {ItemImportRequest} itemImportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemImport(itemImportRequest: ItemImportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemImportResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemImport(itemImportRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n         * @summary Exchange public token for an access token\n         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPublicTokenExchangeResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n         * @summary Remove an Item\n         * @param {ItemRemoveRequest} itemRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemRemoveResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n         * @summary Update Webhook URL\n         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemWebhookUpdateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n         * @summary Retrieve Liabilities data\n         * @param {LiabilitiesGetRequest} liabilitiesGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilitiesGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n         * @summary Create Link Token\n         * @param {LinkTokenCreateRequest} linkTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n         * @summary Get Link Token\n         * @param {LinkTokenGetRequest} linkTokenGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTokenGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n         * @summary Create a payment\n         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n         * @summary Get payment details\n         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n         * @summary List payments\n         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account. \n         * @summary Reverse an existing payment\n         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationPaymentReverseResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. \n         * @summary Create payment recipient\n         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get details about a payment recipient you have previously created.\n         * @summary Get payment recipient\n         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n         * @summary List payment recipients\n         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentInitiationRecipientListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n         * @summary Create Apex bank account token\n         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). \n         * @summary Retrieve Auth data\n         * @param {ProcessorAuthGetRequest} processorAuthGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorAuthGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. \n         * @summary Retrieve Balance data\n         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorBalanceGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n         * @summary Create a bank transfer as a processor\n         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorBankTransferCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n         * @summary Retrieve Identity data\n         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorIdentityGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n         * @summary Create Stripe bank account token\n         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorStripeBankAccountTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n         * @summary Create processor token\n         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n         * @summary Manually fire a Bank Transfer webhook\n         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxBankTransferFireWebhookResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a bank transfer event in Sandbox\n         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxBankTransferSimulateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n         * @summary Manually fire an Income webhook\n         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxIncomeFireWebhookResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n         * @summary Fire a test webhook\n         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemFireWebhookResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n         * @summary Force a Sandbox Item into an error state\n         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemResetLoginResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n         * @summary Set verification status for Sandbox account\n         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxItemSetVerificationStatusResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Save the selected accounts when connecting to the Platypus Oauth institution\n         * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n         * @summary Create a test Item and processor token\n         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxProcessorTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n         * @summary Create a test Item\n         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxPublicTokenCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n         * @summary Trigger the creation of a repayment\n         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferRepaymentSimulateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a transfer event in Sandbox\n         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferSimulateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n         * @summary Simulate creating a sweep\n         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxTransferSweepSimulateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n         * @summary Report whether you initiated an ACH transaction\n         * @param {SignalDecisionReportRequest} signalDecisionReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalDecisionReportResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n         * @summary Evaluate a planned ACH transaction\n         * @param {SignalEvaluateRequest} signalEvaluateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalEvaluateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n         * @summary Report a return for an ACH transaction\n         * @param {SignalReturnReportRequest} signalReturnReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignalReturnReportResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n         * @summary Get transaction data\n         * @param {TransactionsGetRequest} transactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get streams of recurring transactions\n         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRecurringGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n         * @summary Refresh transaction data\n         * @param {TransactionsRefreshRequest} transactionsRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsRefreshResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get incremental transaction updates on an Item\n         * @param {TransactionsSyncRequest} transactionsSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsSyncResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n         * @summary Create a transfer authorization\n         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferAuthorizationCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n         * @summary Cancel a transfer\n         * @param {TransferCancelRequest} transferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferCancel(transferCancelRequest: TransferCancelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCancelResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/create` endpoint to initiate a new transfer.\n         * @summary Create a transfer\n         * @param {TransferCreateRequest} transferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferCreate(transferCreateRequest: TransferCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n         * @summary List transfer events\n         * @param {TransferEventListRequest} transferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferEventList(transferEventListRequest: TransferEventListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferEventListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n         * @summary Sync transfer events\n         * @param {TransferEventSyncRequest} transferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferEventSyncResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n         * @summary Retrieve a transfer\n         * @param {TransferGetRequest} transferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferGet(transferGetRequest: TransferGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferGet(transferGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n         * @summary Create a transfer intent object to invoke the Transfer UI\n         * @param {TransferIntentCreateRequest} transferIntentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferIntentCreateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n         * @summary Retrieve more information about a transfer intent\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferIntentGet(requestBody: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferIntentGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferIntentGet(requestBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. \n         * @summary List transfers\n         * @param {TransferListRequest} transferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferList(transferListRequest: TransferListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferList(transferListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n         * @summary Lists historical repayments\n         * @param {TransferRepaymentListRequest} transferRepaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRepaymentListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n         * @summary List the returns included in a repayment\n         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferRepaymentReturnListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {TransferSweepGetRequest} transferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSweepGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {TransferSweepListRequest} transferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferSweepListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Fetch an e-wallet. The response includes the current balance. \n         * @summary Fetch an e-wallet\n         * @param {WalletGetRequest} walletGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async walletGet(walletGetRequest: WalletGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.walletGet(walletGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. \n         * @summary Execute a transaction using an e-wallet\n         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionExecuteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. \n         * @summary List e-wallet transactions\n         * @param {WalletTransactionsListRequest} walletTransactionsListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async walletTransactionsList(walletTransactionsListRequest: WalletTransactionsListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionsListResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionsList(walletTransactionsListRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n         * @summary Get webhook verification key\n         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookVerificationKeyGetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PlaidApi - factory interface\n * @export\n */\nexport const PlaidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PlaidApiFp(configuration)\n    return {\n        /**\n         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n         * @summary Retrieve real-time balance data\n         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {\n            return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n         * @summary Retrieve accounts\n         * @param {AccountsGetRequest} accountsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        accountsGet(accountsGetRequest: AccountsGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {\n            return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n         * @summary Retrieve information about a Plaid application\n         * @param {ApplicationGetRequest} applicationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any): AxiosPromise<ApplicationGetResponse> {\n            return localVarFp.applicationGet(applicationGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n         * @summary Create Asset Report Audit Copy\n         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any): AxiosPromise<AssetReportAuditCopyCreateResponse> {\n            return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n         * @summary Retrieve an Asset Report Audit Copy\n         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any): AxiosPromise<AssetReportGetResponse> {\n            return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n         * @summary Remove Asset Report Audit Copy\n         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any): AxiosPromise<AssetReportAuditCopyRemoveResponse> {\n            return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n         * @summary Create an Asset Report\n         * @param {AssetReportCreateRequest} assetReportCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any): AxiosPromise<AssetReportCreateResponse> {\n            return localVarFp.assetReportCreate(assetReportCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n         * @summary Filter Asset Report\n         * @param {AssetReportFilterRequest} assetReportFilterRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any): AxiosPromise<AssetReportFilterResponse> {\n            return localVarFp.assetReportFilter(assetReportFilterRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n         * @summary Retrieve an Asset Report\n         * @param {AssetReportGetRequest} assetReportGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any): AxiosPromise<AssetReportGetResponse> {\n            return localVarFp.assetReportGet(assetReportGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n         * @summary Retrieve a PDF Asset Report\n         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any): AxiosPromise<any> {\n            return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n         * @summary Refresh an Asset Report\n         * @param {AssetReportRefreshRequest} assetReportRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any): AxiosPromise<AssetReportRefreshResponse> {\n            return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n         * @summary Delete an Asset Report\n         * @param {AssetReportRemoveRequest} assetReportRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any): AxiosPromise<AssetReportRemoveResponse> {\n            return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n         * @summary Retrieve auth data\n         * @param {AuthGetRequest} authGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authGet(authGetRequest: AuthGetRequest, options?: any): AxiosPromise<AuthGetResponse> {\n            return localVarFp.authGet(authGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n         * @summary Get balance of your Bank Transfer account\n         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any): AxiosPromise<BankTransferBalanceGetResponse> {\n            return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n         * @summary Cancel a bank transfer\n         * @param {BankTransferCancelRequest} bankTransferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any): AxiosPromise<BankTransferCancelResponse> {\n            return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n         * @summary Create a bank transfer\n         * @param {BankTransferCreateRequest} bankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any): AxiosPromise<BankTransferCreateResponse> {\n            return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n         * @summary List bank transfer events\n         * @param {BankTransferEventListRequest} bankTransferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any): AxiosPromise<BankTransferEventListResponse> {\n            return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n         * @summary Sync bank transfer events\n         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any): AxiosPromise<BankTransferEventSyncResponse> {\n            return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n         * @summary Retrieve a bank transfer\n         * @param {BankTransferGetRequest} bankTransferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any): AxiosPromise<BankTransferGetResponse> {\n            return localVarFp.bankTransferGet(bankTransferGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. \n         * @summary List bank transfers\n         * @param {BankTransferListRequest} bankTransferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any): AxiosPromise<BankTransferListResponse> {\n            return localVarFp.bankTransferList(bankTransferListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n         * @summary Migrate account into Bank Transfers\n         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any): AxiosPromise<BankTransferMigrateAccountResponse> {\n            return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any): AxiosPromise<BankTransferSweepGetResponse> {\n            return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any): AxiosPromise<BankTransferSweepListResponse> {\n            return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n         * @summary Get Categories\n         * @param {object} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        categoriesGet(body: object, options?: any): AxiosPromise<CategoriesGetResponse> {\n            return localVarFp.categoriesGet(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n         * @summary Create payment token\n         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any): AxiosPromise<PaymentInitiationPaymentTokenCreateResponse> {\n            return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch without using Plaid Exchange\n         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any): AxiosPromise<DepositSwitchAltCreateResponse> {\n            return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n         * @summary Create a deposit switch\n         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any): AxiosPromise<DepositSwitchCreateResponse> {\n            return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n         * @summary Retrieve a deposit switch\n         * @param {DepositSwitchGetRequest} depositSwitchGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any): AxiosPromise<DepositSwitchGetResponse> {\n            return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. \n         * @summary Create a deposit switch token\n         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any): AxiosPromise<DepositSwitchTokenCreateResponse> {\n            return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n         * @summary Search employer database\n         * @param {EmployersSearchRequest} employersSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any): AxiosPromise<EmployersSearchResponse> {\n            return localVarFp.employersSearch(employersSearchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n         * @summary Retrieve a summary of an individual\\'s employment information\n         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any): AxiosPromise<EmploymentVerificationGetResponse> {\n            return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n         * @summary Retrieve identity data\n         * @param {IdentityGetRequest} identityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        identityGet(identityGetRequest: IdentityGetRequest, options?: any): AxiosPromise<IdentityGetResponse> {\n            return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. \n         * @summary (Deprecated) Create an income verification instance\n         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any): AxiosPromise<IncomeVerificationCreateResponse> {\n            return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n         * @summary Download the original documents used for income verification\n         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any): AxiosPromise<any> {\n            return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * /income/verification/paystub/get returns information from a single paystub used for income verification\n         * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n         * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest: IncomeVerificationPaystubGetRequest, options?: any): AxiosPromise<IncomeVerificationPaystubGetResponse> {\n            return localVarFp.incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the paystubs used for income verification\n         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any): AxiosPromise<IncomeVerificationPaystubsGetResponse> {\n            return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n         * @summary Check digital income verification eligibility and optimize conversion\n         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any): AxiosPromise<IncomeVerificationPrecheckResponse> {\n            return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/refresh` refreshes a given income verification.\n         * @summary Refresh an income verification\n         * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationRefresh(incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest, options?: any): AxiosPromise<IncomeVerificationRefreshResponse> {\n            return localVarFp.incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary (Deprecated) Retrieve a summary of information derived from income verification\n         * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest: IncomeVerificationSummaryGetRequest, options?: any): AxiosPromise<IncomeVerificationSummaryGetResponse> {\n            return localVarFp.incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n         * @summary Retrieve information from the tax documents used for income verification\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        incomeVerificationTaxformsGet(requestBody: { [key: string]: object; }, options?: any): AxiosPromise<IncomeVerificationTaxformsGetResponse> {\n            return localVarFp.incomeVerificationTaxformsGet(requestBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n         * @summary Get details of all supported institutions\n         * @param {InstitutionsGetRequest} institutionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any): AxiosPromise<InstitutionsGetResponse> {\n            return localVarFp.institutionsGet(institutionsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Get details of an institution\n         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any): AxiosPromise<InstitutionsGetByIdResponse> {\n            return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n         * @summary Search institutions\n         * @param {InstitutionsSearchRequest} institutionsSearchRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any): AxiosPromise<InstitutionsSearchResponse> {\n            return localVarFp.institutionsSearch(institutionsSearchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n         * @summary Get Investment holdings\n         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any): AxiosPromise<InvestmentsHoldingsGetResponse> {\n            return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n         * @summary Get investment transactions\n         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any): AxiosPromise<InvestmentsTransactionsGetResponse> {\n            return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. \n         * @summary Invalidate access_token\n         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any): AxiosPromise<ItemAccessTokenInvalidateResponse> {\n            return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List a userâ€™s connected applications\n         * @summary List a userâ€™s connected applications\n         * @param {ItemApplicationListRequest} itemApplicationListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any): AxiosPromise<ItemApplicationListResponse> {\n            return localVarFp.itemApplicationList(itemApplicationListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Enable consumers to update product access on selected accounts for an application.\n         * @summary Update the scopes of access for a particular application\n         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any): AxiosPromise<ItemApplicationScopesUpdateResponse> {\n            return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n         * @summary Create public token\n         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any): AxiosPromise<ItemPublicTokenCreateResponse> {\n            return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the status of an Item.\n         * @summary Retrieve an Item\n         * @param {ItemGetRequest} itemGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemGet(itemGetRequest: ItemGetRequest, options?: any): AxiosPromise<ItemGetResponse> {\n            return localVarFp.itemGet(itemGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n         * @summary Import Item\n         * @param {ItemImportRequest} itemImportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemImport(itemImportRequest: ItemImportRequest, options?: any): AxiosPromise<ItemImportResponse> {\n            return localVarFp.itemImport(itemImportRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n         * @summary Exchange public token for an access token\n         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any): AxiosPromise<ItemPublicTokenExchangeResponse> {\n            return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n         * @summary Remove an Item\n         * @param {ItemRemoveRequest} itemRemoveRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any): AxiosPromise<ItemRemoveResponse> {\n            return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n         * @summary Update Webhook URL\n         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any): AxiosPromise<ItemWebhookUpdateResponse> {\n            return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n         * @summary Retrieve Liabilities data\n         * @param {LiabilitiesGetRequest} liabilitiesGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any): AxiosPromise<LiabilitiesGetResponse> {\n            return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n         * @summary Create Link Token\n         * @param {LinkTokenCreateRequest} linkTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any): AxiosPromise<LinkTokenCreateResponse> {\n            return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n         * @summary Get Link Token\n         * @param {LinkTokenGetRequest} linkTokenGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any): AxiosPromise<LinkTokenGetResponse> {\n            return localVarFp.linkTokenGet(linkTokenGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n         * @summary Create a payment\n         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any): AxiosPromise<PaymentInitiationPaymentCreateResponse> {\n            return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n         * @summary Get payment details\n         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any): AxiosPromise<PaymentInitiationPaymentGetResponse> {\n            return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n         * @summary List payments\n         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any): AxiosPromise<PaymentInitiationPaymentListResponse> {\n            return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account. \n         * @summary Reverse an existing payment\n         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any): AxiosPromise<PaymentInitiationPaymentReverseResponse> {\n            return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. \n         * @summary Create payment recipient\n         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any): AxiosPromise<PaymentInitiationRecipientCreateResponse> {\n            return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get details about a payment recipient you have previously created.\n         * @summary Get payment recipient\n         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any): AxiosPromise<PaymentInitiationRecipientGetResponse> {\n            return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n         * @summary List payment recipients\n         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any): AxiosPromise<PaymentInitiationRecipientListResponse> {\n            return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n         * @summary Create Apex bank account token\n         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any): AxiosPromise<ProcessorTokenCreateResponse> {\n            return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). \n         * @summary Retrieve Auth data\n         * @param {ProcessorAuthGetRequest} processorAuthGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any): AxiosPromise<ProcessorAuthGetResponse> {\n            return localVarFp.processorAuthGet(processorAuthGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. \n         * @summary Retrieve Balance data\n         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any): AxiosPromise<ProcessorBalanceGetResponse> {\n            return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n         * @summary Create a bank transfer as a processor\n         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any): AxiosPromise<ProcessorBankTransferCreateResponse> {\n            return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n         * @summary Retrieve Identity data\n         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any): AxiosPromise<ProcessorIdentityGetResponse> {\n            return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n         * @summary Create Stripe bank account token\n         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any): AxiosPromise<ProcessorStripeBankAccountTokenCreateResponse> {\n            return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n         * @summary Create processor token\n         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any): AxiosPromise<ProcessorTokenCreateResponse> {\n            return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n         * @summary Manually fire a Bank Transfer webhook\n         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any): AxiosPromise<SandboxBankTransferFireWebhookResponse> {\n            return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a bank transfer event in Sandbox\n         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any): AxiosPromise<SandboxBankTransferSimulateResponse> {\n            return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n         * @summary Manually fire an Income webhook\n         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any): AxiosPromise<SandboxIncomeFireWebhookResponse> {\n            return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n         * @summary Fire a test webhook\n         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any): AxiosPromise<SandboxItemFireWebhookResponse> {\n            return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n         * @summary Force a Sandbox Item into an error state\n         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any): AxiosPromise<SandboxItemResetLoginResponse> {\n            return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n         * @summary Set verification status for Sandbox account\n         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any): AxiosPromise<SandboxItemSetVerificationStatusResponse> {\n            return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Save the selected accounts when connecting to the Platypus Oauth institution\n         * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any): AxiosPromise<{ [key: string]: object; }> {\n            return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n         * @summary Create a test Item and processor token\n         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any): AxiosPromise<SandboxProcessorTokenCreateResponse> {\n            return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n         * @summary Create a test Item\n         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any): AxiosPromise<SandboxPublicTokenCreateResponse> {\n            return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n         * @summary Trigger the creation of a repayment\n         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any): AxiosPromise<SandboxTransferRepaymentSimulateResponse> {\n            return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n         * @summary Simulate a transfer event in Sandbox\n         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any): AxiosPromise<SandboxTransferSimulateResponse> {\n            return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n         * @summary Simulate creating a sweep\n         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any): AxiosPromise<SandboxTransferSweepSimulateResponse> {\n            return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n         * @summary Report whether you initiated an ACH transaction\n         * @param {SignalDecisionReportRequest} signalDecisionReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any): AxiosPromise<SignalDecisionReportResponse> {\n            return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n         * @summary Evaluate a planned ACH transaction\n         * @param {SignalEvaluateRequest} signalEvaluateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any): AxiosPromise<SignalEvaluateResponse> {\n            return localVarFp.signalEvaluate(signalEvaluateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n         * @summary Report a return for an ACH transaction\n         * @param {SignalReturnReportRequest} signalReturnReportRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any): AxiosPromise<SignalReturnReportResponse> {\n            return localVarFp.signalReturnReport(signalReturnReportRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n         * @summary Get transaction data\n         * @param {TransactionsGetRequest} transactionsGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any): AxiosPromise<TransactionsGetResponse> {\n            return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get streams of recurring transactions\n         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any): AxiosPromise<TransactionsRecurringGetResponse> {\n            return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n         * @summary Refresh transaction data\n         * @param {TransactionsRefreshRequest} transactionsRefreshRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any): AxiosPromise<TransactionsRefreshResponse> {\n            return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n         * @summary Get incremental transaction updates on an Item\n         * @param {TransactionsSyncRequest} transactionsSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any): AxiosPromise<TransactionsSyncResponse> {\n            return localVarFp.transactionsSync(transactionsSyncRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n         * @summary Create a transfer authorization\n         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any): AxiosPromise<TransferAuthorizationCreateResponse> {\n            return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n         * @summary Cancel a transfer\n         * @param {TransferCancelRequest} transferCancelRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferCancel(transferCancelRequest: TransferCancelRequest, options?: any): AxiosPromise<TransferCancelResponse> {\n            return localVarFp.transferCancel(transferCancelRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/create` endpoint to initiate a new transfer.\n         * @summary Create a transfer\n         * @param {TransferCreateRequest} transferCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferCreate(transferCreateRequest: TransferCreateRequest, options?: any): AxiosPromise<TransferCreateResponse> {\n            return localVarFp.transferCreate(transferCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n         * @summary List transfer events\n         * @param {TransferEventListRequest} transferEventListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferEventList(transferEventListRequest: TransferEventListRequest, options?: any): AxiosPromise<TransferEventListResponse> {\n            return localVarFp.transferEventList(transferEventListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n         * @summary Sync transfer events\n         * @param {TransferEventSyncRequest} transferEventSyncRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any): AxiosPromise<TransferEventSyncResponse> {\n            return localVarFp.transferEventSync(transferEventSyncRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n         * @summary Retrieve a transfer\n         * @param {TransferGetRequest} transferGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferGet(transferGetRequest: TransferGetRequest, options?: any): AxiosPromise<TransferGetResponse> {\n            return localVarFp.transferGet(transferGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n         * @summary Create a transfer intent object to invoke the Transfer UI\n         * @param {TransferIntentCreateRequest} transferIntentCreateRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any): AxiosPromise<TransferIntentCreateResponse> {\n            return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n         * @summary Retrieve more information about a transfer intent\n         * @param {{ [key: string]: object; }} requestBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferIntentGet(requestBody: { [key: string]: object; }, options?: any): AxiosPromise<TransferIntentGetResponse> {\n            return localVarFp.transferIntentGet(requestBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. \n         * @summary List transfers\n         * @param {TransferListRequest} transferListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferList(transferListRequest: TransferListRequest, options?: any): AxiosPromise<TransferListResponse> {\n            return localVarFp.transferList(transferListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n         * @summary Lists historical repayments\n         * @param {TransferRepaymentListRequest} transferRepaymentListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any): AxiosPromise<TransferRepaymentListResponse> {\n            return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n         * @summary List the returns included in a repayment\n         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any): AxiosPromise<TransferRepaymentReturnListResponse> {\n            return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n         * @summary Retrieve a sweep\n         * @param {TransferSweepGetRequest} transferSweepGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any): AxiosPromise<TransferSweepGetResponse> {\n            return localVarFp.transferSweepGet(transferSweepGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n         * @summary List sweeps\n         * @param {TransferSweepListRequest} transferSweepListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any): AxiosPromise<TransferSweepListResponse> {\n            return localVarFp.transferSweepList(transferSweepListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch an e-wallet. The response includes the current balance. \n         * @summary Fetch an e-wallet\n         * @param {WalletGetRequest} walletGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletGet(walletGetRequest: WalletGetRequest, options?: any): AxiosPromise<WalletGetResponse> {\n            return localVarFp.walletGet(walletGetRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. \n         * @summary Execute a transaction using an e-wallet\n         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any): AxiosPromise<WalletTransactionExecuteResponse> {\n            return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. \n         * @summary List e-wallet transactions\n         * @param {WalletTransactionsListRequest} walletTransactionsListRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        walletTransactionsList(walletTransactionsListRequest: WalletTransactionsListRequest, options?: any): AxiosPromise<WalletTransactionsListResponse> {\n            return localVarFp.walletTransactionsList(walletTransactionsListRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n         * @summary Get webhook verification key\n         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any): AxiosPromise<WebhookVerificationKeyGetResponse> {\n            return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PlaidApi - object-oriented interface\n * @export\n * @class PlaidApi\n * @extends {BaseAPI}\n */\nexport class PlaidApi extends BaseAPI {\n    /**\n     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.\n     * @summary Retrieve real-time balance data\n     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.\n     * @summary Retrieve accounts\n     * @param {AccountsGetRequest} accountsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public accountsGet(accountsGetRequest: AccountsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences\n     * @summary Retrieve information about a Plaid application\n     * @param {ApplicationGetRequest} applicationGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public applicationGet(applicationGetRequest: ApplicationGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.\n     * @summary Create Asset Report Audit Copy\n     * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.\n     * @summary Retrieve an Asset Report Audit Copy\n     * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.\n     * @summary Remove Asset Report Audit Copy\n     * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.\n     * @summary Create an Asset Report\n     * @param {AssetReportCreateRequest} assetReportCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.\n     * @summary Filter Asset Report\n     * @param {AssetReportFilterRequest} assetReportFilterRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.\n     * @summary Retrieve an Asset Report\n     * @param {AssetReportGetRequest} assetReportGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportGet(assetReportGetRequest: AssetReportGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).\n     * @summary Retrieve a PDF Asset Report\n     * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * An Asset Report is an immutable snapshot of a user\\'s assets. In order to \\\"refresh\\\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\\\"\\\") for any previously-populated fields you would like set as empty.\n     * @summary Refresh an Asset Report\n     * @param {AssetReportRefreshRequest} assetReportRefreshRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.\n     * @summary Delete an Asset Report\n     * @param {AssetReportRemoveRequest} assetReportRemoveRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest, options?: any) {\n        return PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).\n     * @summary Retrieve auth data\n     * @param {AuthGetRequest} authGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public authGet(authGetRequest: AuthGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.\n     * @summary Get balance of your Bank Transfer account\n     * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.\n     * @summary Cancel a bank transfer\n     * @param {BankTransferCancelRequest} bankTransferCancelRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.\n     * @summary Create a bank transfer\n     * @param {BankTransferCreateRequest} bankTransferCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.\n     * @summary List bank transfer events\n     * @param {BankTransferEventListRequest} bankTransferEventListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.\n     * @summary Sync bank transfer events\n     * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.\n     * @summary Retrieve a bank transfer\n     * @param {BankTransferGetRequest} bankTransferGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferGet(bankTransferGetRequest: BankTransferGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. \n     * @summary List bank transfers\n     * @param {BankTransferListRequest} bankTransferListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferList(bankTransferListRequest: BankTransferListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.\n     * @summary Migrate account into Bank Transfers\n     * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {BankTransferSweepListRequest} bankTransferSweepListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.\n     * @summary Get Categories\n     * @param {object} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public categoriesGet(body: object, options?: any) {\n        return PlaidApiFp(this.configuration).categoriesGet(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.\n     * @summary Create payment token\n     * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch without using Plaid Exchange\n     * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.\n     * @summary Create a deposit switch\n     * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\\'s direct deposit allocation preferences.\n     * @summary Retrieve a deposit switch\n     * @param {DepositSwitchGetRequest} depositSwitchGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. \n     * @summary Create a deposit switch token\n     * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.\n     * @summary Search employer database\n     * @param {EmployersSearchRequest} employersSearchRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public employersSearch(employersSearchRequest: EmployersSearchRequest, options?: any) {\n        return PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.\n     * @summary Retrieve a summary of an individual\\'s employment information\n     * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.\n     * @summary Retrieve identity data\n     * @param {IdentityGetRequest} identityGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public identityGet(identityGetRequest: IdentityGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. \n     * @summary (Deprecated) Create an income verification instance\n     * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.\n     * @summary Download the original documents used for income verification\n     * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * /income/verification/paystub/get returns information from a single paystub used for income verification\n     * @summary (Deprecated) Retrieve information from a single paystub used for income verification\n     * @param {IncomeVerificationPaystubGetRequest} incomeVerificationPaystubGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest: IncomeVerificationPaystubGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationPaystubGet(incomeVerificationPaystubGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the paystubs used for income verification\n     * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.\n     * @summary Check digital income verification eligibility and optimize conversion\n     * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/refresh` refreshes a given income verification.\n     * @summary Refresh an income verification\n     * @param {IncomeVerificationRefreshRequest} incomeVerificationRefreshRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationRefresh(incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationRefresh(incomeVerificationRefreshRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary (Deprecated) Retrieve a summary of information derived from income verification\n     * @param {IncomeVerificationSummaryGetRequest} incomeVerificationSummaryGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest: IncomeVerificationSummaryGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationSummaryGet(incomeVerificationSummaryGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.\n     * @summary Retrieve information from the tax documents used for income verification\n     * @param {{ [key: string]: object; }} requestBody \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public incomeVerificationTaxformsGet(requestBody: { [key: string]: object; }, options?: any) {\n        return PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(requestBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.\n     * @summary Get details of all supported institutions\n     * @param {InstitutionsGetRequest} institutionsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public institutionsGet(institutionsGetRequest: InstitutionsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n     * @summary Get details of an institution\n     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any) {\n        return PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. \n     * @summary Search institutions\n     * @param {InstitutionsSearchRequest} institutionsSearchRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest, options?: any) {\n        return PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.\n     * @summary Get Investment holdings\n     * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.\n     * @summary Get investment transactions\n     * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. \n     * @summary Invalidate access_token\n     * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List a userâ€™s connected applications\n     * @summary List a userâ€™s connected applications\n     * @param {ItemApplicationListRequest} itemApplicationListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Enable consumers to update product access on selected accounts for an application.\n     * @summary Update the scopes of access for a particular application\n     * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.\n     * @summary Create public token\n     * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the status of an Item.\n     * @summary Retrieve an Item\n     * @param {ItemGetRequest} itemGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemGet(itemGetRequest: ItemGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).\n     * @summary Import Item\n     * @param {ItemImportRequest} itemImportRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemImport(itemImportRequest: ItemImportRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.\n     * @summary Exchange public token for an access token\n     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.\n     * @summary Remove an Item\n     * @param {ItemRemoveRequest} itemRemoveRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.\n     * @summary Update Webhook URL\n     * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.\n     * @summary Retrieve Liabilities data\n     * @param {LiabilitiesGetRequest} liabilitiesGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.\n     * @summary Create Link Token\n     * @param {LinkTokenCreateRequest} linkTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.\n     * @summary Get Link Token\n     * @param {LinkTokenGetRequest} linkTokenGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.\n     * @summary Create a payment\n     * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.\n     * @summary Get payment details\n     * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.\n     * @summary List payments\n     * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\\'s account. \n     * @summary Reverse an existing payment\n     * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. \n     * @summary Create payment recipient\n     * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get details about a payment recipient you have previously created.\n     * @summary Get payment recipient\n     * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.\n     * @summary List payment recipients\n     * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.\n     * @summary Create Apex bank account token\n     * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\\'\\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). \n     * @summary Retrieve Auth data\n     * @param {ProcessorAuthGetRequest} processorAuthGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. \n     * @summary Retrieve Balance data\n     * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor\n     * @summary Create a bank transfer as a processor\n     * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.\n     * @summary Retrieve Identity data\n     * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).\n     * @summary Create Stripe bank account token\n     * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Used to create a token suitable for sending to one of Plaid\\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.\n     * @summary Create processor token\n     * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.\n     * @summary Manually fire a Bank Transfer webhook\n     * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a bank transfer event in Sandbox\n     * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.\n     * @summary Manually fire an Income webhook\n     * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.\n     * @summary Fire a test webhook\n     * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.\n     * @summary Force a Sandbox Item into an error state\n     * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).\n     * @summary Set verification status for Sandbox account\n     * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Save the selected accounts when connecting to the Platypus Oauth institution\n     * @summary Save the selected accounts when connecting to the Platypus Oauth institution\n     * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.\n     * @summary Create a test Item and processor token\n     * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.\n     * @summary Create a test Item\n     * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.\n     * @summary Trigger the creation of a repayment\n     * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.\n     * @summary Simulate a transfer event in Sandbox\n     * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.\n     * @summary Simulate creating a sweep\n     * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.\n     * @summary Report whether you initiated an ACH transaction\n     * @param {SignalDecisionReportRequest} signalDecisionReportRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest, options?: any) {\n        return PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.\n     * @summary Evaluate a planned ACH transaction\n     * @param {SignalEvaluateRequest} signalEvaluateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.\n     * @summary Report a return for an ACH transaction\n     * @param {SignalReturnReportRequest} signalReturnReportRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest, options?: any) {\n        return PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.\n     * @summary Get transaction data\n     * @param {TransactionsGetRequest} transactionsGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get streams of recurring transactions\n     * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.\n     * @summary Refresh transaction data\n     * @param {TransactionsRefreshRequest} transactionsRefreshRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.\n     * @summary Get incremental transaction updates on an Item\n     * @param {TransactionsSyncRequest} transactionsSyncRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transactionsSync(transactionsSyncRequest: TransactionsSyncRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.\n     * @summary Create a transfer authorization\n     * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.\n     * @summary Cancel a transfer\n     * @param {TransferCancelRequest} transferCancelRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferCancel(transferCancelRequest: TransferCancelRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/create` endpoint to initiate a new transfer.\n     * @summary Create a transfer\n     * @param {TransferCreateRequest} transferCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferCreate(transferCreateRequest: TransferCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.\n     * @summary List transfer events\n     * @param {TransferEventListRequest} transferEventListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferEventList(transferEventListRequest: TransferEventListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.\n     * @summary Sync transfer events\n     * @param {TransferEventSyncRequest} transferEventSyncRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferEventSync(transferEventSyncRequest: TransferEventSyncRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.\n     * @summary Retrieve a transfer\n     * @param {TransferGetRequest} transferGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferGet(transferGetRequest: TransferGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.\n     * @summary Create a transfer intent object to invoke the Transfer UI\n     * @param {TransferIntentCreateRequest} transferIntentCreateRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.\n     * @summary Retrieve more information about a transfer intent\n     * @param {{ [key: string]: object; }} requestBody \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferIntentGet(requestBody: { [key: string]: object; }, options?: any) {\n        return PlaidApiFp(this.configuration).transferIntentGet(requestBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. \n     * @summary List transfers\n     * @param {TransferListRequest} transferListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferList(transferListRequest: TransferListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferList(transferListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.\n     * @summary Lists historical repayments\n     * @param {TransferRepaymentListRequest} transferRepaymentListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.\n     * @summary List the returns included in a repayment\n     * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.\n     * @summary Retrieve a sweep\n     * @param {TransferSweepGetRequest} transferSweepGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.\n     * @summary List sweeps\n     * @param {TransferSweepListRequest} transferSweepListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public transferSweepList(transferSweepListRequest: TransferSweepListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch an e-wallet. The response includes the current balance. \n     * @summary Fetch an e-wallet\n     * @param {WalletGetRequest} walletGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public walletGet(walletGetRequest: WalletGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. \n     * @summary Execute a transaction using an e-wallet\n     * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options?: any) {\n        return PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. \n     * @summary List e-wallet transactions\n     * @param {WalletTransactionsListRequest} walletTransactionsListRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public walletTransactionsList(walletTransactionsListRequest: WalletTransactionsListRequest, options?: any) {\n        return PlaidApiFp(this.configuration).walletTransactionsList(walletTransactionsListRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.\n     * @summary Get webhook verification key\n     * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlaidApi\n     */\n    public webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options?: any) {\n        return PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}