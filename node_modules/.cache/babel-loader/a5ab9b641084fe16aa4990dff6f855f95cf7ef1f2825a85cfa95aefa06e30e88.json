{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pilat\\\\OneDrive\\\\Documents\\\\GitHub\\\\react\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport \"./App.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App(props) {\n  _s();\n  const [token, setToken] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const onSuccess = useCallback(async publicToken => {\n    setLoading(true);\n    await fetch(\"/api/exchange_public_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        public_token: publicToken\n      })\n    });\n    const data = await response.json();\n    const accessToken = data.access_token;\n    const accountId = data.item.accounts[0].account_id; // assuming the first account is the one you want to create a processor token for\n    const request = {\n      access_token: accessToken,\n      account_id: accountId,\n      processor: 'circle' // replace with your desired processor\n    };\n\n    const processorTokenResponse = await fetch(\"/api/create_processor_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(request)\n    });\n    const processorTokenData = await processorTokenResponse.json();\n    const processorToken = processorTokenData.processor_token;\n    setToken(processorToken);\n    await getBalance();\n  }, []);\n\n  // Creates a Link token\n  const createLinkToken = React.useCallback(async () => {\n    // For OAuth, use previously generated Link token\n    if (window.location.href.includes(\"?oauth_state_id=\")) {\n      const linkToken = localStorage.getItem('link_token');\n      setToken(linkToken);\n    } else {\n      const response = await fetch(\"/api/create_link_token\", {\n        headers: {\n          \"Plaid-Version\": \"2020-09-14\",\n          \"PLAID-CLIENT-ID\": process.env.PLAID_CLIENT_ID,\n          \"PLAID-SECRET\": process.env.PLAID_SECRET\n        }\n      });\n      const data = await response.json();\n      setToken(data.link_token);\n      localStorage.setItem(\"link_token\", data.link_token);\n    }\n  }, [setToken]);\n\n  // Fetch balance data\n  const getBalance = React.useCallback(async () => {\n    setLoading(true);\n    const response = await fetch(\"/api/balance\", {});\n    const data = await response.json();\n    setData(data);\n    setLoading(false);\n  }, [setData, setLoading]);\n  let isOauth = false;\n  const config = {\n    token,\n    onSuccess\n  };\n\n  // For OAuth, configure the received redirect URI\n  if (window.location.href.includes(\"?oauth_state_id=\")) {\n    config.receivedRedirectUri = window.location.href;\n    isOauth = true;\n  }\n  const {\n    open,\n    ready\n  } = usePlaidLink(config);\n  useEffect(() => {\n    if (token == null) {\n      createLinkToken();\n    }\n    if (isOauth && ready) {\n      open();\n    }\n  }, [token, isOauth, ready, open]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => open(),\n      disabled: !ready,\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Link account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), !loading && data != null && Object.entries(data).map((entry, i) => /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: JSON.stringify(entry[1], null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n0NUqVt+TgDld2yb9Klifxgo0o0=\", false, function () {\n  return [usePlaidLink];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","usePlaidLink","jsxDEV","_jsxDEV","App","props","_s","token","setToken","data","setData","loading","setLoading","onSuccess","publicToken","fetch","method","headers","body","JSON","stringify","public_token","response","json","accessToken","access_token","accountId","item","accounts","account_id","request","processor","processorTokenResponse","processorTokenData","processorToken","processor_token","getBalance","createLinkToken","window","location","href","includes","linkToken","localStorage","getItem","process","env","PLAID_CLIENT_ID","PLAID_SECRET","link_token","setItem","isOauth","config","receivedRedirectUri","open","ready","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","entry","i","_c","$RefreshReg$"],"sources":["C:/Users/pilat/OneDrive/Documents/GitHub/react/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport \"./App.scss\";\n\nfunction App(props) {\n  const [token, setToken] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const onSuccess = useCallback(async (publicToken) => {\n    setLoading(true);\n    await fetch(\"/api/exchange_public_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ public_token: publicToken }),\n    });\nconst data = await response.json();\n  const accessToken = data.access_token;\n  const accountId = data.item.accounts[0].account_id; // assuming the first account is the one you want to create a processor token for\n  const request = {\n    access_token: accessToken,\n    account_id: accountId,\n    processor: 'circle', // replace with your desired processor\n  };\n  const processorTokenResponse = await fetch(\"/api/create_processor_token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  const processorTokenData = await processorTokenResponse.json();\n  const processorToken = processorTokenData.processor_token;\n  setToken(processorToken);\n    await getBalance();\n  }, []);\n\n  // Creates a Link token\n  const createLinkToken = React.useCallback(async () => {\n    // For OAuth, use previously generated Link token\n    if (window.location.href.includes(\"?oauth_state_id=\")) {\n      const linkToken = localStorage.getItem('link_token');\n      setToken(linkToken);\n    } else {\n      const response = await fetch(\"/api/create_link_token\", {\n      headers: {\n        \"Plaid-Version\": \"2020-09-14\",\n        \"PLAID-CLIENT-ID\": process.env.PLAID_CLIENT_ID,\n        \"PLAID-SECRET\": process.env.PLAID_SECRET,\n      },\n    });\n      const data = await response.json();\n      setToken(data.link_token);\n      localStorage.setItem(\"link_token\", data.link_token);\n    }\n  }, [setToken]);\n\n\n\n  // Fetch balance data\n  const getBalance = React.useCallback(async () => {\n    setLoading(true);\n    const response = await fetch(\"/api/balance\", {});\n    const data = await response.json();\n    setData(data);\n    setLoading(false);\n  }, [setData, setLoading]);\n\n  let isOauth = false;\n\n  const config = {\n    token,\n    onSuccess,\n  };\n\n  // For OAuth, configure the received redirect URI\n  if (window.location.href.includes(\"?oauth_state_id=\")) {\n    config.receivedRedirectUri = window.location.href;\n    isOauth = true;\n  }\n  const { open, ready } = usePlaidLink(config);\n\n  useEffect(() => {\n    if (token == null) {\n      createLinkToken();\n    }\n    if (isOauth && ready) {\n      open();\n    }\n  }, [token, isOauth, ready, open]);\n  \n  return (\n    <div>\n      <button onClick={() => open()\n        } disabled={!ready}>\n        <strong>Link account</strong>\n      </button>\n\n      {!loading &&\n        data != null &&\n        Object.entries(data).map((entry, i) => (\n          <pre key={i}>\n            <code>{JSON.stringify(entry[1], null, 2)}</code>\n          </pre>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}